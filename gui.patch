diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..b03a3c5
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+*.xcodeproj/*
+!*.xcodeproj/*.pbxproj
diff --git a/ApplicationKit.xcodeproj/project.pbxproj b/ApplicationKit.xcodeproj/project.pbxproj
new file mode 100644
index 0000000..03c1a72
--- /dev/null
+++ b/ApplicationKit.xcodeproj/project.pbxproj
@@ -0,0 +1,3342 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 46;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		187528E7169EE4A8001C1D58 /* GMAppKit.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875281F169EE4A8001C1D58 /* GMAppKit.h */; };
+		187528E8169EE4A8001C1D58 /* GMArchiver.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752820169EE4A8001C1D58 /* GMArchiver.h */; };
+		187528E9169EE4A8001C1D58 /* GSAnimator.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752821169EE4A8001C1D58 /* GSAnimator.h */; };
+		187528EA169EE4A8001C1D58 /* GSCharacterPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752822169EE4A8001C1D58 /* GSCharacterPanel.h */; };
+		187528EB169EE4A8001C1D58 /* GSDisplayServer.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752823169EE4A8001C1D58 /* GSDisplayServer.h */; };
+		187528EC169EE4A8001C1D58 /* GSDragView.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752824169EE4A8001C1D58 /* GSDragView.h */; };
+		187528ED169EE4A8001C1D58 /* GSEPSPrintOperation.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752825169EE4A8001C1D58 /* GSEPSPrintOperation.h */; };
+		187528EE169EE4A8001C1D58 /* GSFontInfo.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752826169EE4A8001C1D58 /* GSFontInfo.h */; };
+		187528EF169EE4A8001C1D58 /* GSGhostscriptImageRep.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752827169EE4A8001C1D58 /* GSGhostscriptImageRep.h */; };
+		187528F0169EE4A8001C1D58 /* GSGormLoading.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752828169EE4A8001C1D58 /* GSGormLoading.h */; };
+		187528F1169EE4A8001C1D58 /* GSHbox.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752829169EE4A8001C1D58 /* GSHbox.h */; };
+		187528F2169EE4A8001C1D58 /* GSHelpAttachment.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875282A169EE4A8001C1D58 /* GSHelpAttachment.h */; };
+		187528F3169EE4A8001C1D58 /* GSHelpManagerPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875282B169EE4A8001C1D58 /* GSHelpManagerPanel.h */; };
+		187528F4169EE4A8001C1D58 /* GSHorizontalTypesetter.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875282C169EE4A8001C1D58 /* GSHorizontalTypesetter.h */; };
+		187528F5169EE4A8001C1D58 /* GSImageMagickImageRep.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875282D169EE4A8001C1D58 /* GSImageMagickImageRep.h */; };
+		187528F6169EE4A8001C1D58 /* GSInfoPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875282E169EE4A8001C1D58 /* GSInfoPanel.h */; };
+		187528F7169EE4A8001C1D58 /* GSInstantiator.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875282F169EE4A8001C1D58 /* GSInstantiator.h */; };
+		187528F8169EE4A8001C1D58 /* GSLayoutManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752830169EE4A8001C1D58 /* GSLayoutManager.h */; };
+		187528F9169EE4A8001C1D58 /* GSLayoutManager_internal.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752831169EE4A8001C1D58 /* GSLayoutManager_internal.h */; };
+		187528FA169EE4A8001C1D58 /* GSMemoryPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752832169EE4A8001C1D58 /* GSMemoryPanel.h */; };
+		187528FB169EE4A8001C1D58 /* GSMethodTable.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752833169EE4A8001C1D58 /* GSMethodTable.h */; };
+		187528FC169EE4A8001C1D58 /* GSModelLoaderFactory.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752834169EE4A8001C1D58 /* GSModelLoaderFactory.h */; };
+		187528FD169EE4A8001C1D58 /* GSNibContainer.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752835169EE4A8001C1D58 /* GSNibContainer.h */; };
+		187528FE169EE4A8001C1D58 /* GSNibLoading.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752836169EE4A8001C1D58 /* GSNibLoading.h */; };
+		187528FF169EE4A8001C1D58 /* GSPDFPrintOperation.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752837169EE4A8001C1D58 /* GSPDFPrintOperation.h */; };
+		18752900169EE4A8001C1D58 /* GSPasteboardServer.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752838169EE4A8001C1D58 /* GSPasteboardServer.h */; };
+		18752901169EE4A8001C1D58 /* GSPrintOperation.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752839169EE4A8001C1D58 /* GSPrintOperation.h */; };
+		18752902169EE4A8001C1D58 /* GSPrinting.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875283A169EE4A8001C1D58 /* GSPrinting.h */; };
+		18752903169EE4A8001C1D58 /* GSServicesManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875283B169EE4A8001C1D58 /* GSServicesManager.h */; };
+		18752904169EE4A8001C1D58 /* GSSoundSink.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875283C169EE4A8001C1D58 /* GSSoundSink.h */; };
+		18752905169EE4A8001C1D58 /* GSSoundSource.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875283D169EE4A8001C1D58 /* GSSoundSource.h */; };
+		18752906169EE4A8001C1D58 /* GSTable.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875283E169EE4A8001C1D58 /* GSTable.h */; };
+		18752907169EE4A8001C1D58 /* GSTextConverter.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875283F169EE4A8001C1D58 /* GSTextConverter.h */; };
+		18752908169EE4A8001C1D58 /* GSTheme.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752840169EE4A8001C1D58 /* GSTheme.h */; };
+		18752909169EE4A8001C1D58 /* GSTitleView.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752841169EE4A8001C1D58 /* GSTitleView.h */; };
+		1875290A169EE4A8001C1D58 /* GSToolbarView.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752842169EE4A8001C1D58 /* GSToolbarView.h */; };
+		1875290B169EE4A8001C1D58 /* GSTrackingRect.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752843169EE4A8001C1D58 /* GSTrackingRect.h */; };
+		1875290C169EE4A8001C1D58 /* GSTypesetter.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752844169EE4A8001C1D58 /* GSTypesetter.h */; };
+		1875290D169EE4A8001C1D58 /* GSVbox.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752845169EE4A8001C1D58 /* GSVbox.h */; };
+		1875290E169EE4A8001C1D58 /* GSVersion.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752846169EE4A8001C1D58 /* GSVersion.h */; };
+		18752910169EE4A8001C1D58 /* GSWindowDecorationView.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752848169EE4A8001C1D58 /* GSWindowDecorationView.h */; };
+		18752911169EE4A8001C1D58 /* GSXibLoading.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752849169EE4A8001C1D58 /* GSXibLoading.h */; };
+		18752912169EE4A8001C1D58 /* IMConnectors.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875284A169EE4A8001C1D58 /* IMConnectors.h */; };
+		18752913169EE4A8001C1D58 /* IMCustomObject.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875284B169EE4A8001C1D58 /* IMCustomObject.h */; };
+		18752914169EE4A8001C1D58 /* IMLoading.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875284C169EE4A8001C1D58 /* IMLoading.h */; };
+		18752916169EE4A8001C1D58 /* AppKit.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875284F169EE4A8001C1D58 /* AppKit.h */; };
+		18752917169EE4A8001C1D58 /* AppKitDefines.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752850169EE4A8001C1D58 /* AppKitDefines.h */; };
+		18752918169EE4A8001C1D58 /* AppKitExceptions.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752851169EE4A8001C1D58 /* AppKitExceptions.h */; };
+		18752919169EE4A8001C1D58 /* DPSOperators.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752852169EE4A8001C1D58 /* DPSOperators.h */; };
+		1875291A169EE4A8001C1D58 /* NSActionCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752853169EE4A8001C1D58 /* NSActionCell.h */; };
+		1875291B169EE4A8001C1D58 /* NSAffineTransform.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752854169EE4A8001C1D58 /* NSAffineTransform.h */; };
+		1875291C169EE4A8001C1D58 /* NSAlert.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752855169EE4A8001C1D58 /* NSAlert.h */; };
+		1875291D169EE4A8001C1D58 /* NSAnimation.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752856169EE4A8001C1D58 /* NSAnimation.h */; };
+		1875291E169EE4A8001C1D58 /* NSApplication.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752857169EE4A8001C1D58 /* NSApplication.h */; };
+		1875291F169EE4A8001C1D58 /* NSArrayController.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752858169EE4A8001C1D58 /* NSArrayController.h */; };
+		18752920169EE4A8001C1D58 /* NSAttributedString.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752859169EE4A8001C1D58 /* NSAttributedString.h */; };
+		18752921169EE4A8001C1D58 /* NSBezierPath.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875285A169EE4A8001C1D58 /* NSBezierPath.h */; };
+		18752922169EE4A8001C1D58 /* NSBitmapImageRep.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875285B169EE4A8001C1D58 /* NSBitmapImageRep.h */; };
+		18752923169EE4A8001C1D58 /* NSBox.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875285C169EE4A8001C1D58 /* NSBox.h */; };
+		18752924169EE4A8001C1D58 /* NSBrowser.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875285D169EE4A8001C1D58 /* NSBrowser.h */; };
+		18752925169EE4A8001C1D58 /* NSBrowserCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875285E169EE4A8001C1D58 /* NSBrowserCell.h */; };
+		18752926169EE4A8001C1D58 /* NSButton.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875285F169EE4A8001C1D58 /* NSButton.h */; };
+		18752927169EE4A8001C1D58 /* NSButtonCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752860169EE4A8001C1D58 /* NSButtonCell.h */; };
+		18752928169EE4A8001C1D58 /* NSCachedImageRep.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752861169EE4A8001C1D58 /* NSCachedImageRep.h */; };
+		18752929169EE4A8001C1D58 /* NSCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752862169EE4A8001C1D58 /* NSCell.h */; };
+		1875292A169EE4A8001C1D58 /* NSClipView.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752863169EE4A8001C1D58 /* NSClipView.h */; };
+		1875292B169EE4A8001C1D58 /* NSColor.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752864169EE4A8001C1D58 /* NSColor.h */; };
+		1875292C169EE4A8001C1D58 /* NSColorList.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752865169EE4A8001C1D58 /* NSColorList.h */; };
+		1875292D169EE4A8001C1D58 /* NSColorPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752866169EE4A8001C1D58 /* NSColorPanel.h */; };
+		1875292E169EE4A8001C1D58 /* NSColorPicker.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752867169EE4A8001C1D58 /* NSColorPicker.h */; };
+		1875292F169EE4A8001C1D58 /* NSColorPicking.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752868169EE4A8001C1D58 /* NSColorPicking.h */; };
+		18752930169EE4A8001C1D58 /* NSColorSpace.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752869169EE4A8001C1D58 /* NSColorSpace.h */; };
+		18752931169EE4A8001C1D58 /* NSColorWell.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875286A169EE4A8001C1D58 /* NSColorWell.h */; };
+		18752932169EE4A8001C1D58 /* NSComboBox.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875286B169EE4A8001C1D58 /* NSComboBox.h */; };
+		18752933169EE4A8001C1D58 /* NSComboBoxCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875286C169EE4A8001C1D58 /* NSComboBoxCell.h */; };
+		18752934169EE4A8001C1D58 /* NSControl.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875286D169EE4A8001C1D58 /* NSControl.h */; };
+		18752935169EE4A8001C1D58 /* NSController.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875286E169EE4A8001C1D58 /* NSController.h */; };
+		18752936169EE4A8001C1D58 /* NSCursor.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875286F169EE4A8001C1D58 /* NSCursor.h */; };
+		18752937169EE4A8001C1D58 /* NSCustomImageRep.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752870169EE4A8001C1D58 /* NSCustomImageRep.h */; };
+		18752938169EE4A8001C1D58 /* NSDataLink.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752871169EE4A8001C1D58 /* NSDataLink.h */; };
+		18752939169EE4A8001C1D58 /* NSDataLinkManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752872169EE4A8001C1D58 /* NSDataLinkManager.h */; };
+		1875293A169EE4A8001C1D58 /* NSDataLinkPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752873169EE4A8001C1D58 /* NSDataLinkPanel.h */; };
+		1875293B169EE4A8001C1D58 /* NSDocument.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752874169EE4A8001C1D58 /* NSDocument.h */; };
+		1875293C169EE4A8001C1D58 /* NSDocumentController.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752875169EE4A8001C1D58 /* NSDocumentController.h */; };
+		1875293D169EE4A8001C1D58 /* NSDragging.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752876169EE4A8001C1D58 /* NSDragging.h */; };
+		1875293E169EE4A8001C1D58 /* NSDrawer.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752877169EE4A8001C1D58 /* NSDrawer.h */; };
+		1875293F169EE4A8001C1D58 /* NSEPSImageRep.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752878169EE4A8001C1D58 /* NSEPSImageRep.h */; };
+		18752940169EE4A8001C1D58 /* NSEvent.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752879169EE4A8001C1D58 /* NSEvent.h */; };
+		18752941169EE4A8001C1D58 /* NSFileWrapper.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875287A169EE4A8001C1D58 /* NSFileWrapper.h */; };
+		18752942169EE4A8001C1D58 /* NSFont.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875287B169EE4A8001C1D58 /* NSFont.h */; };
+		18752943169EE4A8001C1D58 /* NSFontDescriptor.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875287C169EE4A8001C1D58 /* NSFontDescriptor.h */; };
+		18752944169EE4A8001C1D58 /* NSFontManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875287D169EE4A8001C1D58 /* NSFontManager.h */; };
+		18752945169EE4A8001C1D58 /* NSFontPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875287E169EE4A8001C1D58 /* NSFontPanel.h */; };
+		18752946169EE4A8001C1D58 /* NSForm.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875287F169EE4A8001C1D58 /* NSForm.h */; };
+		18752947169EE4A8001C1D58 /* NSFormCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752880169EE4A8001C1D58 /* NSFormCell.h */; };
+		18752948169EE4A8001C1D58 /* NSGlyphGenerator.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752881169EE4A8001C1D58 /* NSGlyphGenerator.h */; };
+		18752949169EE4A8001C1D58 /* NSGradient.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752882169EE4A8001C1D58 /* NSGradient.h */; };
+		1875294A169EE4A8001C1D58 /* NSGraphics.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752883169EE4A8001C1D58 /* NSGraphics.h */; };
+		1875294B169EE4A8001C1D58 /* NSGraphicsContext.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752884169EE4A8001C1D58 /* NSGraphicsContext.h */; };
+		1875294C169EE4A8001C1D58 /* NSHelpManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752885169EE4A8001C1D58 /* NSHelpManager.h */; };
+		1875294D169EE4A8001C1D58 /* NSHelpPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752886169EE4A8001C1D58 /* NSHelpPanel.h */; };
+		1875294E169EE4A8001C1D58 /* NSImage.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752887169EE4A8001C1D58 /* NSImage.h */; };
+		1875294F169EE4A8001C1D58 /* NSImageCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752888169EE4A8001C1D58 /* NSImageCell.h */; };
+		18752950169EE4A8001C1D58 /* NSImageRep.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752889169EE4A8001C1D58 /* NSImageRep.h */; };
+		18752951169EE4A8001C1D58 /* NSImageView.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875288A169EE4A8001C1D58 /* NSImageView.h */; };
+		18752952169EE4A8001C1D58 /* NSInputManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875288B169EE4A8001C1D58 /* NSInputManager.h */; };
+		18752953169EE4A8001C1D58 /* NSInputServer.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875288C169EE4A8001C1D58 /* NSInputServer.h */; };
+		18752954169EE4A8001C1D58 /* NSInterfaceStyle.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875288D169EE4A8001C1D58 /* NSInterfaceStyle.h */; };
+		18752955169EE4A8001C1D58 /* NSKeyValueBinding.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875288E169EE4A8001C1D58 /* NSKeyValueBinding.h */; };
+		18752956169EE4A8001C1D58 /* NSLayoutManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875288F169EE4A8001C1D58 /* NSLayoutManager.h */; };
+		18752957169EE4A8001C1D58 /* NSLevelIndicator.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752890169EE4A8001C1D58 /* NSLevelIndicator.h */; };
+		18752958169EE4A8001C1D58 /* NSLevelIndicatorCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752891169EE4A8001C1D58 /* NSLevelIndicatorCell.h */; };
+		18752959169EE4A8001C1D58 /* NSMatrix.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752892169EE4A8001C1D58 /* NSMatrix.h */; };
+		1875295A169EE4A8001C1D58 /* NSMenu.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752893169EE4A8001C1D58 /* NSMenu.h */; };
+		1875295B169EE4A8001C1D58 /* NSMenuItem.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752894169EE4A8001C1D58 /* NSMenuItem.h */; };
+		1875295C169EE4A8001C1D58 /* NSMenuItemCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752895169EE4A8001C1D58 /* NSMenuItemCell.h */; };
+		1875295D169EE4A8001C1D58 /* NSMenuView.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752896169EE4A8001C1D58 /* NSMenuView.h */; };
+		1875295E169EE4A8001C1D58 /* NSMovie.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752897169EE4A8001C1D58 /* NSMovie.h */; };
+		1875295F169EE4A8001C1D58 /* NSMovieView.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752898169EE4A8001C1D58 /* NSMovieView.h */; };
+		18752960169EE4A8001C1D58 /* NSNib.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752899169EE4A8001C1D58 /* NSNib.h */; };
+		18752961169EE4A8001C1D58 /* NSNibConnector.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875289A169EE4A8001C1D58 /* NSNibConnector.h */; };
+		18752962169EE4A8001C1D58 /* NSNibDeclarations.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875289B169EE4A8001C1D58 /* NSNibDeclarations.h */; };
+		18752963169EE4A8001C1D58 /* NSNibLoading.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875289C169EE4A8001C1D58 /* NSNibLoading.h */; };
+		18752964169EE4A8001C1D58 /* NSObjectController.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875289D169EE4A8001C1D58 /* NSObjectController.h */; };
+		18752965169EE4A8001C1D58 /* NSOpenGL.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875289E169EE4A8001C1D58 /* NSOpenGL.h */; };
+		18752966169EE4A8001C1D58 /* NSOpenGLView.h in Headers */ = {isa = PBXBuildFile; fileRef = 1875289F169EE4A8001C1D58 /* NSOpenGLView.h */; };
+		18752967169EE4A8001C1D58 /* NSOpenPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A0169EE4A8001C1D58 /* NSOpenPanel.h */; };
+		18752968169EE4A8001C1D58 /* NSOutlineView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A1169EE4A8001C1D58 /* NSOutlineView.h */; };
+		18752969169EE4A8001C1D58 /* NSPageLayout.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A2169EE4A8001C1D58 /* NSPageLayout.h */; };
+		1875296A169EE4A8001C1D58 /* NSPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A3169EE4A8001C1D58 /* NSPanel.h */; };
+		1875296B169EE4A8001C1D58 /* NSParagraphStyle.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A4169EE4A8001C1D58 /* NSParagraphStyle.h */; };
+		1875296C169EE4A8001C1D58 /* NSPasteboard.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A5169EE4A8001C1D58 /* NSPasteboard.h */; };
+		1875296D169EE4A8001C1D58 /* NSPopUpButton.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A6169EE4A8001C1D58 /* NSPopUpButton.h */; };
+		1875296E169EE4A8001C1D58 /* NSPopUpButtonCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A7169EE4A8001C1D58 /* NSPopUpButtonCell.h */; };
+		1875296F169EE4A8001C1D58 /* NSPrintInfo.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A8169EE4A8001C1D58 /* NSPrintInfo.h */; };
+		18752970169EE4A8001C1D58 /* NSPrintOperation.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528A9169EE4A8001C1D58 /* NSPrintOperation.h */; };
+		18752971169EE4A8001C1D58 /* NSPrintPanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528AA169EE4A8001C1D58 /* NSPrintPanel.h */; };
+		18752972169EE4A8001C1D58 /* NSPrinter.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528AB169EE4A8001C1D58 /* NSPrinter.h */; };
+		18752973169EE4A8001C1D58 /* NSProgressIndicator.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528AC169EE4A8001C1D58 /* NSProgressIndicator.h */; };
+		18752974169EE4A8001C1D58 /* NSResponder.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528AD169EE4A8001C1D58 /* NSResponder.h */; };
+		18752975169EE4A8001C1D58 /* NSRulerMarker.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528AE169EE4A8001C1D58 /* NSRulerMarker.h */; };
+		18752976169EE4A8001C1D58 /* NSRulerView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528AF169EE4A8001C1D58 /* NSRulerView.h */; };
+		18752977169EE4A8001C1D58 /* NSSavePanel.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B0169EE4A8001C1D58 /* NSSavePanel.h */; };
+		18752978169EE4A8001C1D58 /* NSScreen.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B1169EE4A8001C1D58 /* NSScreen.h */; };
+		18752979169EE4A8001C1D58 /* NSScrollView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B2169EE4A8001C1D58 /* NSScrollView.h */; };
+		1875297A169EE4A8001C1D58 /* NSScroller.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B3169EE4A8001C1D58 /* NSScroller.h */; };
+		1875297B169EE4A8001C1D58 /* NSSearchField.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B4169EE4A8001C1D58 /* NSSearchField.h */; };
+		1875297C169EE4A8001C1D58 /* NSSearchFieldCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B5169EE4A8001C1D58 /* NSSearchFieldCell.h */; };
+		1875297D169EE4A8001C1D58 /* NSSecureTextField.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B6169EE4A8001C1D58 /* NSSecureTextField.h */; };
+		1875297E169EE4A8001C1D58 /* NSSegmentedCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B7169EE4A8001C1D58 /* NSSegmentedCell.h */; };
+		1875297F169EE4A8001C1D58 /* NSSegmentedControl.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B8169EE4A8001C1D58 /* NSSegmentedControl.h */; };
+		18752980169EE4A8001C1D58 /* NSSelection.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528B9169EE4A8001C1D58 /* NSSelection.h */; };
+		18752981169EE4A8001C1D58 /* NSShadow.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528BA169EE4A8001C1D58 /* NSShadow.h */; };
+		18752982169EE4A8001C1D58 /* NSSlider.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528BB169EE4A8001C1D58 /* NSSlider.h */; };
+		18752983169EE4A8001C1D58 /* NSSliderCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528BC169EE4A8001C1D58 /* NSSliderCell.h */; };
+		18752984169EE4A8001C1D58 /* NSSound.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528BD169EE4A8001C1D58 /* NSSound.h */; };
+		18752985169EE4A8001C1D58 /* NSSpeechSynthesizer.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528BE169EE4A8001C1D58 /* NSSpeechSynthesizer.h */; };
+		18752986169EE4A8001C1D58 /* NSSpellChecker.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528BF169EE4A8001C1D58 /* NSSpellChecker.h */; };
+		18752987169EE4A8001C1D58 /* NSSpellProtocol.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C0169EE4A8001C1D58 /* NSSpellProtocol.h */; };
+		18752988169EE4A8001C1D58 /* NSSpellServer.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C1169EE4A8001C1D58 /* NSSpellServer.h */; };
+		18752989169EE4A8001C1D58 /* NSSplitView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C2169EE4A8001C1D58 /* NSSplitView.h */; };
+		1875298A169EE4A8001C1D58 /* NSStepper.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C3169EE4A8001C1D58 /* NSStepper.h */; };
+		1875298B169EE4A8001C1D58 /* NSStepperCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C4169EE4A8001C1D58 /* NSStepperCell.h */; };
+		1875298C169EE4A8001C1D58 /* NSStringDrawing.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C5169EE4A8001C1D58 /* NSStringDrawing.h */; };
+		1875298D169EE4A8001C1D58 /* NSTabView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C6169EE4A8001C1D58 /* NSTabView.h */; };
+		1875298E169EE4A8001C1D58 /* NSTabViewItem.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C7169EE4A8001C1D58 /* NSTabViewItem.h */; };
+		1875298F169EE4A8001C1D58 /* NSTableColumn.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C8169EE4A8001C1D58 /* NSTableColumn.h */; };
+		18752990169EE4A8001C1D58 /* NSTableHeaderCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528C9169EE4A8001C1D58 /* NSTableHeaderCell.h */; };
+		18752991169EE4A8001C1D58 /* NSTableHeaderView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528CA169EE4A8001C1D58 /* NSTableHeaderView.h */; };
+		18752992169EE4A8001C1D58 /* NSTableView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528CB169EE4A8001C1D58 /* NSTableView.h */; };
+		18752993169EE4A8001C1D58 /* NSText.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528CC169EE4A8001C1D58 /* NSText.h */; };
+		18752994169EE4A8001C1D58 /* NSTextAttachment.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528CD169EE4A8001C1D58 /* NSTextAttachment.h */; };
+		18752995169EE4A8001C1D58 /* NSTextContainer.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528CE169EE4A8001C1D58 /* NSTextContainer.h */; };
+		18752996169EE4A8001C1D58 /* NSTextField.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528CF169EE4A8001C1D58 /* NSTextField.h */; };
+		18752997169EE4A8001C1D58 /* NSTextFieldCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D0169EE4A8001C1D58 /* NSTextFieldCell.h */; };
+		18752998169EE4A8001C1D58 /* NSTextList.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D1169EE4A8001C1D58 /* NSTextList.h */; };
+		18752999169EE4A8001C1D58 /* NSTextStorage.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D2169EE4A8001C1D58 /* NSTextStorage.h */; };
+		1875299A169EE4A8001C1D58 /* NSTextTable.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D3169EE4A8001C1D58 /* NSTextTable.h */; };
+		1875299B169EE4A8001C1D58 /* NSTextView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D4169EE4A8001C1D58 /* NSTextView.h */; };
+		1875299C169EE4A8001C1D58 /* NSTokenField.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D5169EE4A8001C1D58 /* NSTokenField.h */; };
+		1875299D169EE4A8001C1D58 /* NSTokenFieldCell.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D6169EE4A8001C1D58 /* NSTokenFieldCell.h */; };
+		1875299E169EE4A8001C1D58 /* NSToolbar.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D7169EE4A8001C1D58 /* NSToolbar.h */; };
+		1875299F169EE4A8001C1D58 /* NSToolbarItem.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D8169EE4A8001C1D58 /* NSToolbarItem.h */; };
+		187529A0169EE4A8001C1D58 /* NSToolbarItemGroup.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528D9169EE4A8001C1D58 /* NSToolbarItemGroup.h */; };
+		187529A1169EE4A8001C1D58 /* NSTreeController.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528DA169EE4A8001C1D58 /* NSTreeController.h */; };
+		187529A2169EE4A8001C1D58 /* NSTreeNode.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528DB169EE4A8001C1D58 /* NSTreeNode.h */; };
+		187529A3169EE4A8001C1D58 /* NSUserDefaultsController.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528DC169EE4A8001C1D58 /* NSUserDefaultsController.h */; };
+		187529A4169EE4A8001C1D58 /* NSUserInterfaceValidation.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528DD169EE4A8001C1D58 /* NSUserInterfaceValidation.h */; };
+		187529A5169EE4A8001C1D58 /* NSView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528DE169EE4A8001C1D58 /* NSView.h */; };
+		187529A6169EE4A8001C1D58 /* NSViewController.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528DF169EE4A8001C1D58 /* NSViewController.h */; };
+		187529A7169EE4A8001C1D58 /* NSWindow.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528E0169EE4A8001C1D58 /* NSWindow.h */; };
+		187529A8169EE4A8001C1D58 /* NSWindowController.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528E1169EE4A8001C1D58 /* NSWindowController.h */; };
+		187529A9169EE4A8001C1D58 /* NSWorkspace.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528E2169EE4A8001C1D58 /* NSWorkspace.h */; };
+		187529AA169EE4A8001C1D58 /* PSOperators.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528E3169EE4A8001C1D58 /* PSOperators.h */; };
+		187529AB169EE4A8001C1D58 /* Cocoa.h in Headers */ = {isa = PBXBuildFile; fileRef = 187528E5169EE4A8001C1D58 /* Cocoa.h */; };
+		18752A99169EE4B8001C1D58 /* Functions.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529B0169EE4B7001C1D58 /* Functions.m */; };
+		18752A9D169EE4B8001C1D58 /* GSAnimator.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529B4169EE4B7001C1D58 /* GSAnimator.m */; };
+		18752A9E169EE4B8001C1D58 /* GSBindingHelpers.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529B5169EE4B7001C1D58 /* GSBindingHelpers.h */; };
+		18752A9F169EE4B8001C1D58 /* GSCharacterPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529B6169EE4B7001C1D58 /* GSCharacterPanel.m */; };
+		18752AA0169EE4B8001C1D58 /* GSDisplayServer.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529B7169EE4B7001C1D58 /* GSDisplayServer.m */; };
+		18752AA1169EE4B8001C1D58 /* GSDragView.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529B8169EE4B7001C1D58 /* GSDragView.m */; };
+		18752AA2169EE4B8001C1D58 /* GSEPSPrintOperation.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529B9169EE4B7001C1D58 /* GSEPSPrintOperation.m */; };
+		18752AA3169EE4B8001C1D58 /* GSFastEnumeration.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529BA169EE4B7001C1D58 /* GSFastEnumeration.h */; };
+		18752AA4169EE4B8001C1D58 /* GSFontInfo.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529BB169EE4B7001C1D58 /* GSFontInfo.m */; };
+		18752AA5169EE4B8001C1D58 /* GSGModelLoader.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529BC169EE4B7001C1D58 /* GSGModelLoader.m */; };
+		18752AA6169EE4B8001C1D58 /* GSGhostscriptImageRep.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529BD169EE4B7001C1D58 /* GSGhostscriptImageRep.m */; };
+		18752AA7169EE4B8001C1D58 /* GSGormLoader.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529BE169EE4B7001C1D58 /* GSGormLoader.m */; };
+		18752AA8169EE4B8001C1D58 /* GSGormLoading.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529BF169EE4B7001C1D58 /* GSGormLoading.m */; };
+		18752AA9169EE4B8001C1D58 /* GSGuiPrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529C0169EE4B7001C1D58 /* GSGuiPrivate.h */; };
+		18752AAA169EE4B8001C1D58 /* GSHbox.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529C1169EE4B7001C1D58 /* GSHbox.m */; };
+		18752AAB169EE4B8001C1D58 /* GSHelpAttachment.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529C2169EE4B7001C1D58 /* GSHelpAttachment.m */; };
+		18752AAC169EE4B8001C1D58 /* GSHelpManagerPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529C3169EE4B7001C1D58 /* GSHelpManagerPanel.m */; };
+		18752AAD169EE4B8001C1D58 /* GSHorizontalTypesetter.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529C4169EE4B7001C1D58 /* GSHorizontalTypesetter.m */; };
+		18752AAE169EE4B8001C1D58 /* GSIconManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529C5169EE4B7001C1D58 /* GSIconManager.h */; };
+		18752AAF169EE4B8001C1D58 /* GSIconManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529C6169EE4B7001C1D58 /* GSIconManager.m */; };
+		18752AB0169EE4B8001C1D58 /* GSImageMagickImageRep.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529C7169EE4B7001C1D58 /* GSImageMagickImageRep.m */; };
+		18752AB1169EE4B8001C1D58 /* GSInfoPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529C8169EE4B7001C1D58 /* GSInfoPanel.m */; };
+		18752AB2169EE4B8001C1D58 /* GSKeyBindingAction.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529C9169EE4B7001C1D58 /* GSKeyBindingAction.h */; };
+		18752AB3169EE4B8001C1D58 /* GSKeyBindingAction.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529CA169EE4B7001C1D58 /* GSKeyBindingAction.m */; };
+		18752AB4169EE4B8001C1D58 /* GSKeyBindingTable.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529CB169EE4B7001C1D58 /* GSKeyBindingTable.h */; };
+		18752AB5169EE4B8001C1D58 /* GSKeyBindingTable.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529CC169EE4B7001C1D58 /* GSKeyBindingTable.m */; };
+		18752AB6169EE4B8001C1D58 /* GSLayoutManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529CD169EE4B7001C1D58 /* GSLayoutManager.m */; };
+		18752AB7169EE4B8001C1D58 /* GSMemoryPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529CE169EE4B7001C1D58 /* GSMemoryPanel.m */; };
+		18752AB8169EE4B8001C1D58 /* GSModelLoaderFactory.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529CF169EE4B7001C1D58 /* GSModelLoaderFactory.m */; };
+		18752AB9169EE4B8001C1D58 /* GSNibLoader.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529D0169EE4B7001C1D58 /* GSNibLoader.m */; };
+		18752ABA169EE4B8001C1D58 /* GSNibLoading.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529D1169EE4B7001C1D58 /* GSNibLoading.m */; };
+		18752ABB169EE4B8001C1D58 /* GSPDFPrintOperation.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529D2169EE4B7001C1D58 /* GSPDFPrintOperation.m */; };
+		18752ABC169EE4B8001C1D58 /* GSPrintOperation.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529D3169EE4B7001C1D58 /* GSPrintOperation.m */; };
+		18752ABD169EE4B8001C1D58 /* GSPrinting.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529D4169EE4B7001C1D58 /* GSPrinting.m */; };
+		18752ABE169EE4B8001C1D58 /* GSServicesManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529D5169EE4B7001C1D58 /* GSServicesManager.m */; };
+		18752ABF169EE4B8001C1D58 /* GSSlideView.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529D6169EE4B7001C1D58 /* GSSlideView.h */; };
+		18752AC0169EE4B8001C1D58 /* GSSlideView.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529D7169EE4B7001C1D58 /* GSSlideView.m */; };
+		18752AC1169EE4B8001C1D58 /* GSStandardWindowDecorationView.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529D8169EE4B7001C1D58 /* GSStandardWindowDecorationView.m */; };
+		18752AC2169EE4B8001C1D58 /* GSTable.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529D9169EE4B7001C1D58 /* GSTable.m */; };
+		18752AC3169EE4B8001C1D58 /* GSTextFinder.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529DA169EE4B7001C1D58 /* GSTextFinder.h */; };
+		18752AC4169EE4B8001C1D58 /* GSTextFinder.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529DB169EE4B7001C1D58 /* GSTextFinder.m */; };
+		18752AC5169EE4B8001C1D58 /* GSTextStorage.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529DC169EE4B7001C1D58 /* GSTextStorage.h */; };
+		18752AC6169EE4B8001C1D58 /* GSTextStorage.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529DD169EE4B7001C1D58 /* GSTextStorage.m */; };
+		18752AC7169EE4B8001C1D58 /* GSTheme.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529DE169EE4B7001C1D58 /* GSTheme.m */; };
+		18752AC8169EE4B8001C1D58 /* GSThemeDrawing.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529DF169EE4B7001C1D58 /* GSThemeDrawing.m */; };
+		18752AC9169EE4B8001C1D58 /* GSThemeInspector.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529E0169EE4B7001C1D58 /* GSThemeInspector.m */; };
+		18752ACA169EE4B8001C1D58 /* GSThemeMenu.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529E1169EE4B7001C1D58 /* GSThemeMenu.m */; };
+		18752ACB169EE4B8001C1D58 /* GSThemeOpenSavePanels.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529E2169EE4B7001C1D58 /* GSThemeOpenSavePanels.m */; };
+		18752ACC169EE4B8001C1D58 /* GSThemePanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529E3169EE4B7001C1D58 /* GSThemePanel.m */; };
+		18752ACD169EE4B8001C1D58 /* GSThemePrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529E4169EE4B7001C1D58 /* GSThemePrivate.h */; };
+		18752ACE169EE4B8001C1D58 /* GSThemeTools.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529E5169EE4B7001C1D58 /* GSThemeTools.m */; };
+		18752ACF169EE4B8001C1D58 /* GSTitleView.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529E6169EE4B7001C1D58 /* GSTitleView.m */; };
+		18752AD0169EE4B8001C1D58 /* GSToolTips.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529E7169EE4B7001C1D58 /* GSToolTips.h */; };
+		18752AD1169EE4B8001C1D58 /* GSToolTips.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529E8169EE4B7001C1D58 /* GSToolTips.m */; };
+		18752AD2169EE4B8001C1D58 /* GSToolbarCustomizationPalette.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529E9169EE4B7001C1D58 /* GSToolbarCustomizationPalette.h */; };
+		18752AD3169EE4B8001C1D58 /* GSToolbarCustomizationPalette.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529EA169EE4B7001C1D58 /* GSToolbarCustomizationPalette.m */; };
+		18752AD4169EE4B8001C1D58 /* GSToolbarView.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529EB169EE4B7001C1D58 /* GSToolbarView.m */; };
+		18752AD5169EE4B8001C1D58 /* GSTrackingRect.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529EC169EE4B7001C1D58 /* GSTrackingRect.m */; };
+		18752AD6169EE4B8001C1D58 /* GSTypesetter.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529ED169EE4B7001C1D58 /* GSTypesetter.m */; };
+		18752AD7169EE4B8001C1D58 /* GSVbox.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529EE169EE4B7001C1D58 /* GSVbox.m */; };
+		18752AD8169EE4B8001C1D58 /* GSWindowDecorationView.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529EF169EE4B7001C1D58 /* GSWindowDecorationView.m */; };
+		18752AD9169EE4B8001C1D58 /* GSXibLoader.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529F0169EE4B7001C1D58 /* GSXibLoader.m */; };
+		18752ADA169EE4B8001C1D58 /* GSXibLoading.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529F1169EE4B7001C1D58 /* GSXibLoading.m */; };
+		18752ADC169EE4B8001C1D58 /* NSActionCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529F3169EE4B7001C1D58 /* NSActionCell.m */; };
+		18752ADD169EE4B8001C1D58 /* NSAffineTransform.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529F4169EE4B7001C1D58 /* NSAffineTransform.m */; };
+		18752ADE169EE4B8001C1D58 /* NSAlert.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529F5169EE4B7001C1D58 /* NSAlert.m */; };
+		18752ADF169EE4B8001C1D58 /* NSAnimation.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529F6169EE4B7001C1D58 /* NSAnimation.m */; };
+		18752AE0169EE4B8001C1D58 /* NSApplication.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529F7169EE4B7001C1D58 /* NSApplication.m */; };
+		18752AE1169EE4B8001C1D58 /* NSArrayController.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529F8169EE4B7001C1D58 /* NSArrayController.m */; };
+		18752AE2169EE4B8001C1D58 /* NSAttributedString.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529F9169EE4B7001C1D58 /* NSAttributedString.m */; };
+		18752AE3169EE4B8001C1D58 /* NSBezierPath.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529FA169EE4B7001C1D58 /* NSBezierPath.m */; };
+		18752AE4169EE4B8001C1D58 /* NSBitmapImageRep+GIF.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529FB169EE4B7001C1D58 /* NSBitmapImageRep+GIF.h */; };
+		18752AE5169EE4B8001C1D58 /* NSBitmapImageRep+GIF.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529FC169EE4B7001C1D58 /* NSBitmapImageRep+GIF.m */; };
+		18752AE6169EE4B8001C1D58 /* NSBitmapImageRep+ICNS.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529FD169EE4B7001C1D58 /* NSBitmapImageRep+ICNS.h */; };
+		18752AE7169EE4B8001C1D58 /* NSBitmapImageRep+ICNS.m in Sources */ = {isa = PBXBuildFile; fileRef = 187529FE169EE4B7001C1D58 /* NSBitmapImageRep+ICNS.m */; };
+		18752AE8169EE4B8001C1D58 /* NSBitmapImageRep+JPEG.h in Headers */ = {isa = PBXBuildFile; fileRef = 187529FF169EE4B7001C1D58 /* NSBitmapImageRep+JPEG.h */; };
+		18752AE9169EE4B8001C1D58 /* NSBitmapImageRep+JPEG.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A00169EE4B7001C1D58 /* NSBitmapImageRep+JPEG.m */; };
+		18752AEA169EE4B8001C1D58 /* NSBitmapImageRep+PNG.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752A01169EE4B7001C1D58 /* NSBitmapImageRep+PNG.h */; };
+		18752AEB169EE4B8001C1D58 /* NSBitmapImageRep+PNG.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A02169EE4B7001C1D58 /* NSBitmapImageRep+PNG.m */; };
+		18752AEC169EE4B8001C1D58 /* NSBitmapImageRep+PNM.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752A03169EE4B7001C1D58 /* NSBitmapImageRep+PNM.h */; };
+		18752AED169EE4B8001C1D58 /* NSBitmapImageRep+PNM.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A04169EE4B7001C1D58 /* NSBitmapImageRep+PNM.m */; };
+		18752AEE169EE4B8001C1D58 /* NSBitmapImageRep.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A05169EE4B7001C1D58 /* NSBitmapImageRep.m */; };
+		18752AEF169EE4B8001C1D58 /* NSBox.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A06169EE4B7001C1D58 /* NSBox.m */; };
+		18752AF0169EE4B8001C1D58 /* NSBrowser.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A07169EE4B7001C1D58 /* NSBrowser.m */; };
+		18752AF1169EE4B8001C1D58 /* NSBrowserCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A08169EE4B7001C1D58 /* NSBrowserCell.m */; };
+		18752AF2169EE4B8001C1D58 /* NSBundleAdditions.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A09169EE4B7001C1D58 /* NSBundleAdditions.m */; };
+		18752AF3169EE4B8001C1D58 /* NSButton.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A0A169EE4B7001C1D58 /* NSButton.m */; };
+		18752AF4169EE4B8001C1D58 /* NSButtonCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A0B169EE4B7001C1D58 /* NSButtonCell.m */; };
+		18752AF5169EE4B8001C1D58 /* NSButtonImageSource.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752A0C169EE4B7001C1D58 /* NSButtonImageSource.h */; };
+		18752AF7169EE4B8001C1D58 /* NSCachedImageRep.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A0E169EE4B7001C1D58 /* NSCachedImageRep.m */; };
+		18752AF8169EE4B8001C1D58 /* NSCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A0F169EE4B7001C1D58 /* NSCell.m */; };
+		18752AF9169EE4B8001C1D58 /* NSClipView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A10169EE4B7001C1D58 /* NSClipView.m */; };
+		18752AFA169EE4B8001C1D58 /* NSColor.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A11169EE4B7001C1D58 /* NSColor.m */; };
+		18752AFB169EE4B8001C1D58 /* NSColorList.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A12169EE4B7001C1D58 /* NSColorList.m */; };
+		18752AFC169EE4B8001C1D58 /* NSColorPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A13169EE4B7001C1D58 /* NSColorPanel.m */; };
+		18752AFD169EE4B8001C1D58 /* NSColorPicker.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A14169EE4B7001C1D58 /* NSColorPicker.m */; };
+		18752AFE169EE4B8001C1D58 /* NSColorSpace.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A15169EE4B7001C1D58 /* NSColorSpace.m */; };
+		18752AFF169EE4B8001C1D58 /* NSColorWell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A16169EE4B7001C1D58 /* NSColorWell.m */; };
+		18752B00169EE4B8001C1D58 /* NSComboBox.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A17169EE4B7001C1D58 /* NSComboBox.m */; };
+		18752B01169EE4B8001C1D58 /* NSComboBoxCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A18169EE4B7001C1D58 /* NSComboBoxCell.m */; };
+		18752B02169EE4B8001C1D58 /* NSControl.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A19169EE4B7001C1D58 /* NSControl.m */; };
+		18752B03169EE4B8001C1D58 /* NSController.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A1A169EE4B7001C1D58 /* NSController.m */; };
+		18752B04169EE4B8001C1D58 /* NSCursor.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A1B169EE4B7001C1D58 /* NSCursor.m */; };
+		18752B05169EE4B8001C1D58 /* NSCustomImageRep.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A1C169EE4B7001C1D58 /* NSCustomImageRep.m */; };
+		18752B06169EE4B8001C1D58 /* NSDataLink.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A1D169EE4B7001C1D58 /* NSDataLink.m */; };
+		18752B07169EE4B8001C1D58 /* NSDataLinkManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A1E169EE4B7001C1D58 /* NSDataLinkManager.m */; };
+		18752B08169EE4B8001C1D58 /* NSDataLinkPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A1F169EE4B7001C1D58 /* NSDataLinkPanel.m */; };
+		18752B09169EE4B8001C1D58 /* NSDocument.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A20169EE4B7001C1D58 /* NSDocument.m */; };
+		18752B0A169EE4B8001C1D58 /* NSDocumentController.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A21169EE4B7001C1D58 /* NSDocumentController.m */; };
+		18752B0B169EE4B8001C1D58 /* NSDocumentFrameworkPrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752A22169EE4B7001C1D58 /* NSDocumentFrameworkPrivate.h */; };
+		18752B0C169EE4B8001C1D58 /* NSDrawer.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A23169EE4B7001C1D58 /* NSDrawer.m */; };
+		18752B0D169EE4B8001C1D58 /* NSEPSImageRep.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A24169EE4B7001C1D58 /* NSEPSImageRep.m */; };
+		18752B0E169EE4B8001C1D58 /* NSEvent.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A25169EE4B7001C1D58 /* NSEvent.m */; };
+		18752B0F169EE4B8001C1D58 /* NSFileWrapper.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A26169EE4B7001C1D58 /* NSFileWrapper.m */; };
+		18752B10169EE4B8001C1D58 /* NSFont.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A27169EE4B7001C1D58 /* NSFont.m */; };
+		18752B11169EE4B8001C1D58 /* NSFontDescriptor.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A28169EE4B7001C1D58 /* NSFontDescriptor.m */; };
+		18752B12169EE4B8001C1D58 /* NSFontManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A29169EE4B7001C1D58 /* NSFontManager.m */; };
+		18752B13169EE4B8001C1D58 /* NSFontPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A2A169EE4B7001C1D58 /* NSFontPanel.m */; };
+		18752B14169EE4B8001C1D58 /* NSForm.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A2B169EE4B7001C1D58 /* NSForm.m */; };
+		18752B15169EE4B8001C1D58 /* NSFormCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A2C169EE4B7001C1D58 /* NSFormCell.m */; };
+		18752B16169EE4B8001C1D58 /* NSGlyphGenerator.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A2D169EE4B7001C1D58 /* NSGlyphGenerator.m */; };
+		18752B17169EE4B8001C1D58 /* NSGradient.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A2E169EE4B7001C1D58 /* NSGradient.m */; };
+		18752B18169EE4B8001C1D58 /* NSGraphicsContext.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A2F169EE4B7001C1D58 /* NSGraphicsContext.m */; };
+		18752B19169EE4B8001C1D58 /* NSHelpManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A30169EE4B7001C1D58 /* NSHelpManager.m */; };
+		18752B1A169EE4B8001C1D58 /* NSHelpPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A31169EE4B7001C1D58 /* NSHelpPanel.m */; };
+		18752B1B169EE4B8001C1D58 /* NSImage.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A32169EE4B7001C1D58 /* NSImage.m */; };
+		18752B1C169EE4B8001C1D58 /* NSImageCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A33169EE4B7001C1D58 /* NSImageCell.m */; };
+		18752B1D169EE4B8001C1D58 /* NSImageRep.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A34169EE4B7001C1D58 /* NSImageRep.m */; };
+		18752B1E169EE4B8001C1D58 /* NSImageView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A35169EE4B7001C1D58 /* NSImageView.m */; };
+		18752B1F169EE4B8001C1D58 /* NSInputManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A36169EE4B7001C1D58 /* NSInputManager.m */; };
+		18752B20169EE4B8001C1D58 /* NSInputServer.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A37169EE4B7001C1D58 /* NSInputServer.m */; };
+		18752B21169EE4B8001C1D58 /* NSInterfaceStyle.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A38169EE4B7001C1D58 /* NSInterfaceStyle.m */; };
+		18752B22169EE4B8001C1D58 /* NSKeyValueBinding.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A39169EE4B7001C1D58 /* NSKeyValueBinding.m */; };
+		18752B23169EE4B8001C1D58 /* NSLayoutManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A3A169EE4B7001C1D58 /* NSLayoutManager.m */; };
+		18752B24169EE4B8001C1D58 /* NSLevelIndicator.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A3B169EE4B7001C1D58 /* NSLevelIndicator.m */; };
+		18752B25169EE4B8001C1D58 /* NSLevelIndicatorCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A3C169EE4B7001C1D58 /* NSLevelIndicatorCell.m */; };
+		18752B26169EE4B8001C1D58 /* NSMatrix.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A3D169EE4B7001C1D58 /* NSMatrix.m */; };
+		18752B27169EE4B8001C1D58 /* NSMenu.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A3E169EE4B7001C1D58 /* NSMenu.m */; };
+		18752B28169EE4B8001C1D58 /* NSMenuItem.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A3F169EE4B7001C1D58 /* NSMenuItem.m */; };
+		18752B29169EE4B8001C1D58 /* NSMenuItemCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A40169EE4B7001C1D58 /* NSMenuItemCell.m */; };
+		18752B2A169EE4B8001C1D58 /* NSMenuView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A41169EE4B7001C1D58 /* NSMenuView.m */; };
+		18752B2B169EE4B8001C1D58 /* NSMovie.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A42169EE4B7001C1D58 /* NSMovie.m */; };
+		18752B2C169EE4B8001C1D58 /* NSMovieView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A43169EE4B7001C1D58 /* NSMovieView.m */; };
+		18752B2D169EE4B8001C1D58 /* NSNib.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A44169EE4B7001C1D58 /* NSNib.m */; };
+		18752B2E169EE4B8001C1D58 /* NSNibAXAttributeConnector.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A45169EE4B7001C1D58 /* NSNibAXAttributeConnector.m */; };
+		18752B2F169EE4B8001C1D58 /* NSNibAXRelationshipConnector.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A46169EE4B7001C1D58 /* NSNibAXRelationshipConnector.m */; };
+		18752B30169EE4B8001C1D58 /* NSNibBindingConnector.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A47169EE4B7001C1D58 /* NSNibBindingConnector.m */; };
+		18752B31169EE4B8001C1D58 /* NSObjectController.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A48169EE4B7001C1D58 /* NSObjectController.m */; };
+		18752B32169EE4B8001C1D58 /* NSOpenGLContext.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A49169EE4B7001C1D58 /* NSOpenGLContext.m */; };
+		18752B33169EE4B8001C1D58 /* NSOpenGLPixelFormat.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A4A169EE4B7001C1D58 /* NSOpenGLPixelFormat.m */; };
+		18752B34169EE4B8001C1D58 /* NSOpenGLView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A4B169EE4B7001C1D58 /* NSOpenGLView.m */; };
+		18752B35169EE4B8001C1D58 /* NSOpenPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A4C169EE4B7001C1D58 /* NSOpenPanel.m */; };
+		18752B36169EE4B8001C1D58 /* NSOutlineView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A4D169EE4B7001C1D58 /* NSOutlineView.m */; };
+		18752B37169EE4B8001C1D58 /* NSPageLayout.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A4E169EE4B7001C1D58 /* NSPageLayout.m */; };
+		18752B38169EE4B8001C1D58 /* NSPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A4F169EE4B7001C1D58 /* NSPanel.m */; };
+		18752B39169EE4B8001C1D58 /* NSParagraphStyle.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A50169EE4B7001C1D58 /* NSParagraphStyle.m */; };
+		18752B3A169EE4B8001C1D58 /* NSPasteboard.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A51169EE4B7001C1D58 /* NSPasteboard.m */; };
+		18752B3B169EE4B8001C1D58 /* NSPopUpButton.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A52169EE4B7001C1D58 /* NSPopUpButton.m */; };
+		18752B3C169EE4B8001C1D58 /* NSPopUpButtonCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A53169EE4B7001C1D58 /* NSPopUpButtonCell.m */; };
+		18752B3D169EE4B8001C1D58 /* NSPrintInfo.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A54169EE4B7001C1D58 /* NSPrintInfo.m */; };
+		18752B3E169EE4B8001C1D58 /* NSPrintOperation.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A55169EE4B7001C1D58 /* NSPrintOperation.m */; };
+		18752B3F169EE4B8001C1D58 /* NSPrintPanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A56169EE4B7001C1D58 /* NSPrintPanel.m */; };
+		18752B40169EE4B8001C1D58 /* NSPrinter.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A57169EE4B7001C1D58 /* NSPrinter.m */; };
+		18752B41169EE4B8001C1D58 /* NSProgressIndicator.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A58169EE4B7001C1D58 /* NSProgressIndicator.m */; };
+		18752B42169EE4B8001C1D58 /* NSResponder.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A59169EE4B7001C1D58 /* NSResponder.m */; };
+		18752B43169EE4B8001C1D58 /* NSRulerMarker.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A5A169EE4B7001C1D58 /* NSRulerMarker.m */; };
+		18752B44169EE4B8001C1D58 /* NSRulerView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A5B169EE4B7001C1D58 /* NSRulerView.m */; };
+		18752B45169EE4B8001C1D58 /* NSSavePanel.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A5C169EE4B7001C1D58 /* NSSavePanel.m */; };
+		18752B46169EE4B8001C1D58 /* NSScreen.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A5D169EE4B7001C1D58 /* NSScreen.m */; };
+		18752B47169EE4B8001C1D58 /* NSScrollView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A5E169EE4B7001C1D58 /* NSScrollView.m */; };
+		18752B48169EE4B8001C1D58 /* NSScroller.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A5F169EE4B7001C1D58 /* NSScroller.m */; };
+		18752B49169EE4B8001C1D58 /* NSSearchField.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A60169EE4B7001C1D58 /* NSSearchField.m */; };
+		18752B4A169EE4B8001C1D58 /* NSSearchFieldCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A61169EE4B7001C1D58 /* NSSearchFieldCell.m */; };
+		18752B4B169EE4B8001C1D58 /* NSSecureTextField.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A62169EE4B7001C1D58 /* NSSecureTextField.m */; };
+		18752B4C169EE4B8001C1D58 /* NSSegmentedCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A63169EE4B7001C1D58 /* NSSegmentedCell.m */; };
+		18752B4D169EE4B8001C1D58 /* NSSegmentedControl.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A64169EE4B7001C1D58 /* NSSegmentedControl.m */; };
+		18752B4E169EE4B8001C1D58 /* NSSelection.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A65169EE4B7001C1D58 /* NSSelection.m */; };
+		18752B4F169EE4B8001C1D58 /* NSShadow.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A66169EE4B7001C1D58 /* NSShadow.m */; };
+		18752B50169EE4B8001C1D58 /* NSSlider.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A67169EE4B7001C1D58 /* NSSlider.m */; };
+		18752B51169EE4B8001C1D58 /* NSSliderCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A68169EE4B7001C1D58 /* NSSliderCell.m */; };
+		18752B52169EE4B8001C1D58 /* NSSound.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A69169EE4B7001C1D58 /* NSSound.m */; };
+		18752B53169EE4B8001C1D58 /* NSSpeechSynthesizer.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A6A169EE4B7001C1D58 /* NSSpeechSynthesizer.m */; };
+		18752B54169EE4B8001C1D58 /* NSSpellChecker.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A6B169EE4B7001C1D58 /* NSSpellChecker.m */; };
+		18752B55169EE4B8001C1D58 /* NSSplitView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A6C169EE4B7001C1D58 /* NSSplitView.m */; };
+		18752B56169EE4B8001C1D58 /* NSStepper.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A6D169EE4B7001C1D58 /* NSStepper.m */; };
+		18752B57169EE4B8001C1D58 /* NSStepperCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A6E169EE4B7001C1D58 /* NSStepperCell.m */; };
+		18752B58169EE4B8001C1D58 /* NSStringDrawing.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A6F169EE4B7001C1D58 /* NSStringDrawing.m */; };
+		18752B59169EE4B8001C1D58 /* NSTabView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A70169EE4B8001C1D58 /* NSTabView.m */; };
+		18752B5A169EE4B8001C1D58 /* NSTabViewItem.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A71169EE4B8001C1D58 /* NSTabViewItem.m */; };
+		18752B5B169EE4B8001C1D58 /* NSTableColumn.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A72169EE4B8001C1D58 /* NSTableColumn.m */; };
+		18752B5C169EE4B8001C1D58 /* NSTableHeaderCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A73169EE4B8001C1D58 /* NSTableHeaderCell.m */; };
+		18752B5D169EE4B8001C1D58 /* NSTableHeaderView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A74169EE4B8001C1D58 /* NSTableHeaderView.m */; };
+		18752B5E169EE4B8001C1D58 /* NSTableView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A75169EE4B8001C1D58 /* NSTableView.m */; };
+		18752B5F169EE4B8001C1D58 /* NSText.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A76169EE4B8001C1D58 /* NSText.m */; };
+		18752B60169EE4B8001C1D58 /* NSTextAttachment.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A77169EE4B8001C1D58 /* NSTextAttachment.m */; };
+		18752B61169EE4B8001C1D58 /* NSTextBlock.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A78169EE4B8001C1D58 /* NSTextBlock.m */; };
+		18752B62169EE4B8001C1D58 /* NSTextContainer.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A79169EE4B8001C1D58 /* NSTextContainer.m */; };
+		18752B63169EE4B8001C1D58 /* NSTextField.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A7A169EE4B8001C1D58 /* NSTextField.m */; };
+		18752B64169EE4B8001C1D58 /* NSTextFieldCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A7B169EE4B8001C1D58 /* NSTextFieldCell.m */; };
+		18752B65169EE4B8001C1D58 /* NSTextList.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A7C169EE4B8001C1D58 /* NSTextList.m */; };
+		18752B66169EE4B8001C1D58 /* NSTextStorage.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A7D169EE4B8001C1D58 /* NSTextStorage.m */; };
+		18752B67169EE4B8001C1D58 /* NSTextTable.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A7E169EE4B8001C1D58 /* NSTextTable.m */; };
+		18752B68169EE4B8001C1D58 /* NSTextTableBlock.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A7F169EE4B8001C1D58 /* NSTextTableBlock.m */; };
+		18752B69169EE4B8001C1D58 /* NSTextView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A80169EE4B8001C1D58 /* NSTextView.m */; };
+		18752B6A169EE4B8001C1D58 /* NSTextView_actions.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A81169EE4B8001C1D58 /* NSTextView_actions.m */; };
+		18752B6B169EE4B8001C1D58 /* NSTokenField.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A82169EE4B8001C1D58 /* NSTokenField.m */; };
+		18752B6C169EE4B8001C1D58 /* NSTokenFieldCell.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A83169EE4B8001C1D58 /* NSTokenFieldCell.m */; };
+		18752B6D169EE4B8001C1D58 /* NSToolbar.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A84169EE4B8001C1D58 /* NSToolbar.m */; };
+		18752B6E169EE4B8001C1D58 /* NSToolbarFrameworkPrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752A85169EE4B8001C1D58 /* NSToolbarFrameworkPrivate.h */; };
+		18752B6F169EE4B8001C1D58 /* NSToolbarItem.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A86169EE4B8001C1D58 /* NSToolbarItem.m */; };
+		18752B70169EE4B8001C1D58 /* NSToolbarItemGroup.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A87169EE4B8001C1D58 /* NSToolbarItemGroup.m */; };
+		18752B71169EE4B8001C1D58 /* NSTreeController.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A88169EE4B8001C1D58 /* NSTreeController.m */; };
+		18752B72169EE4B8001C1D58 /* NSUserDefaultsController.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A89169EE4B8001C1D58 /* NSUserDefaultsController.m */; };
+		18752B73169EE4B8001C1D58 /* NSView.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A8A169EE4B8001C1D58 /* NSView.m */; };
+		18752B74169EE4B8001C1D58 /* NSViewController.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A8B169EE4B8001C1D58 /* NSViewController.m */; };
+		18752B75169EE4B8001C1D58 /* NSViewPrivate.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752A8C169EE4B8001C1D58 /* NSViewPrivate.h */; };
+		18752B76169EE4B8001C1D58 /* NSWindow.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A8D169EE4B8001C1D58 /* NSWindow.m */; };
+		18752B77169EE4B8001C1D58 /* NSWindowController.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A8E169EE4B8001C1D58 /* NSWindowController.m */; };
+		18752B78169EE4B8001C1D58 /* NSWorkspace.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A8F169EE4B8001C1D58 /* NSWorkspace.m */; };
+		18752B79169EE4B8001C1D58 /* externs.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A90169EE4B8001C1D58 /* externs.m */; };
+		18752B7A169EE4B8001C1D58 /* linking.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A91169EE4B8001C1D58 /* linking.m */; };
+		18752B7B169EE4B8001C1D58 /* nsimage-tiff.h in Headers */ = {isa = PBXBuildFile; fileRef = 18752A92169EE4B8001C1D58 /* nsimage-tiff.h */; };
+		18752B7C169EE4B8001C1D58 /* tiff.m in Sources */ = {isa = PBXBuildFile; fileRef = 18752A93169EE4B8001C1D58 /* tiff.m */; };
+		18752B80169EEABF001C1D58 /* libobjc.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 18752B7F169EEABF001C1D58 /* libobjc.dylib */; };
+		18752B84169EEAF4001C1D58 /* libgnustep-base.1.24.2.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 18752B83169EEAF4001C1D58 /* libgnustep-base.1.24.2.dylib */; };
+		18752B90169EEC24001C1D58 /* libicuuc.48.1.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 18752B8F169EEC24001C1D58 /* libicuuc.48.1.dylib */; };
+		18752B92169EEC3F001C1D58 /* libtiff.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 18752B91169EEC3F001C1D58 /* libtiff.dylib */; };
+		18752B94169EEC56001C1D58 /* libjpeg.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 18752B93169EEC56001C1D58 /* libjpeg.dylib */; };
+		18752B96169EEC61001C1D58 /* libpng.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 18752B95169EEC61001C1D58 /* libpng.dylib */; };
+		18752B97169EEC7C001C1D58 /* libgif.4.dylib in Frameworks */ = {isa = PBXBuildFile; fileRef = 18752B8D169EEBC3001C1D58 /* libgif.4.dylib */; };
+		18A18B1E16FF94F4009E43B0 /* AppKit-Prefix.pch in Headers */ = {isa = PBXBuildFile; fileRef = 18A18B1C16FF94F4009E43B0 /* AppKit-Prefix.pch */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXFileReference section */
+		187527F5169ED7BA001C1D58 /* AppKit.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = AppKit.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		187527F8169ED7BA001C1D58 /* Cocoa.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Cocoa.framework; path = System/Library/Frameworks/Cocoa.framework; sourceTree = SDKROOT; };
+		187527FB169ED7BA001C1D58 /* AppKit.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = AppKit.framework; path = System/Library/Frameworks/AppKit.framework; sourceTree = SDKROOT; };
+		187527FC169ED7BA001C1D58 /* CoreData.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = CoreData.framework; path = System/Library/Frameworks/CoreData.framework; sourceTree = SDKROOT; };
+		187527FD169ED7BA001C1D58 /* Foundation.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Foundation.framework; path = System/Library/Frameworks/Foundation.framework; sourceTree = SDKROOT; };
+		1875281E169EE4A8001C1D58 /* .cvsignore */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = .cvsignore; sourceTree = "<group>"; };
+		1875281F169EE4A8001C1D58 /* GMAppKit.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GMAppKit.h; sourceTree = "<group>"; };
+		18752820169EE4A8001C1D58 /* GMArchiver.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GMArchiver.h; sourceTree = "<group>"; };
+		18752821169EE4A8001C1D58 /* GSAnimator.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSAnimator.h; sourceTree = "<group>"; };
+		18752822169EE4A8001C1D58 /* GSCharacterPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSCharacterPanel.h; sourceTree = "<group>"; };
+		18752823169EE4A8001C1D58 /* GSDisplayServer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSDisplayServer.h; sourceTree = "<group>"; };
+		18752824169EE4A8001C1D58 /* GSDragView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSDragView.h; sourceTree = "<group>"; };
+		18752825169EE4A8001C1D58 /* GSEPSPrintOperation.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSEPSPrintOperation.h; sourceTree = "<group>"; };
+		18752826169EE4A8001C1D58 /* GSFontInfo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSFontInfo.h; sourceTree = "<group>"; };
+		18752827169EE4A8001C1D58 /* GSGhostscriptImageRep.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSGhostscriptImageRep.h; sourceTree = "<group>"; };
+		18752828169EE4A8001C1D58 /* GSGormLoading.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSGormLoading.h; sourceTree = "<group>"; };
+		18752829169EE4A8001C1D58 /* GSHbox.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSHbox.h; sourceTree = "<group>"; };
+		1875282A169EE4A8001C1D58 /* GSHelpAttachment.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSHelpAttachment.h; sourceTree = "<group>"; };
+		1875282B169EE4A8001C1D58 /* GSHelpManagerPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSHelpManagerPanel.h; sourceTree = "<group>"; };
+		1875282C169EE4A8001C1D58 /* GSHorizontalTypesetter.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSHorizontalTypesetter.h; sourceTree = "<group>"; };
+		1875282D169EE4A8001C1D58 /* GSImageMagickImageRep.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSImageMagickImageRep.h; sourceTree = "<group>"; };
+		1875282E169EE4A8001C1D58 /* GSInfoPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSInfoPanel.h; sourceTree = "<group>"; };
+		1875282F169EE4A8001C1D58 /* GSInstantiator.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSInstantiator.h; sourceTree = "<group>"; };
+		18752830169EE4A8001C1D58 /* GSLayoutManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSLayoutManager.h; sourceTree = "<group>"; };
+		18752831169EE4A8001C1D58 /* GSLayoutManager_internal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSLayoutManager_internal.h; sourceTree = "<group>"; };
+		18752832169EE4A8001C1D58 /* GSMemoryPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSMemoryPanel.h; sourceTree = "<group>"; };
+		18752833169EE4A8001C1D58 /* GSMethodTable.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSMethodTable.h; sourceTree = "<group>"; };
+		18752834169EE4A8001C1D58 /* GSModelLoaderFactory.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSModelLoaderFactory.h; sourceTree = "<group>"; };
+		18752835169EE4A8001C1D58 /* GSNibContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSNibContainer.h; sourceTree = "<group>"; };
+		18752836169EE4A8001C1D58 /* GSNibLoading.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSNibLoading.h; sourceTree = "<group>"; };
+		18752837169EE4A8001C1D58 /* GSPDFPrintOperation.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSPDFPrintOperation.h; sourceTree = "<group>"; };
+		18752838169EE4A8001C1D58 /* GSPasteboardServer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSPasteboardServer.h; sourceTree = "<group>"; };
+		18752839169EE4A8001C1D58 /* GSPrintOperation.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSPrintOperation.h; sourceTree = "<group>"; };
+		1875283A169EE4A8001C1D58 /* GSPrinting.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSPrinting.h; sourceTree = "<group>"; };
+		1875283B169EE4A8001C1D58 /* GSServicesManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSServicesManager.h; sourceTree = "<group>"; };
+		1875283C169EE4A8001C1D58 /* GSSoundSink.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSSoundSink.h; sourceTree = "<group>"; };
+		1875283D169EE4A8001C1D58 /* GSSoundSource.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSSoundSource.h; sourceTree = "<group>"; };
+		1875283E169EE4A8001C1D58 /* GSTable.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSTable.h; sourceTree = "<group>"; };
+		1875283F169EE4A8001C1D58 /* GSTextConverter.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSTextConverter.h; sourceTree = "<group>"; };
+		18752840169EE4A8001C1D58 /* GSTheme.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSTheme.h; sourceTree = "<group>"; };
+		18752841169EE4A8001C1D58 /* GSTitleView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSTitleView.h; sourceTree = "<group>"; };
+		18752842169EE4A8001C1D58 /* GSToolbarView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSToolbarView.h; sourceTree = "<group>"; };
+		18752843169EE4A8001C1D58 /* GSTrackingRect.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSTrackingRect.h; sourceTree = "<group>"; };
+		18752844169EE4A8001C1D58 /* GSTypesetter.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSTypesetter.h; sourceTree = "<group>"; };
+		18752845169EE4A8001C1D58 /* GSVbox.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSVbox.h; sourceTree = "<group>"; };
+		18752846169EE4A8001C1D58 /* GSVersion.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSVersion.h; sourceTree = "<group>"; };
+		18752847169EE4A8001C1D58 /* GSVersion.h.in */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = GSVersion.h.in; sourceTree = "<group>"; };
+		18752848169EE4A8001C1D58 /* GSWindowDecorationView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSWindowDecorationView.h; sourceTree = "<group>"; };
+		18752849169EE4A8001C1D58 /* GSXibLoading.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSXibLoading.h; sourceTree = "<group>"; };
+		1875284A169EE4A8001C1D58 /* IMConnectors.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = IMConnectors.h; sourceTree = "<group>"; };
+		1875284B169EE4A8001C1D58 /* IMCustomObject.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = IMCustomObject.h; sourceTree = "<group>"; };
+		1875284C169EE4A8001C1D58 /* IMLoading.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = IMLoading.h; sourceTree = "<group>"; };
+		1875284D169EE4A8001C1D58 /* config.h.in */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = config.h.in; sourceTree = "<group>"; };
+		1875284F169EE4A8001C1D58 /* AppKit.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AppKit.h; sourceTree = "<group>"; };
+		18752850169EE4A8001C1D58 /* AppKitDefines.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AppKitDefines.h; sourceTree = "<group>"; };
+		18752851169EE4A8001C1D58 /* AppKitExceptions.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = AppKitExceptions.h; sourceTree = "<group>"; };
+		18752852169EE4A8001C1D58 /* DPSOperators.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DPSOperators.h; sourceTree = "<group>"; };
+		18752853169EE4A8001C1D58 /* NSActionCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSActionCell.h; sourceTree = "<group>"; };
+		18752854169EE4A8001C1D58 /* NSAffineTransform.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSAffineTransform.h; sourceTree = "<group>"; };
+		18752855169EE4A8001C1D58 /* NSAlert.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSAlert.h; sourceTree = "<group>"; };
+		18752856169EE4A8001C1D58 /* NSAnimation.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSAnimation.h; sourceTree = "<group>"; };
+		18752857169EE4A8001C1D58 /* NSApplication.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSApplication.h; sourceTree = "<group>"; };
+		18752858169EE4A8001C1D58 /* NSArrayController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSArrayController.h; sourceTree = "<group>"; };
+		18752859169EE4A8001C1D58 /* NSAttributedString.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSAttributedString.h; sourceTree = "<group>"; };
+		1875285A169EE4A8001C1D58 /* NSBezierPath.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSBezierPath.h; sourceTree = "<group>"; };
+		1875285B169EE4A8001C1D58 /* NSBitmapImageRep.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSBitmapImageRep.h; sourceTree = "<group>"; };
+		1875285C169EE4A8001C1D58 /* NSBox.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSBox.h; sourceTree = "<group>"; };
+		1875285D169EE4A8001C1D58 /* NSBrowser.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSBrowser.h; sourceTree = "<group>"; };
+		1875285E169EE4A8001C1D58 /* NSBrowserCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSBrowserCell.h; sourceTree = "<group>"; };
+		1875285F169EE4A8001C1D58 /* NSButton.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSButton.h; sourceTree = "<group>"; };
+		18752860169EE4A8001C1D58 /* NSButtonCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSButtonCell.h; sourceTree = "<group>"; };
+		18752861169EE4A8001C1D58 /* NSCachedImageRep.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSCachedImageRep.h; sourceTree = "<group>"; };
+		18752862169EE4A8001C1D58 /* NSCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSCell.h; sourceTree = "<group>"; };
+		18752863169EE4A8001C1D58 /* NSClipView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSClipView.h; sourceTree = "<group>"; };
+		18752864169EE4A8001C1D58 /* NSColor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSColor.h; sourceTree = "<group>"; };
+		18752865169EE4A8001C1D58 /* NSColorList.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSColorList.h; sourceTree = "<group>"; };
+		18752866169EE4A8001C1D58 /* NSColorPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSColorPanel.h; sourceTree = "<group>"; };
+		18752867169EE4A8001C1D58 /* NSColorPicker.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSColorPicker.h; sourceTree = "<group>"; };
+		18752868169EE4A8001C1D58 /* NSColorPicking.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSColorPicking.h; sourceTree = "<group>"; };
+		18752869169EE4A8001C1D58 /* NSColorSpace.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSColorSpace.h; sourceTree = "<group>"; };
+		1875286A169EE4A8001C1D58 /* NSColorWell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSColorWell.h; sourceTree = "<group>"; };
+		1875286B169EE4A8001C1D58 /* NSComboBox.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSComboBox.h; sourceTree = "<group>"; };
+		1875286C169EE4A8001C1D58 /* NSComboBoxCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSComboBoxCell.h; sourceTree = "<group>"; };
+		1875286D169EE4A8001C1D58 /* NSControl.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSControl.h; sourceTree = "<group>"; };
+		1875286E169EE4A8001C1D58 /* NSController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSController.h; sourceTree = "<group>"; };
+		1875286F169EE4A8001C1D58 /* NSCursor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSCursor.h; sourceTree = "<group>"; };
+		18752870169EE4A8001C1D58 /* NSCustomImageRep.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSCustomImageRep.h; sourceTree = "<group>"; };
+		18752871169EE4A8001C1D58 /* NSDataLink.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSDataLink.h; sourceTree = "<group>"; };
+		18752872169EE4A8001C1D58 /* NSDataLinkManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSDataLinkManager.h; sourceTree = "<group>"; };
+		18752873169EE4A8001C1D58 /* NSDataLinkPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSDataLinkPanel.h; sourceTree = "<group>"; };
+		18752874169EE4A8001C1D58 /* NSDocument.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSDocument.h; sourceTree = "<group>"; };
+		18752875169EE4A8001C1D58 /* NSDocumentController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSDocumentController.h; sourceTree = "<group>"; };
+		18752876169EE4A8001C1D58 /* NSDragging.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSDragging.h; sourceTree = "<group>"; };
+		18752877169EE4A8001C1D58 /* NSDrawer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSDrawer.h; sourceTree = "<group>"; };
+		18752878169EE4A8001C1D58 /* NSEPSImageRep.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSEPSImageRep.h; sourceTree = "<group>"; };
+		18752879169EE4A8001C1D58 /* NSEvent.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSEvent.h; sourceTree = "<group>"; };
+		1875287A169EE4A8001C1D58 /* NSFileWrapper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSFileWrapper.h; sourceTree = "<group>"; };
+		1875287B169EE4A8001C1D58 /* NSFont.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSFont.h; sourceTree = "<group>"; };
+		1875287C169EE4A8001C1D58 /* NSFontDescriptor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSFontDescriptor.h; sourceTree = "<group>"; };
+		1875287D169EE4A8001C1D58 /* NSFontManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSFontManager.h; sourceTree = "<group>"; };
+		1875287E169EE4A8001C1D58 /* NSFontPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSFontPanel.h; sourceTree = "<group>"; };
+		1875287F169EE4A8001C1D58 /* NSForm.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSForm.h; sourceTree = "<group>"; };
+		18752880169EE4A8001C1D58 /* NSFormCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSFormCell.h; sourceTree = "<group>"; };
+		18752881169EE4A8001C1D58 /* NSGlyphGenerator.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSGlyphGenerator.h; sourceTree = "<group>"; };
+		18752882169EE4A8001C1D58 /* NSGradient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSGradient.h; sourceTree = "<group>"; };
+		18752883169EE4A8001C1D58 /* NSGraphics.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSGraphics.h; sourceTree = "<group>"; };
+		18752884169EE4A8001C1D58 /* NSGraphicsContext.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSGraphicsContext.h; sourceTree = "<group>"; };
+		18752885169EE4A8001C1D58 /* NSHelpManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSHelpManager.h; sourceTree = "<group>"; };
+		18752886169EE4A8001C1D58 /* NSHelpPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSHelpPanel.h; sourceTree = "<group>"; };
+		18752887169EE4A8001C1D58 /* NSImage.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSImage.h; sourceTree = "<group>"; };
+		18752888169EE4A8001C1D58 /* NSImageCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSImageCell.h; sourceTree = "<group>"; };
+		18752889169EE4A8001C1D58 /* NSImageRep.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSImageRep.h; sourceTree = "<group>"; };
+		1875288A169EE4A8001C1D58 /* NSImageView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSImageView.h; sourceTree = "<group>"; };
+		1875288B169EE4A8001C1D58 /* NSInputManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSInputManager.h; sourceTree = "<group>"; };
+		1875288C169EE4A8001C1D58 /* NSInputServer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSInputServer.h; sourceTree = "<group>"; };
+		1875288D169EE4A8001C1D58 /* NSInterfaceStyle.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSInterfaceStyle.h; sourceTree = "<group>"; };
+		1875288E169EE4A8001C1D58 /* NSKeyValueBinding.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSKeyValueBinding.h; sourceTree = "<group>"; };
+		1875288F169EE4A8001C1D58 /* NSLayoutManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSLayoutManager.h; sourceTree = "<group>"; };
+		18752890169EE4A8001C1D58 /* NSLevelIndicator.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSLevelIndicator.h; sourceTree = "<group>"; };
+		18752891169EE4A8001C1D58 /* NSLevelIndicatorCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSLevelIndicatorCell.h; sourceTree = "<group>"; };
+		18752892169EE4A8001C1D58 /* NSMatrix.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSMatrix.h; sourceTree = "<group>"; };
+		18752893169EE4A8001C1D58 /* NSMenu.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSMenu.h; sourceTree = "<group>"; };
+		18752894169EE4A8001C1D58 /* NSMenuItem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSMenuItem.h; sourceTree = "<group>"; };
+		18752895169EE4A8001C1D58 /* NSMenuItemCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSMenuItemCell.h; sourceTree = "<group>"; };
+		18752896169EE4A8001C1D58 /* NSMenuView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSMenuView.h; sourceTree = "<group>"; };
+		18752897169EE4A8001C1D58 /* NSMovie.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSMovie.h; sourceTree = "<group>"; };
+		18752898169EE4A8001C1D58 /* NSMovieView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSMovieView.h; sourceTree = "<group>"; };
+		18752899169EE4A8001C1D58 /* NSNib.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSNib.h; sourceTree = "<group>"; };
+		1875289A169EE4A8001C1D58 /* NSNibConnector.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSNibConnector.h; sourceTree = "<group>"; };
+		1875289B169EE4A8001C1D58 /* NSNibDeclarations.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSNibDeclarations.h; sourceTree = "<group>"; };
+		1875289C169EE4A8001C1D58 /* NSNibLoading.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSNibLoading.h; sourceTree = "<group>"; };
+		1875289D169EE4A8001C1D58 /* NSObjectController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSObjectController.h; sourceTree = "<group>"; };
+		1875289E169EE4A8001C1D58 /* NSOpenGL.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSOpenGL.h; sourceTree = "<group>"; };
+		1875289F169EE4A8001C1D58 /* NSOpenGLView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSOpenGLView.h; sourceTree = "<group>"; };
+		187528A0169EE4A8001C1D58 /* NSOpenPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSOpenPanel.h; sourceTree = "<group>"; };
+		187528A1169EE4A8001C1D58 /* NSOutlineView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSOutlineView.h; sourceTree = "<group>"; };
+		187528A2169EE4A8001C1D58 /* NSPageLayout.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSPageLayout.h; sourceTree = "<group>"; };
+		187528A3169EE4A8001C1D58 /* NSPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSPanel.h; sourceTree = "<group>"; };
+		187528A4169EE4A8001C1D58 /* NSParagraphStyle.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSParagraphStyle.h; sourceTree = "<group>"; };
+		187528A5169EE4A8001C1D58 /* NSPasteboard.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSPasteboard.h; sourceTree = "<group>"; };
+		187528A6169EE4A8001C1D58 /* NSPopUpButton.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSPopUpButton.h; sourceTree = "<group>"; };
+		187528A7169EE4A8001C1D58 /* NSPopUpButtonCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSPopUpButtonCell.h; sourceTree = "<group>"; };
+		187528A8169EE4A8001C1D58 /* NSPrintInfo.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSPrintInfo.h; sourceTree = "<group>"; };
+		187528A9169EE4A8001C1D58 /* NSPrintOperation.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSPrintOperation.h; sourceTree = "<group>"; };
+		187528AA169EE4A8001C1D58 /* NSPrintPanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSPrintPanel.h; sourceTree = "<group>"; };
+		187528AB169EE4A8001C1D58 /* NSPrinter.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSPrinter.h; sourceTree = "<group>"; };
+		187528AC169EE4A8001C1D58 /* NSProgressIndicator.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSProgressIndicator.h; sourceTree = "<group>"; };
+		187528AD169EE4A8001C1D58 /* NSResponder.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSResponder.h; sourceTree = "<group>"; };
+		187528AE169EE4A8001C1D58 /* NSRulerMarker.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSRulerMarker.h; sourceTree = "<group>"; };
+		187528AF169EE4A8001C1D58 /* NSRulerView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSRulerView.h; sourceTree = "<group>"; };
+		187528B0169EE4A8001C1D58 /* NSSavePanel.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSavePanel.h; sourceTree = "<group>"; };
+		187528B1169EE4A8001C1D58 /* NSScreen.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSScreen.h; sourceTree = "<group>"; };
+		187528B2169EE4A8001C1D58 /* NSScrollView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSScrollView.h; sourceTree = "<group>"; };
+		187528B3169EE4A8001C1D58 /* NSScroller.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSScroller.h; sourceTree = "<group>"; };
+		187528B4169EE4A8001C1D58 /* NSSearchField.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSearchField.h; sourceTree = "<group>"; };
+		187528B5169EE4A8001C1D58 /* NSSearchFieldCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSearchFieldCell.h; sourceTree = "<group>"; };
+		187528B6169EE4A8001C1D58 /* NSSecureTextField.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSecureTextField.h; sourceTree = "<group>"; };
+		187528B7169EE4A8001C1D58 /* NSSegmentedCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSegmentedCell.h; sourceTree = "<group>"; };
+		187528B8169EE4A8001C1D58 /* NSSegmentedControl.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSegmentedControl.h; sourceTree = "<group>"; };
+		187528B9169EE4A8001C1D58 /* NSSelection.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSelection.h; sourceTree = "<group>"; };
+		187528BA169EE4A8001C1D58 /* NSShadow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSShadow.h; sourceTree = "<group>"; };
+		187528BB169EE4A8001C1D58 /* NSSlider.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSlider.h; sourceTree = "<group>"; };
+		187528BC169EE4A8001C1D58 /* NSSliderCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSliderCell.h; sourceTree = "<group>"; };
+		187528BD169EE4A8001C1D58 /* NSSound.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSound.h; sourceTree = "<group>"; };
+		187528BE169EE4A8001C1D58 /* NSSpeechSynthesizer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSpeechSynthesizer.h; sourceTree = "<group>"; };
+		187528BF169EE4A8001C1D58 /* NSSpellChecker.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSpellChecker.h; sourceTree = "<group>"; };
+		187528C0169EE4A8001C1D58 /* NSSpellProtocol.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSpellProtocol.h; sourceTree = "<group>"; };
+		187528C1169EE4A8001C1D58 /* NSSpellServer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSpellServer.h; sourceTree = "<group>"; };
+		187528C2169EE4A8001C1D58 /* NSSplitView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSSplitView.h; sourceTree = "<group>"; };
+		187528C3169EE4A8001C1D58 /* NSStepper.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSStepper.h; sourceTree = "<group>"; };
+		187528C4169EE4A8001C1D58 /* NSStepperCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSStepperCell.h; sourceTree = "<group>"; };
+		187528C5169EE4A8001C1D58 /* NSStringDrawing.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSStringDrawing.h; sourceTree = "<group>"; };
+		187528C6169EE4A8001C1D58 /* NSTabView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTabView.h; sourceTree = "<group>"; };
+		187528C7169EE4A8001C1D58 /* NSTabViewItem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTabViewItem.h; sourceTree = "<group>"; };
+		187528C8169EE4A8001C1D58 /* NSTableColumn.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTableColumn.h; sourceTree = "<group>"; };
+		187528C9169EE4A8001C1D58 /* NSTableHeaderCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTableHeaderCell.h; sourceTree = "<group>"; };
+		187528CA169EE4A8001C1D58 /* NSTableHeaderView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTableHeaderView.h; sourceTree = "<group>"; };
+		187528CB169EE4A8001C1D58 /* NSTableView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTableView.h; sourceTree = "<group>"; };
+		187528CC169EE4A8001C1D58 /* NSText.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSText.h; sourceTree = "<group>"; };
+		187528CD169EE4A8001C1D58 /* NSTextAttachment.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTextAttachment.h; sourceTree = "<group>"; };
+		187528CE169EE4A8001C1D58 /* NSTextContainer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTextContainer.h; sourceTree = "<group>"; };
+		187528CF169EE4A8001C1D58 /* NSTextField.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTextField.h; sourceTree = "<group>"; };
+		187528D0169EE4A8001C1D58 /* NSTextFieldCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTextFieldCell.h; sourceTree = "<group>"; };
+		187528D1169EE4A8001C1D58 /* NSTextList.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTextList.h; sourceTree = "<group>"; };
+		187528D2169EE4A8001C1D58 /* NSTextStorage.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTextStorage.h; sourceTree = "<group>"; };
+		187528D3169EE4A8001C1D58 /* NSTextTable.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTextTable.h; sourceTree = "<group>"; };
+		187528D4169EE4A8001C1D58 /* NSTextView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTextView.h; sourceTree = "<group>"; };
+		187528D5169EE4A8001C1D58 /* NSTokenField.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTokenField.h; sourceTree = "<group>"; };
+		187528D6169EE4A8001C1D58 /* NSTokenFieldCell.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTokenFieldCell.h; sourceTree = "<group>"; };
+		187528D7169EE4A8001C1D58 /* NSToolbar.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSToolbar.h; sourceTree = "<group>"; };
+		187528D8169EE4A8001C1D58 /* NSToolbarItem.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSToolbarItem.h; sourceTree = "<group>"; };
+		187528D9169EE4A8001C1D58 /* NSToolbarItemGroup.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSToolbarItemGroup.h; sourceTree = "<group>"; };
+		187528DA169EE4A8001C1D58 /* NSTreeController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTreeController.h; sourceTree = "<group>"; };
+		187528DB169EE4A8001C1D58 /* NSTreeNode.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSTreeNode.h; sourceTree = "<group>"; };
+		187528DC169EE4A8001C1D58 /* NSUserDefaultsController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSUserDefaultsController.h; sourceTree = "<group>"; };
+		187528DD169EE4A8001C1D58 /* NSUserInterfaceValidation.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSUserInterfaceValidation.h; sourceTree = "<group>"; };
+		187528DE169EE4A8001C1D58 /* NSView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSView.h; sourceTree = "<group>"; };
+		187528DF169EE4A8001C1D58 /* NSViewController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSViewController.h; sourceTree = "<group>"; };
+		187528E0169EE4A8001C1D58 /* NSWindow.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSWindow.h; sourceTree = "<group>"; };
+		187528E1169EE4A8001C1D58 /* NSWindowController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSWindowController.h; sourceTree = "<group>"; };
+		187528E2169EE4A8001C1D58 /* NSWorkspace.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSWorkspace.h; sourceTree = "<group>"; };
+		187528E3169EE4A8001C1D58 /* PSOperators.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = PSOperators.h; sourceTree = "<group>"; };
+		187528E5169EE4A8001C1D58 /* Cocoa.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Cocoa.h; sourceTree = "<group>"; };
+		187529AD169EE4B7001C1D58 /* .cvsignore */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = .cvsignore; sourceTree = "<group>"; };
+		187529AE169EE4B7001C1D58 /* CompatibilityHeaders.make */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = CompatibilityHeaders.make; sourceTree = "<group>"; };
+		187529AF169EE4B7001C1D58 /* DocMakefile */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = DocMakefile; sourceTree = "<group>"; };
+		187529B0169EE4B7001C1D58 /* Functions.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = Functions.m; sourceTree = "<group>"; };
+		187529B1169EE4B7001C1D58 /* GNUmakefile */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		187529B2169EE4B7001C1D58 /* GNUmakefile.postamble */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = GNUmakefile.postamble; sourceTree = "<group>"; };
+		187529B3169EE4B7001C1D58 /* GNUmakefile.preamble */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = GNUmakefile.preamble; sourceTree = "<group>"; };
+		187529B4169EE4B7001C1D58 /* GSAnimator.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSAnimator.m; sourceTree = "<group>"; };
+		187529B5169EE4B7001C1D58 /* GSBindingHelpers.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSBindingHelpers.h; sourceTree = "<group>"; };
+		187529B6169EE4B7001C1D58 /* GSCharacterPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSCharacterPanel.m; sourceTree = "<group>"; };
+		187529B7169EE4B7001C1D58 /* GSDisplayServer.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSDisplayServer.m; sourceTree = "<group>"; };
+		187529B8169EE4B7001C1D58 /* GSDragView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSDragView.m; sourceTree = "<group>"; };
+		187529B9169EE4B7001C1D58 /* GSEPSPrintOperation.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSEPSPrintOperation.m; sourceTree = "<group>"; };
+		187529BA169EE4B7001C1D58 /* GSFastEnumeration.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSFastEnumeration.h; sourceTree = "<group>"; };
+		187529BB169EE4B7001C1D58 /* GSFontInfo.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSFontInfo.m; sourceTree = "<group>"; };
+		187529BC169EE4B7001C1D58 /* GSGModelLoader.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSGModelLoader.m; sourceTree = "<group>"; };
+		187529BD169EE4B7001C1D58 /* GSGhostscriptImageRep.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSGhostscriptImageRep.m; sourceTree = "<group>"; };
+		187529BE169EE4B7001C1D58 /* GSGormLoader.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSGormLoader.m; sourceTree = "<group>"; };
+		187529BF169EE4B7001C1D58 /* GSGormLoading.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSGormLoading.m; sourceTree = "<group>"; };
+		187529C0169EE4B7001C1D58 /* GSGuiPrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSGuiPrivate.h; sourceTree = "<group>"; };
+		187529C1169EE4B7001C1D58 /* GSHbox.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSHbox.m; sourceTree = "<group>"; };
+		187529C2169EE4B7001C1D58 /* GSHelpAttachment.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSHelpAttachment.m; sourceTree = "<group>"; };
+		187529C3169EE4B7001C1D58 /* GSHelpManagerPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSHelpManagerPanel.m; sourceTree = "<group>"; };
+		187529C4169EE4B7001C1D58 /* GSHorizontalTypesetter.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSHorizontalTypesetter.m; sourceTree = "<group>"; };
+		187529C5169EE4B7001C1D58 /* GSIconManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSIconManager.h; sourceTree = "<group>"; };
+		187529C6169EE4B7001C1D58 /* GSIconManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSIconManager.m; sourceTree = "<group>"; };
+		187529C7169EE4B7001C1D58 /* GSImageMagickImageRep.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSImageMagickImageRep.m; sourceTree = "<group>"; };
+		187529C8169EE4B7001C1D58 /* GSInfoPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSInfoPanel.m; sourceTree = "<group>"; };
+		187529C9169EE4B7001C1D58 /* GSKeyBindingAction.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSKeyBindingAction.h; sourceTree = "<group>"; };
+		187529CA169EE4B7001C1D58 /* GSKeyBindingAction.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSKeyBindingAction.m; sourceTree = "<group>"; };
+		187529CB169EE4B7001C1D58 /* GSKeyBindingTable.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSKeyBindingTable.h; sourceTree = "<group>"; };
+		187529CC169EE4B7001C1D58 /* GSKeyBindingTable.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSKeyBindingTable.m; sourceTree = "<group>"; };
+		187529CD169EE4B7001C1D58 /* GSLayoutManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSLayoutManager.m; sourceTree = "<group>"; };
+		187529CE169EE4B7001C1D58 /* GSMemoryPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSMemoryPanel.m; sourceTree = "<group>"; };
+		187529CF169EE4B7001C1D58 /* GSModelLoaderFactory.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSModelLoaderFactory.m; sourceTree = "<group>"; };
+		187529D0169EE4B7001C1D58 /* GSNibLoader.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSNibLoader.m; sourceTree = "<group>"; };
+		187529D1169EE4B7001C1D58 /* GSNibLoading.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSNibLoading.m; sourceTree = "<group>"; };
+		187529D2169EE4B7001C1D58 /* GSPDFPrintOperation.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSPDFPrintOperation.m; sourceTree = "<group>"; };
+		187529D3169EE4B7001C1D58 /* GSPrintOperation.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSPrintOperation.m; sourceTree = "<group>"; };
+		187529D4169EE4B7001C1D58 /* GSPrinting.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSPrinting.m; sourceTree = "<group>"; };
+		187529D5169EE4B7001C1D58 /* GSServicesManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSServicesManager.m; sourceTree = "<group>"; };
+		187529D6169EE4B7001C1D58 /* GSSlideView.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSSlideView.h; sourceTree = "<group>"; };
+		187529D7169EE4B7001C1D58 /* GSSlideView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSSlideView.m; sourceTree = "<group>"; };
+		187529D8169EE4B7001C1D58 /* GSStandardWindowDecorationView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSStandardWindowDecorationView.m; sourceTree = "<group>"; };
+		187529D9169EE4B7001C1D58 /* GSTable.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSTable.m; sourceTree = "<group>"; };
+		187529DA169EE4B7001C1D58 /* GSTextFinder.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSTextFinder.h; sourceTree = "<group>"; };
+		187529DB169EE4B7001C1D58 /* GSTextFinder.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSTextFinder.m; sourceTree = "<group>"; };
+		187529DC169EE4B7001C1D58 /* GSTextStorage.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSTextStorage.h; sourceTree = "<group>"; };
+		187529DD169EE4B7001C1D58 /* GSTextStorage.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSTextStorage.m; sourceTree = "<group>"; };
+		187529DE169EE4B7001C1D58 /* GSTheme.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSTheme.m; sourceTree = "<group>"; };
+		187529DF169EE4B7001C1D58 /* GSThemeDrawing.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSThemeDrawing.m; sourceTree = "<group>"; };
+		187529E0169EE4B7001C1D58 /* GSThemeInspector.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSThemeInspector.m; sourceTree = "<group>"; };
+		187529E1169EE4B7001C1D58 /* GSThemeMenu.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSThemeMenu.m; sourceTree = "<group>"; };
+		187529E2169EE4B7001C1D58 /* GSThemeOpenSavePanels.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSThemeOpenSavePanels.m; sourceTree = "<group>"; };
+		187529E3169EE4B7001C1D58 /* GSThemePanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSThemePanel.m; sourceTree = "<group>"; };
+		187529E4169EE4B7001C1D58 /* GSThemePrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSThemePrivate.h; sourceTree = "<group>"; };
+		187529E5169EE4B7001C1D58 /* GSThemeTools.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSThemeTools.m; sourceTree = "<group>"; };
+		187529E6169EE4B7001C1D58 /* GSTitleView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSTitleView.m; sourceTree = "<group>"; };
+		187529E7169EE4B7001C1D58 /* GSToolTips.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSToolTips.h; sourceTree = "<group>"; };
+		187529E8169EE4B7001C1D58 /* GSToolTips.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSToolTips.m; sourceTree = "<group>"; };
+		187529E9169EE4B7001C1D58 /* GSToolbarCustomizationPalette.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = GSToolbarCustomizationPalette.h; sourceTree = "<group>"; };
+		187529EA169EE4B7001C1D58 /* GSToolbarCustomizationPalette.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSToolbarCustomizationPalette.m; sourceTree = "<group>"; };
+		187529EB169EE4B7001C1D58 /* GSToolbarView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSToolbarView.m; sourceTree = "<group>"; };
+		187529EC169EE4B7001C1D58 /* GSTrackingRect.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSTrackingRect.m; sourceTree = "<group>"; };
+		187529ED169EE4B7001C1D58 /* GSTypesetter.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSTypesetter.m; sourceTree = "<group>"; };
+		187529EE169EE4B7001C1D58 /* GSVbox.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSVbox.m; sourceTree = "<group>"; };
+		187529EF169EE4B7001C1D58 /* GSWindowDecorationView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSWindowDecorationView.m; sourceTree = "<group>"; };
+		187529F0169EE4B7001C1D58 /* GSXibLoader.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSXibLoader.m; sourceTree = "<group>"; };
+		187529F1169EE4B7001C1D58 /* GSXibLoading.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GSXibLoading.m; sourceTree = "<group>"; };
+		187529F2169EE4B7001C1D58 /* Info-gnustep.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist; path = "Info-gnustep.plist"; sourceTree = "<group>"; };
+		187529F3169EE4B7001C1D58 /* NSActionCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSActionCell.m; sourceTree = "<group>"; };
+		187529F4169EE4B7001C1D58 /* NSAffineTransform.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSAffineTransform.m; sourceTree = "<group>"; };
+		187529F5169EE4B7001C1D58 /* NSAlert.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSAlert.m; sourceTree = "<group>"; };
+		187529F6169EE4B7001C1D58 /* NSAnimation.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSAnimation.m; sourceTree = "<group>"; };
+		187529F7169EE4B7001C1D58 /* NSApplication.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSApplication.m; sourceTree = "<group>"; };
+		187529F8169EE4B7001C1D58 /* NSArrayController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSArrayController.m; sourceTree = "<group>"; };
+		187529F9169EE4B7001C1D58 /* NSAttributedString.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSAttributedString.m; sourceTree = "<group>"; };
+		187529FA169EE4B7001C1D58 /* NSBezierPath.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSBezierPath.m; sourceTree = "<group>"; };
+		187529FB169EE4B7001C1D58 /* NSBitmapImageRep+GIF.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSBitmapImageRep+GIF.h"; sourceTree = "<group>"; };
+		187529FC169EE4B7001C1D58 /* NSBitmapImageRep+GIF.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSBitmapImageRep+GIF.m"; sourceTree = "<group>"; };
+		187529FD169EE4B7001C1D58 /* NSBitmapImageRep+ICNS.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSBitmapImageRep+ICNS.h"; sourceTree = "<group>"; };
+		187529FE169EE4B7001C1D58 /* NSBitmapImageRep+ICNS.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSBitmapImageRep+ICNS.m"; sourceTree = "<group>"; };
+		187529FF169EE4B7001C1D58 /* NSBitmapImageRep+JPEG.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSBitmapImageRep+JPEG.h"; sourceTree = "<group>"; };
+		18752A00169EE4B7001C1D58 /* NSBitmapImageRep+JPEG.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSBitmapImageRep+JPEG.m"; sourceTree = "<group>"; };
+		18752A01169EE4B7001C1D58 /* NSBitmapImageRep+PNG.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSBitmapImageRep+PNG.h"; sourceTree = "<group>"; };
+		18752A02169EE4B7001C1D58 /* NSBitmapImageRep+PNG.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSBitmapImageRep+PNG.m"; sourceTree = "<group>"; };
+		18752A03169EE4B7001C1D58 /* NSBitmapImageRep+PNM.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSBitmapImageRep+PNM.h"; sourceTree = "<group>"; };
+		18752A04169EE4B7001C1D58 /* NSBitmapImageRep+PNM.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSBitmapImageRep+PNM.m"; sourceTree = "<group>"; };
+		18752A05169EE4B7001C1D58 /* NSBitmapImageRep.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSBitmapImageRep.m; sourceTree = "<group>"; };
+		18752A06169EE4B7001C1D58 /* NSBox.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSBox.m; sourceTree = "<group>"; };
+		18752A07169EE4B7001C1D58 /* NSBrowser.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSBrowser.m; sourceTree = "<group>"; };
+		18752A08169EE4B7001C1D58 /* NSBrowserCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSBrowserCell.m; sourceTree = "<group>"; };
+		18752A09169EE4B7001C1D58 /* NSBundleAdditions.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSBundleAdditions.m; sourceTree = "<group>"; };
+		18752A0A169EE4B7001C1D58 /* NSButton.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSButton.m; sourceTree = "<group>"; };
+		18752A0B169EE4B7001C1D58 /* NSButtonCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSButtonCell.m; sourceTree = "<group>"; };
+		18752A0C169EE4B7001C1D58 /* NSButtonImageSource.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSButtonImageSource.h; sourceTree = "<group>"; };
+		18752A0D169EE4B7001C1D58 /* NSButtonImageSource.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSButtonImageSource.m; sourceTree = "<group>"; };
+		18752A0E169EE4B7001C1D58 /* NSCachedImageRep.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSCachedImageRep.m; sourceTree = "<group>"; };
+		18752A0F169EE4B7001C1D58 /* NSCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSCell.m; sourceTree = "<group>"; };
+		18752A10169EE4B7001C1D58 /* NSClipView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSClipView.m; sourceTree = "<group>"; };
+		18752A11169EE4B7001C1D58 /* NSColor.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSColor.m; sourceTree = "<group>"; };
+		18752A12169EE4B7001C1D58 /* NSColorList.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSColorList.m; sourceTree = "<group>"; };
+		18752A13169EE4B7001C1D58 /* NSColorPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSColorPanel.m; sourceTree = "<group>"; };
+		18752A14169EE4B7001C1D58 /* NSColorPicker.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSColorPicker.m; sourceTree = "<group>"; };
+		18752A15169EE4B7001C1D58 /* NSColorSpace.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSColorSpace.m; sourceTree = "<group>"; };
+		18752A16169EE4B7001C1D58 /* NSColorWell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSColorWell.m; sourceTree = "<group>"; };
+		18752A17169EE4B7001C1D58 /* NSComboBox.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSComboBox.m; sourceTree = "<group>"; };
+		18752A18169EE4B7001C1D58 /* NSComboBoxCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSComboBoxCell.m; sourceTree = "<group>"; };
+		18752A19169EE4B7001C1D58 /* NSControl.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSControl.m; sourceTree = "<group>"; };
+		18752A1A169EE4B7001C1D58 /* NSController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSController.m; sourceTree = "<group>"; };
+		18752A1B169EE4B7001C1D58 /* NSCursor.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSCursor.m; sourceTree = "<group>"; };
+		18752A1C169EE4B7001C1D58 /* NSCustomImageRep.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSCustomImageRep.m; sourceTree = "<group>"; };
+		18752A1D169EE4B7001C1D58 /* NSDataLink.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSDataLink.m; sourceTree = "<group>"; };
+		18752A1E169EE4B7001C1D58 /* NSDataLinkManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSDataLinkManager.m; sourceTree = "<group>"; };
+		18752A1F169EE4B7001C1D58 /* NSDataLinkPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSDataLinkPanel.m; sourceTree = "<group>"; };
+		18752A20169EE4B7001C1D58 /* NSDocument.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSDocument.m; sourceTree = "<group>"; };
+		18752A21169EE4B7001C1D58 /* NSDocumentController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSDocumentController.m; sourceTree = "<group>"; };
+		18752A22169EE4B7001C1D58 /* NSDocumentFrameworkPrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSDocumentFrameworkPrivate.h; sourceTree = "<group>"; };
+		18752A23169EE4B7001C1D58 /* NSDrawer.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSDrawer.m; sourceTree = "<group>"; };
+		18752A24169EE4B7001C1D58 /* NSEPSImageRep.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSEPSImageRep.m; sourceTree = "<group>"; };
+		18752A25169EE4B7001C1D58 /* NSEvent.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSEvent.m; sourceTree = "<group>"; };
+		18752A26169EE4B7001C1D58 /* NSFileWrapper.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSFileWrapper.m; sourceTree = "<group>"; };
+		18752A27169EE4B7001C1D58 /* NSFont.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSFont.m; sourceTree = "<group>"; };
+		18752A28169EE4B7001C1D58 /* NSFontDescriptor.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSFontDescriptor.m; sourceTree = "<group>"; };
+		18752A29169EE4B7001C1D58 /* NSFontManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSFontManager.m; sourceTree = "<group>"; };
+		18752A2A169EE4B7001C1D58 /* NSFontPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSFontPanel.m; sourceTree = "<group>"; };
+		18752A2B169EE4B7001C1D58 /* NSForm.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSForm.m; sourceTree = "<group>"; };
+		18752A2C169EE4B7001C1D58 /* NSFormCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSFormCell.m; sourceTree = "<group>"; };
+		18752A2D169EE4B7001C1D58 /* NSGlyphGenerator.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSGlyphGenerator.m; sourceTree = "<group>"; };
+		18752A2E169EE4B7001C1D58 /* NSGradient.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSGradient.m; sourceTree = "<group>"; };
+		18752A2F169EE4B7001C1D58 /* NSGraphicsContext.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSGraphicsContext.m; sourceTree = "<group>"; };
+		18752A30169EE4B7001C1D58 /* NSHelpManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSHelpManager.m; sourceTree = "<group>"; };
+		18752A31169EE4B7001C1D58 /* NSHelpPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSHelpPanel.m; sourceTree = "<group>"; };
+		18752A32169EE4B7001C1D58 /* NSImage.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSImage.m; sourceTree = "<group>"; };
+		18752A33169EE4B7001C1D58 /* NSImageCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSImageCell.m; sourceTree = "<group>"; };
+		18752A34169EE4B7001C1D58 /* NSImageRep.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSImageRep.m; sourceTree = "<group>"; };
+		18752A35169EE4B7001C1D58 /* NSImageView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSImageView.m; sourceTree = "<group>"; };
+		18752A36169EE4B7001C1D58 /* NSInputManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSInputManager.m; sourceTree = "<group>"; };
+		18752A37169EE4B7001C1D58 /* NSInputServer.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSInputServer.m; sourceTree = "<group>"; };
+		18752A38169EE4B7001C1D58 /* NSInterfaceStyle.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSInterfaceStyle.m; sourceTree = "<group>"; };
+		18752A39169EE4B7001C1D58 /* NSKeyValueBinding.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSKeyValueBinding.m; sourceTree = "<group>"; };
+		18752A3A169EE4B7001C1D58 /* NSLayoutManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSLayoutManager.m; sourceTree = "<group>"; };
+		18752A3B169EE4B7001C1D58 /* NSLevelIndicator.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSLevelIndicator.m; sourceTree = "<group>"; };
+		18752A3C169EE4B7001C1D58 /* NSLevelIndicatorCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSLevelIndicatorCell.m; sourceTree = "<group>"; };
+		18752A3D169EE4B7001C1D58 /* NSMatrix.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSMatrix.m; sourceTree = "<group>"; };
+		18752A3E169EE4B7001C1D58 /* NSMenu.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSMenu.m; sourceTree = "<group>"; };
+		18752A3F169EE4B7001C1D58 /* NSMenuItem.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSMenuItem.m; sourceTree = "<group>"; };
+		18752A40169EE4B7001C1D58 /* NSMenuItemCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSMenuItemCell.m; sourceTree = "<group>"; };
+		18752A41169EE4B7001C1D58 /* NSMenuView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSMenuView.m; sourceTree = "<group>"; };
+		18752A42169EE4B7001C1D58 /* NSMovie.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSMovie.m; sourceTree = "<group>"; };
+		18752A43169EE4B7001C1D58 /* NSMovieView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSMovieView.m; sourceTree = "<group>"; };
+		18752A44169EE4B7001C1D58 /* NSNib.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSNib.m; sourceTree = "<group>"; };
+		18752A45169EE4B7001C1D58 /* NSNibAXAttributeConnector.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSNibAXAttributeConnector.m; sourceTree = "<group>"; };
+		18752A46169EE4B7001C1D58 /* NSNibAXRelationshipConnector.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSNibAXRelationshipConnector.m; sourceTree = "<group>"; };
+		18752A47169EE4B7001C1D58 /* NSNibBindingConnector.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSNibBindingConnector.m; sourceTree = "<group>"; };
+		18752A48169EE4B7001C1D58 /* NSObjectController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSObjectController.m; sourceTree = "<group>"; };
+		18752A49169EE4B7001C1D58 /* NSOpenGLContext.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSOpenGLContext.m; sourceTree = "<group>"; };
+		18752A4A169EE4B7001C1D58 /* NSOpenGLPixelFormat.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSOpenGLPixelFormat.m; sourceTree = "<group>"; };
+		18752A4B169EE4B7001C1D58 /* NSOpenGLView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSOpenGLView.m; sourceTree = "<group>"; };
+		18752A4C169EE4B7001C1D58 /* NSOpenPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSOpenPanel.m; sourceTree = "<group>"; };
+		18752A4D169EE4B7001C1D58 /* NSOutlineView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSOutlineView.m; sourceTree = "<group>"; };
+		18752A4E169EE4B7001C1D58 /* NSPageLayout.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSPageLayout.m; sourceTree = "<group>"; };
+		18752A4F169EE4B7001C1D58 /* NSPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSPanel.m; sourceTree = "<group>"; };
+		18752A50169EE4B7001C1D58 /* NSParagraphStyle.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSParagraphStyle.m; sourceTree = "<group>"; };
+		18752A51169EE4B7001C1D58 /* NSPasteboard.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSPasteboard.m; sourceTree = "<group>"; };
+		18752A52169EE4B7001C1D58 /* NSPopUpButton.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSPopUpButton.m; sourceTree = "<group>"; };
+		18752A53169EE4B7001C1D58 /* NSPopUpButtonCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSPopUpButtonCell.m; sourceTree = "<group>"; };
+		18752A54169EE4B7001C1D58 /* NSPrintInfo.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSPrintInfo.m; sourceTree = "<group>"; };
+		18752A55169EE4B7001C1D58 /* NSPrintOperation.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSPrintOperation.m; sourceTree = "<group>"; };
+		18752A56169EE4B7001C1D58 /* NSPrintPanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSPrintPanel.m; sourceTree = "<group>"; };
+		18752A57169EE4B7001C1D58 /* NSPrinter.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSPrinter.m; sourceTree = "<group>"; };
+		18752A58169EE4B7001C1D58 /* NSProgressIndicator.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSProgressIndicator.m; sourceTree = "<group>"; };
+		18752A59169EE4B7001C1D58 /* NSResponder.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSResponder.m; sourceTree = "<group>"; };
+		18752A5A169EE4B7001C1D58 /* NSRulerMarker.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSRulerMarker.m; sourceTree = "<group>"; };
+		18752A5B169EE4B7001C1D58 /* NSRulerView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSRulerView.m; sourceTree = "<group>"; };
+		18752A5C169EE4B7001C1D58 /* NSSavePanel.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSavePanel.m; sourceTree = "<group>"; };
+		18752A5D169EE4B7001C1D58 /* NSScreen.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSScreen.m; sourceTree = "<group>"; };
+		18752A5E169EE4B7001C1D58 /* NSScrollView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSScrollView.m; sourceTree = "<group>"; };
+		18752A5F169EE4B7001C1D58 /* NSScroller.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSScroller.m; sourceTree = "<group>"; };
+		18752A60169EE4B7001C1D58 /* NSSearchField.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSearchField.m; sourceTree = "<group>"; };
+		18752A61169EE4B7001C1D58 /* NSSearchFieldCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSearchFieldCell.m; sourceTree = "<group>"; };
+		18752A62169EE4B7001C1D58 /* NSSecureTextField.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSecureTextField.m; sourceTree = "<group>"; };
+		18752A63169EE4B7001C1D58 /* NSSegmentedCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSegmentedCell.m; sourceTree = "<group>"; };
+		18752A64169EE4B7001C1D58 /* NSSegmentedControl.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSegmentedControl.m; sourceTree = "<group>"; };
+		18752A65169EE4B7001C1D58 /* NSSelection.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSelection.m; sourceTree = "<group>"; };
+		18752A66169EE4B7001C1D58 /* NSShadow.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSShadow.m; sourceTree = "<group>"; };
+		18752A67169EE4B7001C1D58 /* NSSlider.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSlider.m; sourceTree = "<group>"; };
+		18752A68169EE4B7001C1D58 /* NSSliderCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSliderCell.m; sourceTree = "<group>"; };
+		18752A69169EE4B7001C1D58 /* NSSound.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSound.m; sourceTree = "<group>"; };
+		18752A6A169EE4B7001C1D58 /* NSSpeechSynthesizer.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSpeechSynthesizer.m; sourceTree = "<group>"; };
+		18752A6B169EE4B7001C1D58 /* NSSpellChecker.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSpellChecker.m; sourceTree = "<group>"; };
+		18752A6C169EE4B7001C1D58 /* NSSplitView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSSplitView.m; sourceTree = "<group>"; };
+		18752A6D169EE4B7001C1D58 /* NSStepper.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSStepper.m; sourceTree = "<group>"; };
+		18752A6E169EE4B7001C1D58 /* NSStepperCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSStepperCell.m; sourceTree = "<group>"; };
+		18752A6F169EE4B7001C1D58 /* NSStringDrawing.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSStringDrawing.m; sourceTree = "<group>"; };
+		18752A70169EE4B8001C1D58 /* NSTabView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTabView.m; sourceTree = "<group>"; };
+		18752A71169EE4B8001C1D58 /* NSTabViewItem.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTabViewItem.m; sourceTree = "<group>"; };
+		18752A72169EE4B8001C1D58 /* NSTableColumn.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTableColumn.m; sourceTree = "<group>"; };
+		18752A73169EE4B8001C1D58 /* NSTableHeaderCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTableHeaderCell.m; sourceTree = "<group>"; };
+		18752A74169EE4B8001C1D58 /* NSTableHeaderView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTableHeaderView.m; sourceTree = "<group>"; };
+		18752A75169EE4B8001C1D58 /* NSTableView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTableView.m; sourceTree = "<group>"; };
+		18752A76169EE4B8001C1D58 /* NSText.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSText.m; sourceTree = "<group>"; };
+		18752A77169EE4B8001C1D58 /* NSTextAttachment.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextAttachment.m; sourceTree = "<group>"; };
+		18752A78169EE4B8001C1D58 /* NSTextBlock.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextBlock.m; sourceTree = "<group>"; };
+		18752A79169EE4B8001C1D58 /* NSTextContainer.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextContainer.m; sourceTree = "<group>"; };
+		18752A7A169EE4B8001C1D58 /* NSTextField.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextField.m; sourceTree = "<group>"; };
+		18752A7B169EE4B8001C1D58 /* NSTextFieldCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextFieldCell.m; sourceTree = "<group>"; };
+		18752A7C169EE4B8001C1D58 /* NSTextList.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextList.m; sourceTree = "<group>"; };
+		18752A7D169EE4B8001C1D58 /* NSTextStorage.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextStorage.m; sourceTree = "<group>"; };
+		18752A7E169EE4B8001C1D58 /* NSTextTable.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextTable.m; sourceTree = "<group>"; };
+		18752A7F169EE4B8001C1D58 /* NSTextTableBlock.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextTableBlock.m; sourceTree = "<group>"; };
+		18752A80169EE4B8001C1D58 /* NSTextView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextView.m; sourceTree = "<group>"; };
+		18752A81169EE4B8001C1D58 /* NSTextView_actions.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTextView_actions.m; sourceTree = "<group>"; };
+		18752A82169EE4B8001C1D58 /* NSTokenField.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTokenField.m; sourceTree = "<group>"; };
+		18752A83169EE4B8001C1D58 /* NSTokenFieldCell.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTokenFieldCell.m; sourceTree = "<group>"; };
+		18752A84169EE4B8001C1D58 /* NSToolbar.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSToolbar.m; sourceTree = "<group>"; };
+		18752A85169EE4B8001C1D58 /* NSToolbarFrameworkPrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSToolbarFrameworkPrivate.h; sourceTree = "<group>"; };
+		18752A86169EE4B8001C1D58 /* NSToolbarItem.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSToolbarItem.m; sourceTree = "<group>"; };
+		18752A87169EE4B8001C1D58 /* NSToolbarItemGroup.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSToolbarItemGroup.m; sourceTree = "<group>"; };
+		18752A88169EE4B8001C1D58 /* NSTreeController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSTreeController.m; sourceTree = "<group>"; };
+		18752A89169EE4B8001C1D58 /* NSUserDefaultsController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSUserDefaultsController.m; sourceTree = "<group>"; };
+		18752A8A169EE4B8001C1D58 /* NSView.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSView.m; sourceTree = "<group>"; };
+		18752A8B169EE4B8001C1D58 /* NSViewController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSViewController.m; sourceTree = "<group>"; };
+		18752A8C169EE4B8001C1D58 /* NSViewPrivate.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NSViewPrivate.h; sourceTree = "<group>"; };
+		18752A8D169EE4B8001C1D58 /* NSWindow.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSWindow.m; sourceTree = "<group>"; };
+		18752A8E169EE4B8001C1D58 /* NSWindowController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSWindowController.m; sourceTree = "<group>"; };
+		18752A8F169EE4B8001C1D58 /* NSWorkspace.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = NSWorkspace.m; sourceTree = "<group>"; };
+		18752A90169EE4B8001C1D58 /* externs.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = externs.m; sourceTree = "<group>"; };
+		18752A91169EE4B8001C1D58 /* linking.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = linking.m; sourceTree = "<group>"; };
+		18752A92169EE4B8001C1D58 /* nsimage-tiff.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "nsimage-tiff.h"; sourceTree = "<group>"; };
+		18752A93169EE4B8001C1D58 /* tiff.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = tiff.m; sourceTree = "<group>"; };
+		18752A94169EE4B8001C1D58 /* win32-def.top */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = "win32-def.top"; sourceTree = "<group>"; };
+		18752A95169EE4B8001C1D58 /* win32-entry.c */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.c; path = "win32-entry.c"; sourceTree = "<group>"; };
+		18752B7F169EEABF001C1D58 /* libobjc.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libobjc.dylib; path = usr/lib/libobjc.dylib; sourceTree = SDKROOT; };
+		18752B81169EEAD7001C1D58 /* libFoundation.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libFoundation.dylib; path = ../../../../usr/GNUstep/Local/Library/Libraries/libFoundation.dylib; sourceTree = "<group>"; };
+		18752B83169EEAF4001C1D58 /* libgnustep-base.1.24.2.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = "libgnustep-base.1.24.2.dylib"; path = "../../../../usr/GNUstep/Local/Library/Libraries/libgnustep-base.1.24.2.dylib"; sourceTree = "<group>"; };
+		18752B85169EEB0A001C1D58 /* libicucore.A.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libicucore.A.dylib; path = ../../../../usr/lib/libicucore.A.dylib; sourceTree = "<group>"; };
+		18752B87169EEB56001C1D58 /* libtiff.3.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libtiff.3.dylib; path = ../../../../opt/local/lib/libtiff.3.dylib; sourceTree = "<group>"; };
+		18752B89169EEB85001C1D58 /* libpng15.15.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libpng15.15.dylib; path = ../../../../opt/local/lib/libpng15.15.dylib; sourceTree = "<group>"; };
+		18752B8B169EEBA1001C1D58 /* libjpeg.8.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libjpeg.8.dylib; path = ../../../../opt/local/lib/libjpeg.8.dylib; sourceTree = "<group>"; };
+		18752B8D169EEBC3001C1D58 /* libgif.4.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libgif.4.dylib; path = ../../../../opt/local/lib/libgif.4.dylib; sourceTree = "<group>"; };
+		18752B8F169EEC24001C1D58 /* libicuuc.48.1.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libicuuc.48.1.dylib; path = ../../../../opt/local/lib/libicuuc.48.1.dylib; sourceTree = "<group>"; };
+		18752B91169EEC3F001C1D58 /* libtiff.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libtiff.dylib; path = usr/local/lib/libtiff.dylib; sourceTree = SDKROOT; };
+		18752B93169EEC56001C1D58 /* libjpeg.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libjpeg.dylib; path = usr/local/lib/libjpeg.dylib; sourceTree = SDKROOT; };
+		18752B95169EEC61001C1D58 /* libpng.dylib */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.dylib"; name = libpng.dylib; path = usr/local/lib/libpng.dylib; sourceTree = SDKROOT; };
+		18752B98169EF420001C1D58 /* configure.ac */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = configure.ac; sourceTree = SOURCE_ROOT; };
+		18A18B1B16FF94F4009E43B0 /* AppKit-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = "AppKit-Info.plist"; path = "Support/AppKit/AppKit-Info.plist"; sourceTree = SOURCE_ROOT; };
+		18A18B1C16FF94F4009E43B0 /* AppKit-Prefix.pch */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = "AppKit-Prefix.pch"; path = "Support/AppKit/AppKit-Prefix.pch"; sourceTree = SOURCE_ROOT; };
+		18A18B2016FF9554009E43B0 /* .cvsignore */ = {isa = PBXFileReference; lastKnownFileType = text; path = .cvsignore; sourceTree = "<group>"; };
+		18A18B2116FF9554009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18B2216FF9554009E43B0 /* GNUstep.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = GNUstep.tiff; sourceTree = "<group>"; };
+		18A18B2316FF9554009E43B0 /* GNUstepMenuImage.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = GNUstepMenuImage.tiff; sourceTree = "<group>"; };
+		18A18B2416FF9554009E43B0 /* GSSearch.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = GSSearch.tiff; sourceTree = "<group>"; };
+		18A18B2516FF9554009E43B0 /* GSStop.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = GSStop.tiff; sourceTree = "<group>"; };
+		18A18B2616FF9554009E43B0 /* LogoGNUstep.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = LogoGNUstep.tiff; sourceTree = "<group>"; };
+		18A18B2716FF9554009E43B0 /* MagnifyGlass.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = MagnifyGlass.tiff; sourceTree = "<group>"; };
+		18A18B2816FF9554009E43B0 /* NSAddTemplate.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = NSAddTemplate.tiff; sourceTree = "<group>"; };
+		18A18B2916FF9554009E43B0 /* NSComboArrow.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = NSComboArrow.tiff; sourceTree = "<group>"; };
+		18A18B2A16FF9554009E43B0 /* NSRatingLevelIndicator.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = NSRatingLevelIndicator.tiff; sourceTree = "<group>"; };
+		18A18B2B16FF9554009E43B0 /* common_2DCheckMark.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_2DCheckMark.tiff; sourceTree = "<group>"; };
+		18A18B2C16FF9554009E43B0 /* common_2DDash.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_2DDash.tiff; sourceTree = "<group>"; };
+		18A18B2D16FF9554009E43B0 /* common_3DArrowDown.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_3DArrowDown.tiff; sourceTree = "<group>"; };
+		18A18B2E16FF9554009E43B0 /* common_3DArrowLeft.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_3DArrowLeft.tiff; sourceTree = "<group>"; };
+		18A18B2F16FF9554009E43B0 /* common_3DArrowRight.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_3DArrowRight.tiff; sourceTree = "<group>"; };
+		18A18B3016FF9554009E43B0 /* common_3DArrowRightH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_3DArrowRightH.tiff; sourceTree = "<group>"; };
+		18A18B3116FF9554009E43B0 /* common_3DArrowUp.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_3DArrowUp.tiff; sourceTree = "<group>"; };
+		18A18B3216FF9554009E43B0 /* common_ArrowDown.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ArrowDown.tiff; sourceTree = "<group>"; };
+		18A18B3316FF9554009E43B0 /* common_ArrowDownH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ArrowDownH.tiff; sourceTree = "<group>"; };
+		18A18B3416FF9554009E43B0 /* common_ArrowLeft.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ArrowLeft.tiff; sourceTree = "<group>"; };
+		18A18B3516FF9554009E43B0 /* common_ArrowLeftH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ArrowLeftH.tiff; sourceTree = "<group>"; };
+		18A18B3616FF9554009E43B0 /* common_ArrowRight.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ArrowRight.tiff; sourceTree = "<group>"; };
+		18A18B3716FF9554009E43B0 /* common_ArrowRightH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ArrowRightH.tiff; sourceTree = "<group>"; };
+		18A18B3816FF9554009E43B0 /* common_ArrowUp.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ArrowUp.tiff; sourceTree = "<group>"; };
+		18A18B3916FF9554009E43B0 /* common_ArrowUpH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ArrowUpH.tiff; sourceTree = "<group>"; };
+		18A18B3A16FF9554009E43B0 /* common_CenterTabStop.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_CenterTabStop.tiff; sourceTree = "<group>"; };
+		18A18B3B16FF9554009E43B0 /* common_Close.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Close.tiff; sourceTree = "<group>"; };
+		18A18B3C16FF9554009E43B0 /* common_CloseBroken.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_CloseBroken.tiff; sourceTree = "<group>"; };
+		18A18B3D16FF9554009E43B0 /* common_CloseBrokenH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_CloseBrokenH.tiff; sourceTree = "<group>"; };
+		18A18B3E16FF9554009E43B0 /* common_CloseH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_CloseH.tiff; sourceTree = "<group>"; };
+		18A18B3F16FF9554009E43B0 /* common_ClosedHandCursor.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ClosedHandCursor.tiff; sourceTree = "<group>"; };
+		18A18B4016FF9554009E43B0 /* common_ColorSwatch.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ColorSwatch.tiff; sourceTree = "<group>"; };
+		18A18B4116FF9554009E43B0 /* common_ComboBoxEllipsis.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ComboBoxEllipsis.tiff; sourceTree = "<group>"; };
+		18A18B4216FF9554009E43B0 /* common_DecimalTabStop.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_DecimalTabStop.tiff; sourceTree = "<group>"; };
+		18A18B4316FF9554009E43B0 /* common_Desktop.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Desktop.tiff; sourceTree = "<group>"; };
+		18A18B4416FF9554009E43B0 /* common_Diamond.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Diamond.tiff; sourceTree = "<group>"; };
+		18A18B4516FF9554009E43B0 /* common_Dimple.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Dimple.tiff; sourceTree = "<group>"; };
+		18A18B4616FF9554009E43B0 /* common_DimpleHoriz.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_DimpleHoriz.tiff; sourceTree = "<group>"; };
+		18A18B4716FF9554009E43B0 /* common_DocsFolder.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_DocsFolder.tiff; sourceTree = "<group>"; };
+		18A18B4816FF9554009E43B0 /* common_DownArrowSmall.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_DownArrowSmall.tiff; sourceTree = "<group>"; };
+		18A18B4916FF9554009E43B0 /* common_DownloadFolder.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_DownloadFolder.tiff; sourceTree = "<group>"; };
+		18A18B4A16FF9554009E43B0 /* common_Folder.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Folder.tiff; sourceTree = "<group>"; };
+		18A18B4B16FF9554009E43B0 /* common_GSFolder.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_GSFolder.tiff; sourceTree = "<group>"; };
+		18A18B4C16FF9554009E43B0 /* common_HelpCursor.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_HelpCursor.tiff; sourceTree = "<group>"; };
+		18A18B4D16FF9554009E43B0 /* common_HelpLink.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_HelpLink.tiff; sourceTree = "<group>"; };
+		18A18B4E16FF9554009E43B0 /* common_Home.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Home.tiff; sourceTree = "<group>"; };
+		18A18B4F16FF9554009E43B0 /* common_HomeDirectory.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_HomeDirectory.tiff; sourceTree = "<group>"; };
+		18A18B5016FF9554009E43B0 /* common_ImageFolder.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ImageFolder.tiff; sourceTree = "<group>"; };
+		18A18B5116FF9554009E43B0 /* common_Info.svg */ = {isa = PBXFileReference; lastKnownFileType = text.xml; path = common_Info.svg; sourceTree = "<group>"; };
+		18A18B5216FF9554009E43B0 /* common_Info.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Info.tiff; sourceTree = "<group>"; };
+		18A18B5316FF9554009E43B0 /* common_LeftTabStop.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_LeftTabStop.tiff; sourceTree = "<group>"; };
+		18A18B5416FF9554009E43B0 /* common_LibraryFolder.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_LibraryFolder.tiff; sourceTree = "<group>"; };
+		18A18B5516FF9554009E43B0 /* common_MiniWindowTile.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_MiniWindowTile.tiff; sourceTree = "<group>"; };
+		18A18B5616FF9554009E43B0 /* common_Miniaturize.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Miniaturize.tiff; sourceTree = "<group>"; };
+		18A18B5716FF9554009E43B0 /* common_MiniaturizeH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_MiniaturizeH.tiff; sourceTree = "<group>"; };
+		18A18B5816FF9554009E43B0 /* common_Mount.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Mount.tiff; sourceTree = "<group>"; };
+		18A18B5916FF9554009E43B0 /* common_MusicFolder.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_MusicFolder.tiff; sourceTree = "<group>"; };
+		18A18B5A16FF9554009E43B0 /* common_Nibble.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Nibble.tiff; sourceTree = "<group>"; };
+		18A18B5B16FF9554009E43B0 /* common_OpenHandCursor.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_OpenHandCursor.tiff; sourceTree = "<group>"; };
+		18A18B5C16FF9554009E43B0 /* common_Printer.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Printer.tiff; sourceTree = "<group>"; };
+		18A18B5D16FF9554009E43B0 /* common_ProgressIndeterminate_1.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressIndeterminate_1.tiff; sourceTree = "<group>"; };
+		18A18B5E16FF9554009E43B0 /* common_ProgressIndeterminate_2.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressIndeterminate_2.tiff; sourceTree = "<group>"; };
+		18A18B5F16FF9554009E43B0 /* common_ProgressIndeterminate_3.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressIndeterminate_3.tiff; sourceTree = "<group>"; };
+		18A18B6016FF9554009E43B0 /* common_ProgressIndeterminate_4.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressIndeterminate_4.tiff; sourceTree = "<group>"; };
+		18A18B6116FF9554009E43B0 /* common_ProgressIndeterminate_5.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressIndeterminate_5.tiff; sourceTree = "<group>"; };
+		18A18B6216FF9554009E43B0 /* common_ProgressIndeterminate_6.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressIndeterminate_6.tiff; sourceTree = "<group>"; };
+		18A18B6316FF9554009E43B0 /* common_ProgressSpinning_1.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressSpinning_1.tiff; sourceTree = "<group>"; };
+		18A18B6416FF9554009E43B0 /* common_ProgressSpinning_2.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressSpinning_2.tiff; sourceTree = "<group>"; };
+		18A18B6516FF9554009E43B0 /* common_ProgressSpinning_3.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressSpinning_3.tiff; sourceTree = "<group>"; };
+		18A18B6616FF9554009E43B0 /* common_ProgressSpinning_4.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressSpinning_4.tiff; sourceTree = "<group>"; };
+		18A18B6716FF9554009E43B0 /* common_ProgressSpinning_5.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressSpinning_5.tiff; sourceTree = "<group>"; };
+		18A18B6816FF9554009E43B0 /* common_ProgressSpinning_6.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressSpinning_6.tiff; sourceTree = "<group>"; };
+		18A18B6916FF9554009E43B0 /* common_ProgressSpinning_7.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressSpinning_7.tiff; sourceTree = "<group>"; };
+		18A18B6A16FF9554009E43B0 /* common_ProgressSpinning_8.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ProgressSpinning_8.tiff; sourceTree = "<group>"; };
+		18A18B6B16FF9554009E43B0 /* common_RadioOff.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_RadioOff.tiff; sourceTree = "<group>"; };
+		18A18B6C16FF9554009E43B0 /* common_RadioOn.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_RadioOn.tiff; sourceTree = "<group>"; };
+		18A18B6D16FF9554009E43B0 /* common_Right.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Right.tiff; sourceTree = "<group>"; };
+		18A18B6E16FF9554009E43B0 /* common_RightH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_RightH.tiff; sourceTree = "<group>"; };
+		18A18B6F16FF9554009E43B0 /* common_RightTabStop.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_RightTabStop.tiff; sourceTree = "<group>"; };
+		18A18B7016FF9554009E43B0 /* common_Root_Apple.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Root_Apple.tiff; sourceTree = "<group>"; };
+		18A18B7116FF9554009E43B0 /* common_Root_PC.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Root_PC.tiff; sourceTree = "<group>"; };
+		18A18B7216FF9554009E43B0 /* common_Root_SGI.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Root_SGI.tiff; sourceTree = "<group>"; };
+		18A18B7316FF9554009E43B0 /* common_Root_Sparc.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Root_Sparc.tiff; sourceTree = "<group>"; };
+		18A18B7416FF9554009E43B0 /* common_Root_Sparc2.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Root_Sparc2.tiff; sourceTree = "<group>"; };
+		18A18B7516FF9554009E43B0 /* common_SliderHoriz.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_SliderHoriz.tiff; sourceTree = "<group>"; };
+		18A18B7616FF9554009E43B0 /* common_SliderVert.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_SliderVert.tiff; sourceTree = "<group>"; };
+		18A18B7716FF9554009E43B0 /* common_SwitchOff.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_SwitchOff.tiff; sourceTree = "<group>"; };
+		18A18B7816FF9554009E43B0 /* common_SwitchOn.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_SwitchOn.tiff; sourceTree = "<group>"; };
+		18A18B7916FF9554009E43B0 /* common_TabDownSelectedLeft.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabDownSelectedLeft.tiff; sourceTree = "<group>"; };
+		18A18B7A16FF9554009E43B0 /* common_TabDownSelectedRight.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabDownSelectedRight.tiff; sourceTree = "<group>"; };
+		18A18B7B16FF9554009E43B0 /* common_TabDownSelectedToUnSelectedJunction.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabDownSelectedToUnSelectedJunction.tiff; sourceTree = "<group>"; };
+		18A18B7C16FF9554009E43B0 /* common_TabDownUnSelectedJunction.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabDownUnSelectedJunction.tiff; sourceTree = "<group>"; };
+		18A18B7D16FF9554009E43B0 /* common_TabDownUnSelectedLeft.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabDownUnSelectedLeft.tiff; sourceTree = "<group>"; };
+		18A18B7E16FF9554009E43B0 /* common_TabDownUnSelectedRight.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabDownUnSelectedRight.tiff; sourceTree = "<group>"; };
+		18A18B7F16FF9554009E43B0 /* common_TabDownUnSelectedToSelectedJunction.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabDownUnSelectedToSelectedJunction.tiff; sourceTree = "<group>"; };
+		18A18B8016FF9554009E43B0 /* common_TabSelectedLeft.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabSelectedLeft.tiff; sourceTree = "<group>"; };
+		18A18B8116FF9554009E43B0 /* common_TabSelectedRight.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabSelectedRight.tiff; sourceTree = "<group>"; };
+		18A18B8216FF9554009E43B0 /* common_TabSelectedToUnSelectedJunction.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabSelectedToUnSelectedJunction.tiff; sourceTree = "<group>"; };
+		18A18B8316FF9554009E43B0 /* common_TabUnSelectToSelectedJunction.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabUnSelectToSelectedJunction.tiff; sourceTree = "<group>"; };
+		18A18B8416FF9554009E43B0 /* common_TabUnSelectedJunction.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabUnSelectedJunction.tiff; sourceTree = "<group>"; };
+		18A18B8516FF9554009E43B0 /* common_TabUnSelectedLeft.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabUnSelectedLeft.tiff; sourceTree = "<group>"; };
+		18A18B8616FF9554009E43B0 /* common_TabUnSelectedRight.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_TabUnSelectedRight.tiff; sourceTree = "<group>"; };
+		18A18B8716FF9554009E43B0 /* common_Tile.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Tile.tiff; sourceTree = "<group>"; };
+		18A18B8816FF9554009E43B0 /* common_ToolbarClippedItemsMark.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ToolbarClippedItemsMark.tiff; sourceTree = "<group>"; };
+		18A18B8916FF9554009E43B0 /* common_ToolbarCustomizeToolbarItem.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ToolbarCustomizeToolbarItem.tiff; sourceTree = "<group>"; };
+		18A18B8A16FF9554009E43B0 /* common_ToolbarSeparatorItem.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ToolbarSeparatorItem.tiff; sourceTree = "<group>"; };
+		18A18B8B16FF9554009E43B0 /* common_ToolbarShowColorsItem.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ToolbarShowColorsItem.tiff; sourceTree = "<group>"; };
+		18A18B8C16FF9554009E43B0 /* common_ToolbarShowFontsItem.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ToolbarShowFontsItem.tiff; sourceTree = "<group>"; };
+		18A18B8D16FF9554009E43B0 /* common_ToolbarSpaceItem.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ToolbarSpaceItem.tiff; sourceTree = "<group>"; };
+		18A18B8E16FF9554009E43B0 /* common_Unknown.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Unknown.tiff; sourceTree = "<group>"; };
+		18A18B8F16FF9554009E43B0 /* common_UnknownApplication.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_UnknownApplication.tiff; sourceTree = "<group>"; };
+		18A18B9016FF9554009E43B0 /* common_UnknownTool.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_UnknownTool.tiff; sourceTree = "<group>"; };
+		18A18B9116FF9554009E43B0 /* common_Unmount.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_Unmount.tiff; sourceTree = "<group>"; };
+		18A18B9216FF9554009E43B0 /* common_UpAndDownArrowSmall.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_UpAndDownArrowSmall.tiff; sourceTree = "<group>"; };
+		18A18B9316FF9554009E43B0 /* common_copyCursor.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_copyCursor.tiff; sourceTree = "<group>"; };
+		18A18B9416FF9554009E43B0 /* common_linkCursor.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_linkCursor.tiff; sourceTree = "<group>"; };
+		18A18B9516FF9554009E43B0 /* common_noCursor.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_noCursor.tiff; sourceTree = "<group>"; };
+		18A18B9616FF9554009E43B0 /* common_outlineCollapsed.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_outlineCollapsed.tiff; sourceTree = "<group>"; };
+		18A18B9716FF9554009E43B0 /* common_outlineExpanded.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_outlineExpanded.tiff; sourceTree = "<group>"; };
+		18A18B9816FF9554009E43B0 /* common_outlineUnexpandable.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_outlineUnexpandable.tiff; sourceTree = "<group>"; };
+		18A18B9916FF9554009E43B0 /* common_ret.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_ret.tiff; sourceTree = "<group>"; };
+		18A18B9A16FF9554009E43B0 /* common_retH.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = common_retH.tiff; sourceTree = "<group>"; };
+		18A18B9B16FF9554009E43B0 /* nsmapping.strings */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; path = nsmapping.strings; sourceTree = "<group>"; };
+		18A18B9C16FF9554009E43B0 /* page_landscape.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = page_landscape.tiff; sourceTree = "<group>"; };
+		18A18B9D16FF9554009E43B0 /* page_portrait.tiff */ = {isa = PBXFileReference; lastKnownFileType = image.tiff; path = page_portrait.tiff; sourceTree = "<group>"; };
+		18A18B9F16FF9564009E43B0 /* DefaultKeyBindings.dict */ = {isa = PBXFileReference; lastKnownFileType = text.plist; path = DefaultKeyBindings.dict; sourceTree = "<group>"; };
+		18A18BA016FF9564009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18BA216FF9571009E43B0 /* .cvsignore */ = {isa = PBXFileReference; lastKnownFileType = text; path = .cvsignore; sourceTree = "<group>"; };
+		18A18BA316FF9571009E43B0 /* Controller.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = Controller.h; sourceTree = "<group>"; };
+		18A18BA416FF9571009E43B0 /* Controller.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = Controller.m; sourceTree = "<group>"; };
+		18A18BA516FF9571009E43B0 /* GMAppKit.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GMAppKit.m; sourceTree = "<group>"; };
+		18A18BA616FF9571009E43B0 /* GMArchiveObjects.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GMArchiveObjects.m; sourceTree = "<group>"; };
+		18A18BA716FF9571009E43B0 /* GMArchiver.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GMArchiver.m; sourceTree = "<group>"; };
+		18A18BA816FF9571009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18BA916FF9571009E43B0 /* GNUmakefile.postamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.postamble; sourceTree = "<group>"; };
+		18A18BAA16FF9571009E43B0 /* IBClasses.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = IBClasses.h; sourceTree = "<group>"; };
+		18A18BAB16FF9571009E43B0 /* IBClasses.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = IBClasses.m; sourceTree = "<group>"; };
+		18A18BAC16FF9571009E43B0 /* IMConnectors.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = IMConnectors.h; sourceTree = "<group>"; };
+		18A18BAD16FF9571009E43B0 /* IMConnectors.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = IMConnectors.m; sourceTree = "<group>"; };
+		18A18BAE16FF9571009E43B0 /* IMCustomObject.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = IMCustomObject.m; sourceTree = "<group>"; };
+		18A18BAF16FF9571009E43B0 /* IMLoading.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = IMLoading.m; sourceTree = "<group>"; };
+		18A18BB016FF9571009E43B0 /* Translator.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = Translator.h; sourceTree = "<group>"; };
+		18A18BB116FF9571009E43B0 /* Translator.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = Translator.m; sourceTree = "<group>"; };
+		18A18BB216FF9571009E43B0 /* libgmodel.bundle */ = {isa = PBXFileReference; lastKnownFileType = "wrapper.plug-in"; path = libgmodel.bundle; sourceTree = "<group>"; };
+		18A18BB316FF9571009E43B0 /* nib2gmodel.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = nib2gmodel.m; sourceTree = "<group>"; };
+		18A18BB616FF9571009E43B0 /* GMAppKit.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = GMAppKit.m.d; sourceTree = "<group>"; };
+		18A18BB716FF9571009E43B0 /* GMAppKit.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = GMAppKit.m.o; sourceTree = "<group>"; };
+		18A18BB816FF9571009E43B0 /* GMArchiver.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = GMArchiver.m.d; sourceTree = "<group>"; };
+		18A18BB916FF9571009E43B0 /* GMArchiver.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = GMArchiver.m.o; sourceTree = "<group>"; };
+		18A18BBA16FF9571009E43B0 /* IMConnectors.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = IMConnectors.m.d; sourceTree = "<group>"; };
+		18A18BBB16FF9571009E43B0 /* IMConnectors.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = IMConnectors.m.o; sourceTree = "<group>"; };
+		18A18BBC16FF9571009E43B0 /* IMCustomObject.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = IMCustomObject.m.d; sourceTree = "<group>"; };
+		18A18BBD16FF9571009E43B0 /* IMCustomObject.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = IMCustomObject.m.o; sourceTree = "<group>"; };
+		18A18BBE16FF9571009E43B0 /* IMLoading.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = IMLoading.m.d; sourceTree = "<group>"; };
+		18A18BBF16FF9571009E43B0 /* IMLoading.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = IMLoading.m.o; sourceTree = "<group>"; };
+		18A18BC016FF9571009E43B0 /* test.gmodel */ = {isa = PBXFileReference; lastKnownFileType = text; path = test.gmodel; sourceTree = "<group>"; };
+		18A18BC116FF9571009E43B0 /* test.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = test.m; sourceTree = "<group>"; };
+		18A18BC216FF9571009E43B0 /* test.nib */ = {isa = PBXFileReference; lastKnownFileType = wrapper.nib; path = test.nib; sourceTree = "<group>"; };
+		18A18BC416FF9587009E43B0 /* ColorPanel.gmodel */ = {isa = PBXFileReference; lastKnownFileType = text; path = ColorPanel.gmodel; sourceTree = "<group>"; };
+		18A18BC616FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BC716FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BC816FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BCA16FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BCB16FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BCC16FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BCE16FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BCF16FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BD016FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BD216FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BD316FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BD416FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BD616FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BD716FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BD916FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BDA16FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BDB16FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BDC16FF9587009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18BDD16FF9587009E43B0 /* GNUmakefile.postamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.postamble; sourceTree = "<group>"; };
+		18A18BDE16FF9587009E43B0 /* SavePanel.gmodel */ = {isa = PBXFileReference; lastKnownFileType = text; path = SavePanel.gmodel; sourceTree = "<group>"; };
+		18A18BE016FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BE116FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BE216FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BE416FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BE516FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BE616FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BE816FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BE916FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BEA16FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BEC16FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BED16FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BEE16FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BF016FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BF116FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BF216FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BF416FF9587009E43B0 /* data.classes */ = {isa = PBXFileReference; lastKnownFileType = text; path = data.classes; sourceTree = "<group>"; };
+		18A18BF516FF9587009E43B0 /* data.info */ = {isa = PBXFileReference; lastKnownFileType = file; path = data.info; sourceTree = "<group>"; };
+		18A18BF616FF9587009E43B0 /* objects.gorm */ = {isa = PBXFileReference; lastKnownFileType = file; path = objects.gorm; sourceTree = "<group>"; };
+		18A18BF916FF9598009E43B0 /* English */ = {isa = PBXFileReference; lastKnownFileType = text; name = English; path = "English.lproj/Generic-PostScript_Printer-Postscript.ppd"; sourceTree = "<group>"; };
+		18A18BFA16FF9598009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18BFB16FF9598009E43B0 /* GNUmakefile.postamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.postamble; sourceTree = "<group>"; };
+		18A18BFC16FF9598009E43B0 /* GSProlog.ps */ = {isa = PBXFileReference; lastKnownFileType = text; path = GSProlog.ps; sourceTree = "<group>"; };
+		18A18BFE16FF95A8009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C0016FF95A8009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C0116FF95A8009E43B0 /* GNUmakefile.postamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.postamble; sourceTree = "<group>"; };
+		18A18C0216FF95A8009E43B0 /* GNUmakefile.preamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.preamble; sourceTree = "<group>"; };
+		18A18C0316FF95A8009E43B0 /* GSCUPSPageLayout.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSCUPSPageLayout.h; sourceTree = "<group>"; };
+		18A18C0416FF95A8009E43B0 /* GSCUPSPageLayout.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSCUPSPageLayout.m; sourceTree = "<group>"; };
+		18A18C0516FF95A8009E43B0 /* GSCUPSPrincipalClass.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSCUPSPrincipalClass.h; sourceTree = "<group>"; };
+		18A18C0616FF95A8009E43B0 /* GSCUPSPrincipalClass.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSCUPSPrincipalClass.m; sourceTree = "<group>"; };
+		18A18C0716FF95A8009E43B0 /* GSCUPSPrintInfo.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSCUPSPrintInfo.h; sourceTree = "<group>"; };
+		18A18C0816FF95A8009E43B0 /* GSCUPSPrintInfo.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSCUPSPrintInfo.m; sourceTree = "<group>"; };
+		18A18C0916FF95A8009E43B0 /* GSCUPSPrintOperation.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSCUPSPrintOperation.h; sourceTree = "<group>"; };
+		18A18C0A16FF95A8009E43B0 /* GSCUPSPrintOperation.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSCUPSPrintOperation.m; sourceTree = "<group>"; };
+		18A18C0B16FF95A8009E43B0 /* GSCUPSPrintPanel.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSCUPSPrintPanel.h; sourceTree = "<group>"; };
+		18A18C0C16FF95A8009E43B0 /* GSCUPSPrintPanel.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSCUPSPrintPanel.m; sourceTree = "<group>"; };
+		18A18C0D16FF95A8009E43B0 /* GSCUPSPrinter.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSCUPSPrinter.h; sourceTree = "<group>"; };
+		18A18C0E16FF95A8009E43B0 /* GSCUPSPrinter.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSCUPSPrinter.m; sourceTree = "<group>"; };
+		18A18C1016FF95A8009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C1116FF95A8009E43B0 /* GNUmakefile.postamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.postamble; sourceTree = "<group>"; };
+		18A18C1216FF95A8009E43B0 /* GNUmakefile.preamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.preamble; sourceTree = "<group>"; };
+		18A18C1316FF95A8009E43B0 /* GSLPR.bundle */ = {isa = PBXFileReference; lastKnownFileType = "wrapper.plug-in"; path = GSLPR.bundle; sourceTree = "<group>"; };
+		18A18C1416FF95A8009E43B0 /* GSLPRPageLayout.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSLPRPageLayout.h; sourceTree = "<group>"; };
+		18A18C1516FF95A8009E43B0 /* GSLPRPageLayout.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSLPRPageLayout.m; sourceTree = "<group>"; };
+		18A18C1616FF95A8009E43B0 /* GSLPRPrincipalClass.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSLPRPrincipalClass.h; sourceTree = "<group>"; };
+		18A18C1716FF95A8009E43B0 /* GSLPRPrincipalClass.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSLPRPrincipalClass.m; sourceTree = "<group>"; };
+		18A18C1816FF95A8009E43B0 /* GSLPRPrintInfo.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSLPRPrintInfo.h; sourceTree = "<group>"; };
+		18A18C1916FF95A8009E43B0 /* GSLPRPrintInfo.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSLPRPrintInfo.m; sourceTree = "<group>"; };
+		18A18C1A16FF95A8009E43B0 /* GSLPRPrintOperation.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSLPRPrintOperation.h; sourceTree = "<group>"; };
+		18A18C1B16FF95A8009E43B0 /* GSLPRPrintOperation.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSLPRPrintOperation.m; sourceTree = "<group>"; };
+		18A18C1C16FF95A8009E43B0 /* GSLPRPrintPanel.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSLPRPrintPanel.h; sourceTree = "<group>"; };
+		18A18C1D16FF95A8009E43B0 /* GSLPRPrintPanel.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSLPRPrintPanel.m; sourceTree = "<group>"; };
+		18A18C1E16FF95A8009E43B0 /* GSLPRPrinter.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSLPRPrinter.h; sourceTree = "<group>"; };
+		18A18C1F16FF95A8009E43B0 /* GSLPRPrinter.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSLPRPrinter.m; sourceTree = "<group>"; };
+		18A18C2216FF95A8009E43B0 /* GSLPRPageLayout.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = GSLPRPageLayout.m.d; sourceTree = "<group>"; };
+		18A18C2316FF95A8009E43B0 /* GSLPRPageLayout.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = GSLPRPageLayout.m.o; sourceTree = "<group>"; };
+		18A18C2416FF95A8009E43B0 /* GSLPRPrincipalClass.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = GSLPRPrincipalClass.m.d; sourceTree = "<group>"; };
+		18A18C2516FF95A8009E43B0 /* GSLPRPrincipalClass.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = GSLPRPrincipalClass.m.o; sourceTree = "<group>"; };
+		18A18C2616FF95A8009E43B0 /* GSLPRPrintInfo.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = GSLPRPrintInfo.m.d; sourceTree = "<group>"; };
+		18A18C2716FF95A8009E43B0 /* GSLPRPrintInfo.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = GSLPRPrintInfo.m.o; sourceTree = "<group>"; };
+		18A18C2816FF95A8009E43B0 /* GSLPRPrintOperation.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = GSLPRPrintOperation.m.d; sourceTree = "<group>"; };
+		18A18C2916FF95A8009E43B0 /* GSLPRPrintOperation.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = GSLPRPrintOperation.m.o; sourceTree = "<group>"; };
+		18A18C2A16FF95A8009E43B0 /* GSLPRPrintPanel.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = GSLPRPrintPanel.m.d; sourceTree = "<group>"; };
+		18A18C2B16FF95A8009E43B0 /* GSLPRPrintPanel.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = GSLPRPrintPanel.m.o; sourceTree = "<group>"; };
+		18A18C2C16FF95A8009E43B0 /* GSLPRPrinter.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = GSLPRPrinter.m.d; sourceTree = "<group>"; };
+		18A18C2D16FF95A8009E43B0 /* GSLPRPrinter.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = GSLPRPrinter.m.o; sourceTree = "<group>"; };
+		18A18C3016FF95B6009E43B0 /* English */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = English; path = English.lproj/Localizable.strings; sourceTree = "<group>"; };
+		18A18C3116FF95B6009E43B0 /* Esperanto */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = Esperanto; path = Esperanto.lproj/Localizable.strings; sourceTree = "<group>"; };
+		18A18C3216FF95B6009E43B0 /* French */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = French; path = French.lproj/Localizable.strings; sourceTree = "<group>"; };
+		18A18C3316FF95B6009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C3416FF95B6009E43B0 /* German */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = German; path = German.lproj/Localizable.strings; sourceTree = "<group>"; };
+		18A18C3516FF95B6009E43B0 /* Italian */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = Italian; path = Italian.lproj/Localizable.strings; sourceTree = "<group>"; };
+		18A18C3616FF95B6009E43B0 /* Lojban */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = Lojban; path = Lojban.lproj/Localizable.strings; sourceTree = "<group>"; };
+		18A18C3716FF95B6009E43B0 /* Spanish */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = Spanish; path = Spanish.lproj/Localizable.strings; sourceTree = "<group>"; };
+		18A18C3916FF95BF009E43B0 /* Basso.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Basso.wav; sourceTree = "<group>"; };
+		18A18C3A16FF95BF009E43B0 /* Blow.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Blow.wav; sourceTree = "<group>"; };
+		18A18C3B16FF95BF009E43B0 /* Bottle.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Bottle.wav; sourceTree = "<group>"; };
+		18A18C3C16FF95BF009E43B0 /* Frog.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Frog.wav; sourceTree = "<group>"; };
+		18A18C3D16FF95BF009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C3E16FF95BF009E43B0 /* Glass.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Glass.wav; sourceTree = "<group>"; };
+		18A18C3F16FF95BF009E43B0 /* Hero.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Hero.wav; sourceTree = "<group>"; };
+		18A18C4016FF95BF009E43B0 /* Ping.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Ping.wav; sourceTree = "<group>"; };
+		18A18C4116FF95BF009E43B0 /* Pop.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Pop.wav; sourceTree = "<group>"; };
+		18A18C4216FF95BF009E43B0 /* Sosumi.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Sosumi.wav; sourceTree = "<group>"; };
+		18A18C4316FF95BF009E43B0 /* Submarine.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Submarine.wav; sourceTree = "<group>"; };
+		18A18C4416FF95BF009E43B0 /* Tink.wav */ = {isa = PBXFileReference; lastKnownFileType = audio.wav; path = Tink.wav; sourceTree = "<group>"; };
+		18A18C4616FF95CC009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C4816FF95CC009E43B0 /* GNUmakefile.postamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.postamble; sourceTree = "<group>"; };
+		18A18C4916FF95CC009E43B0 /* GNUmakefile.super */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.super; sourceTree = "<group>"; };
+		18A18C4B16FF95CD009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C4C16FF95CD009E43B0 /* basic.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = basic.m; sourceTree = "<group>"; };
+		18A18C4D16FF95CD009E43B0 /* bounds.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = bounds.m; sourceTree = "<group>"; };
+		18A18C4E16FF95CD009E43B0 /* windingCountAtPoint.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = windingCountAtPoint.m; sourceTree = "<group>"; };
+		18A18C5016FF95CD009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C5116FF95CD009E43B0 /* basic.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = basic.m; sourceTree = "<group>"; };
+		18A18C5216FF95CD009E43B0 /* objectValue.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = objectValue.m; sourceTree = "<group>"; };
+		18A18C5416FF95CD009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C5516FF95CD009E43B0 /* delta.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = delta.m; sourceTree = "<group>"; };
+		18A18C5716FF95CD009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C5816FF95CD009E43B0 /* basic.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = basic.m; sourceTree = "<group>"; };
+		18A18C5A16FF95CD009E43B0 /* NSParagraphStyle_defaultWritingDirection.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = NSParagraphStyle_defaultWritingDirection.m; sourceTree = "<group>"; };
+		18A18C5B16FF95CD009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C5D16FF95CD009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C5E16FF95CD009E43B0 /* lazy_copy.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = lazy_copy.m; sourceTree = "<group>"; };
+		18A18C6016FF95D0009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C6116FF95D0009E43B0 /* defaultSelection.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = defaultSelection.m; sourceTree = "<group>"; };
+		18A18C6316FF95D0009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C6416FF95D0009E43B0 /* sharedPrintInfo.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = sharedPrintInfo.m; sourceTree = "<group>"; };
+		18A18C6616FF95D0009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C6816FF95D0009E43B0 /* A */ = {isa = PBXFileReference; lastKnownFileType = text; path = A; sourceTree = "<group>"; };
+		18A18C6916FF95D0009E43B0 /* B */ = {isa = PBXFileReference; lastKnownFileType = text; path = B; sourceTree = "<group>"; };
+		18A18C6A16FF95D0009E43B0 /* setDelegate_reload.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = setDelegate_reload.m; sourceTree = "<group>"; };
+		18A18C6C16FF95D0009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C6D16FF95D0009E43B0 /* minMax.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = minMax.m; sourceTree = "<group>"; };
+		18A18C6F16FF95D0009E43B0 /* NSView_autoresize_and_rounding.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = NSView_autoresize_and_rounding.m; sourceTree = "<group>"; };
+		18A18C7016FF95D0009E43B0 /* NSView_bounds_scale.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = NSView_bounds_scale.m; sourceTree = "<group>"; };
+		18A18C7116FF95D0009E43B0 /* NSView_convertRect.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = NSView_convertRect.m; sourceTree = "<group>"; };
+		18A18C7216FF95D0009E43B0 /* NSView_frame_bounds.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = NSView_frame_bounds.m; sourceTree = "<group>"; };
+		18A18C7316FF95D0009E43B0 /* NSView_frame_rotation.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = NSView_frame_rotation.m; sourceTree = "<group>"; };
+		18A18C7416FF95D0009E43B0 /* NSView_visibleRect.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = NSView_visibleRect.m; sourceTree = "<group>"; };
+		18A18C7516FF95D0009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C7616FF95D0009E43B0 /* scrollRectToVisible.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = scrollRectToVisible.m; sourceTree = "<group>"; };
+		18A18C7716FF95D0009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C7916FF95D0009E43B0 /* TestInfo */ = {isa = PBXFileReference; lastKnownFileType = text; path = TestInfo; sourceTree = "<group>"; };
+		18A18C7A16FF95D0009E43B0 /* deallocation.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = deallocation.m; sourceTree = "<group>"; };
+		18A18C7B16FF95D0009E43B0 /* repeatedAttachmentCellHeight.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = repeatedAttachmentCellHeight.m; sourceTree = "<group>"; };
+		18A18C7D16FF95DD009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C7F16FF95DD009E43B0 /* .cvsignore */ = {isa = PBXFileReference; lastKnownFileType = text; path = .cvsignore; sourceTree = "<group>"; };
+		18A18C8016FF95DD009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C8116FF95DD009E43B0 /* GNUmakefile.postamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.postamble; sourceTree = "<group>"; };
+		18A18C8216FF95DD009E43B0 /* GNUmakefile.preamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.preamble; sourceTree = "<group>"; };
+		18A18C8316FF95DD009E43B0 /* RTFConsumer.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = RTFConsumer.h; sourceTree = "<group>"; };
+		18A18C8416FF95DD009E43B0 /* RTFConsumer.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = RTFConsumer.m; sourceTree = "<group>"; };
+		18A18C8516FF95DD009E43B0 /* RTFConsumerFunctions.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = RTFConsumerFunctions.h; sourceTree = "<group>"; };
+		18A18C8616FF95DD009E43B0 /* RTFConverter.bundle */ = {isa = PBXFileReference; lastKnownFileType = "wrapper.plug-in"; path = RTFConverter.bundle; sourceTree = "<group>"; };
+		18A18C8716FF95DD009E43B0 /* RTFProducer.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = RTFProducer.h; sourceTree = "<group>"; };
+		18A18C8816FF95DD009E43B0 /* RTFProducer.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = RTFProducer.m; sourceTree = "<group>"; };
+		18A18C8B16FF95DD009E43B0 /* RTFConsumer.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = RTFConsumer.m.d; sourceTree = "<group>"; };
+		18A18C8C16FF95DD009E43B0 /* RTFConsumer.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = RTFConsumer.m.o; sourceTree = "<group>"; };
+		18A18C8D16FF95DD009E43B0 /* RTFProducer.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = RTFProducer.m.d; sourceTree = "<group>"; };
+		18A18C8E16FF95DD009E43B0 /* RTFProducer.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = RTFProducer.m.o; sourceTree = "<group>"; };
+		18A18C8F16FF95DD009E43B0 /* rtfGrammar.tab.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = rtfGrammar.tab.m.d; sourceTree = "<group>"; };
+		18A18C9016FF95DD009E43B0 /* rtfGrammar.tab.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = rtfGrammar.tab.m.o; sourceTree = "<group>"; };
+		18A18C9116FF95DD009E43B0 /* rtfScanner.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = rtfScanner.m.d; sourceTree = "<group>"; };
+		18A18C9216FF95DD009E43B0 /* rtfScanner.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = rtfScanner.m.o; sourceTree = "<group>"; };
+		18A18C9316FF95DD009E43B0 /* rtfGrammar.tab.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = rtfGrammar.tab.h; sourceTree = "<group>"; };
+		18A18C9416FF95DD009E43B0 /* rtfGrammar.tab.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = rtfGrammar.tab.m; sourceTree = "<group>"; };
+		18A18C9516FF95DD009E43B0 /* rtfGrammar.y */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.yacc; path = rtfGrammar.y; sourceTree = "<group>"; };
+		18A18C9616FF95DD009E43B0 /* rtfScanner.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = rtfScanner.h; sourceTree = "<group>"; };
+		18A18C9716FF95DD009E43B0 /* rtfScanner.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = rtfScanner.m; sourceTree = "<group>"; };
+		18A18C9916FF95E8009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C9B16FF95F1009E43B0 /* .cvsignore */ = {isa = PBXFileReference; lastKnownFileType = text; path = .cvsignore; sourceTree = "<group>"; };
+		18A18C9C16FF95F1009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18C9D16FF95F1009E43B0 /* GNUmakefile.postamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.postamble; sourceTree = "<group>"; };
+		18A18C9E16FF95F1009E43B0 /* GNUmakefile.preamble */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile.preamble; sourceTree = "<group>"; };
+		18A18C9F16FF95F1009E43B0 /* GSspell.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSspell.m; sourceTree = "<group>"; };
+		18A18CA116FF95F1009E43B0 /* GSspell */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.executable"; path = GSspell; sourceTree = "<group>"; };
+		18A18CA316FF95F1009E43B0 /* Info-gnustep.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist; path = "Info-gnustep.plist"; sourceTree = "<group>"; };
+		18A18CA416FF95F1009E43B0 /* GSspellInfo.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist; path = GSspellInfo.plist; sourceTree = "<group>"; };
+		18A18CA516FF95F1009E43B0 /* gclose.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = gclose.m; sourceTree = "<group>"; };
+		18A18CA616FF95F1009E43B0 /* gcloseall.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = gcloseall.m; sourceTree = "<group>"; };
+		18A18CA716FF95F1009E43B0 /* gopen.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = gopen.m; sourceTree = "<group>"; };
+		18A18CA816FF95F1009E43B0 /* make_services.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = make_services.m; sourceTree = "<group>"; };
+		18A18CAB16FF95F1009E43B0 /* GSspell.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = GSspell.m.d; sourceTree = "<group>"; };
+		18A18CAC16FF95F1009E43B0 /* GSspell.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = GSspell.m.o; sourceTree = "<group>"; };
+		18A18CAD16FF95F1009E43B0 /* gclose */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.executable"; path = gclose; sourceTree = "<group>"; };
+		18A18CAF16FF95F1009E43B0 /* gclose.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = gclose.m.d; sourceTree = "<group>"; };
+		18A18CB016FF95F1009E43B0 /* gclose.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = gclose.m.o; sourceTree = "<group>"; };
+		18A18CB116FF95F2009E43B0 /* gcloseall */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.executable"; path = gcloseall; sourceTree = "<group>"; };
+		18A18CB316FF95F2009E43B0 /* gcloseall.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = gcloseall.m.d; sourceTree = "<group>"; };
+		18A18CB416FF95F2009E43B0 /* gcloseall.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = gcloseall.m.o; sourceTree = "<group>"; };
+		18A18CB516FF95F2009E43B0 /* gopen */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.executable"; path = gopen; sourceTree = "<group>"; };
+		18A18CB716FF95F2009E43B0 /* gopen.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = gopen.m.d; sourceTree = "<group>"; };
+		18A18CB816FF95F2009E43B0 /* gopen.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = gopen.m.o; sourceTree = "<group>"; };
+		18A18CB916FF95F2009E43B0 /* make_services */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.executable"; path = make_services; sourceTree = "<group>"; };
+		18A18CBB16FF95F2009E43B0 /* make_services.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = make_services.m.d; sourceTree = "<group>"; };
+		18A18CBC16FF95F2009E43B0 /* make_services.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = make_services.m.o; sourceTree = "<group>"; };
+		18A18CBD16FF95F2009E43B0 /* set_show_service */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.executable"; path = set_show_service; sourceTree = "<group>"; };
+		18A18CBF16FF95F2009E43B0 /* set_show_service.m.d */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.dtrace; path = set_show_service.m.d; sourceTree = "<group>"; };
+		18A18CC016FF95F2009E43B0 /* set_show_service.m.o */ = {isa = PBXFileReference; lastKnownFileType = "compiled.mach-o.objfile"; path = set_show_service.m.o; sourceTree = "<group>"; };
+		18A18CC216FF95F2009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18CC316FF95F2009E43B0 /* say.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = say.m; sourceTree = "<group>"; };
+		18A18CC416FF95F2009E43B0 /* set_show_service.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = set_show_service.m; sourceTree = "<group>"; };
+		18A18CC616FF95F2009E43B0 /* AudioOutputSink.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = AudioOutputSink.m; sourceTree = "<group>"; };
+		18A18CC716FF95F2009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18CC816FF95F2009E43B0 /* GSOSSSoundSink.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSOSSSoundSink.m; sourceTree = "<group>"; };
+		18A18CC916FF95F2009E43B0 /* SndfileSource.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = SndfileSource.m; sourceTree = "<group>"; };
+		18A18CCB16FF95F2009E43B0 /* FliteSpeechEngine.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = FliteSpeechEngine.m; sourceTree = "<group>"; };
+		18A18CCC16FF95F2009E43B0 /* GNUmakefile */ = {isa = PBXFileReference; lastKnownFileType = text; path = GNUmakefile; sourceTree = "<group>"; };
+		18A18CCD16FF95F2009E43B0 /* GSSpeechEngine.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSSpeechEngine.h; sourceTree = "<group>"; };
+		18A18CCE16FF95F2009E43B0 /* GSSpeechEngine.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSSpeechEngine.m; sourceTree = "<group>"; };
+		18A18CCF16FF95F2009E43B0 /* GSSpeechServer.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSSpeechServer.h; sourceTree = "<group>"; };
+		18A18CD016FF95F2009E43B0 /* GSSpeechServer.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSSpeechServer.m; sourceTree = "<group>"; };
+		18A18CD116FF95F2009E43B0 /* GSSpeechSynthesizer.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GSSpeechSynthesizer.h; sourceTree = "<group>"; };
+		18A18CD216FF95F2009E43B0 /* GSSpeechSynthesizer.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = GSSpeechSynthesizer.m; sourceTree = "<group>"; };
+		18A18CD316FF95F2009E43B0 /* main.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = main.m; sourceTree = "<group>"; };
+		18A18CD416FF95F2009E43B0 /* wgetopt.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = wgetopt.h; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		187527F1169ED7BA001C1D58 /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				18752B80169EEABF001C1D58 /* libobjc.dylib in Frameworks */,
+				18752B84169EEAF4001C1D58 /* libgnustep-base.1.24.2.dylib in Frameworks */,
+				18752B96169EEC61001C1D58 /* libpng.dylib in Frameworks */,
+				18752B94169EEC56001C1D58 /* libjpeg.dylib in Frameworks */,
+				18752B92169EEC3F001C1D58 /* libtiff.dylib in Frameworks */,
+				18752B90169EEC24001C1D58 /* libicuuc.48.1.dylib in Frameworks */,
+				18752B97169EEC7C001C1D58 /* libgif.4.dylib in Frameworks */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		187527E9169ED7BA001C1D58 = {
+			isa = PBXGroup;
+			children = (
+				187527FE169ED7BA001C1D58 /* ApplicationKit */,
+				187527F7169ED7BA001C1D58 /* Frameworks */,
+				187527F6169ED7BA001C1D58 /* Products */,
+				18752B95169EEC61001C1D58 /* libpng.dylib */,
+				18752B93169EEC56001C1D58 /* libjpeg.dylib */,
+				18752B91169EEC3F001C1D58 /* libtiff.dylib */,
+				18752B8F169EEC24001C1D58 /* libicuuc.48.1.dylib */,
+				18752B8D169EEBC3001C1D58 /* libgif.4.dylib */,
+				18752B8B169EEBA1001C1D58 /* libjpeg.8.dylib */,
+				18752B89169EEB85001C1D58 /* libpng15.15.dylib */,
+				18752B87169EEB56001C1D58 /* libtiff.3.dylib */,
+				18752B85169EEB0A001C1D58 /* libicucore.A.dylib */,
+				18752B83169EEAF4001C1D58 /* libgnustep-base.1.24.2.dylib */,
+				18752B81169EEAD7001C1D58 /* libFoundation.dylib */,
+				18752B7F169EEABF001C1D58 /* libobjc.dylib */,
+			);
+			sourceTree = "<group>";
+		};
+		187527F6169ED7BA001C1D58 /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				187527F5169ED7BA001C1D58 /* AppKit.framework */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		187527F7169ED7BA001C1D58 /* Frameworks */ = {
+			isa = PBXGroup;
+			children = (
+				187527F8169ED7BA001C1D58 /* Cocoa.framework */,
+				187527FA169ED7BA001C1D58 /* Other Frameworks */,
+			);
+			name = Frameworks;
+			sourceTree = "<group>";
+		};
+		187527FA169ED7BA001C1D58 /* Other Frameworks */ = {
+			isa = PBXGroup;
+			children = (
+				187527FB169ED7BA001C1D58 /* AppKit.framework */,
+				187527FC169ED7BA001C1D58 /* CoreData.framework */,
+				187527FD169ED7BA001C1D58 /* Foundation.framework */,
+			);
+			name = "Other Frameworks";
+			sourceTree = "<group>";
+		};
+		187527FE169ED7BA001C1D58 /* ApplicationKit */ = {
+			isa = PBXGroup;
+			children = (
+				1875281B169EE4A8001C1D58 /* Headers */,
+				18A18B1F16FF953F009E43B0 /* Images */,
+				18A18B9E16FF9554009E43B0 /* KeyBindings */,
+				18A18BA116FF9564009E43B0 /* Model */,
+				18A18BC316FF9571009E43B0 /* Panels */,
+				18A18BF716FF9587009E43B0 /* PrinterTypes */,
+				18A18BFD16FF9598009E43B0 /* Printing */,
+				18A18C2E16FF95A8009E43B0 /* Resources */,
+				18A18C3816FF95B6009E43B0 /* Sounds */,
+				187529AC169EE4B7001C1D58 /* Source */,
+				187527FF169ED7BA001C1D58 /* Supporting Files */,
+				18A18C4516FF95BF009E43B0 /* Tests */,
+				18A18C7C16FF95D0009E43B0 /* TextConverters */,
+				18A18C9816FF95DD009E43B0 /* Themes */,
+				18A18C9A16FF95E8009E43B0 /* Tools */,
+			);
+			path = ApplicationKit;
+			sourceTree = "<group>";
+		};
+		187527FF169ED7BA001C1D58 /* Supporting Files */ = {
+			isa = PBXGroup;
+			children = (
+				18A18B1B16FF94F4009E43B0 /* AppKit-Info.plist */,
+				18A18B1C16FF94F4009E43B0 /* AppKit-Prefix.pch */,
+				18752B98169EF420001C1D58 /* configure.ac */,
+			);
+			name = "Supporting Files";
+			sourceTree = "<group>";
+		};
+		1875281B169EE4A8001C1D58 /* Headers */ = {
+			isa = PBXGroup;
+			children = (
+				1875281C169EE4A8001C1D58 /* Additions */,
+				1875284E169EE4A8001C1D58 /* AppKit */,
+				187528E4169EE4A8001C1D58 /* Cocoa */,
+			);
+			path = Headers;
+			sourceTree = SOURCE_ROOT;
+		};
+		1875281C169EE4A8001C1D58 /* Additions */ = {
+			isa = PBXGroup;
+			children = (
+				1875281D169EE4A8001C1D58 /* GNUstepGUI */,
+			);
+			path = Additions;
+			sourceTree = "<group>";
+		};
+		1875281D169EE4A8001C1D58 /* GNUstepGUI */ = {
+			isa = PBXGroup;
+			children = (
+				1875281E169EE4A8001C1D58 /* .cvsignore */,
+				1875281F169EE4A8001C1D58 /* GMAppKit.h */,
+				18752820169EE4A8001C1D58 /* GMArchiver.h */,
+				18752821169EE4A8001C1D58 /* GSAnimator.h */,
+				18752822169EE4A8001C1D58 /* GSCharacterPanel.h */,
+				18752823169EE4A8001C1D58 /* GSDisplayServer.h */,
+				18752824169EE4A8001C1D58 /* GSDragView.h */,
+				18752825169EE4A8001C1D58 /* GSEPSPrintOperation.h */,
+				18752826169EE4A8001C1D58 /* GSFontInfo.h */,
+				18752827169EE4A8001C1D58 /* GSGhostscriptImageRep.h */,
+				18752828169EE4A8001C1D58 /* GSGormLoading.h */,
+				18752829169EE4A8001C1D58 /* GSHbox.h */,
+				1875282A169EE4A8001C1D58 /* GSHelpAttachment.h */,
+				1875282B169EE4A8001C1D58 /* GSHelpManagerPanel.h */,
+				1875282C169EE4A8001C1D58 /* GSHorizontalTypesetter.h */,
+				1875282D169EE4A8001C1D58 /* GSImageMagickImageRep.h */,
+				1875282E169EE4A8001C1D58 /* GSInfoPanel.h */,
+				1875282F169EE4A8001C1D58 /* GSInstantiator.h */,
+				18752830169EE4A8001C1D58 /* GSLayoutManager.h */,
+				18752831169EE4A8001C1D58 /* GSLayoutManager_internal.h */,
+				18752832169EE4A8001C1D58 /* GSMemoryPanel.h */,
+				18752833169EE4A8001C1D58 /* GSMethodTable.h */,
+				18752834169EE4A8001C1D58 /* GSModelLoaderFactory.h */,
+				18752835169EE4A8001C1D58 /* GSNibContainer.h */,
+				18752836169EE4A8001C1D58 /* GSNibLoading.h */,
+				18752837169EE4A8001C1D58 /* GSPDFPrintOperation.h */,
+				18752838169EE4A8001C1D58 /* GSPasteboardServer.h */,
+				18752839169EE4A8001C1D58 /* GSPrintOperation.h */,
+				1875283A169EE4A8001C1D58 /* GSPrinting.h */,
+				1875283B169EE4A8001C1D58 /* GSServicesManager.h */,
+				1875283C169EE4A8001C1D58 /* GSSoundSink.h */,
+				1875283D169EE4A8001C1D58 /* GSSoundSource.h */,
+				1875283E169EE4A8001C1D58 /* GSTable.h */,
+				1875283F169EE4A8001C1D58 /* GSTextConverter.h */,
+				18752840169EE4A8001C1D58 /* GSTheme.h */,
+				18752841169EE4A8001C1D58 /* GSTitleView.h */,
+				18752842169EE4A8001C1D58 /* GSToolbarView.h */,
+				18752843169EE4A8001C1D58 /* GSTrackingRect.h */,
+				18752844169EE4A8001C1D58 /* GSTypesetter.h */,
+				18752845169EE4A8001C1D58 /* GSVbox.h */,
+				18752846169EE4A8001C1D58 /* GSVersion.h */,
+				18752847169EE4A8001C1D58 /* GSVersion.h.in */,
+				18752848169EE4A8001C1D58 /* GSWindowDecorationView.h */,
+				18752849169EE4A8001C1D58 /* GSXibLoading.h */,
+				1875284A169EE4A8001C1D58 /* IMConnectors.h */,
+				1875284B169EE4A8001C1D58 /* IMCustomObject.h */,
+				1875284C169EE4A8001C1D58 /* IMLoading.h */,
+				1875284D169EE4A8001C1D58 /* config.h.in */,
+			);
+			path = GNUstepGUI;
+			sourceTree = "<group>";
+		};
+		1875284E169EE4A8001C1D58 /* AppKit */ = {
+			isa = PBXGroup;
+			children = (
+				1875284F169EE4A8001C1D58 /* AppKit.h */,
+				18752850169EE4A8001C1D58 /* AppKitDefines.h */,
+				18752851169EE4A8001C1D58 /* AppKitExceptions.h */,
+				18752852169EE4A8001C1D58 /* DPSOperators.h */,
+				18752853169EE4A8001C1D58 /* NSActionCell.h */,
+				18752854169EE4A8001C1D58 /* NSAffineTransform.h */,
+				18752855169EE4A8001C1D58 /* NSAlert.h */,
+				18752856169EE4A8001C1D58 /* NSAnimation.h */,
+				18752857169EE4A8001C1D58 /* NSApplication.h */,
+				18752858169EE4A8001C1D58 /* NSArrayController.h */,
+				18752859169EE4A8001C1D58 /* NSAttributedString.h */,
+				1875285A169EE4A8001C1D58 /* NSBezierPath.h */,
+				1875285B169EE4A8001C1D58 /* NSBitmapImageRep.h */,
+				1875285C169EE4A8001C1D58 /* NSBox.h */,
+				1875285D169EE4A8001C1D58 /* NSBrowser.h */,
+				1875285E169EE4A8001C1D58 /* NSBrowserCell.h */,
+				1875285F169EE4A8001C1D58 /* NSButton.h */,
+				18752860169EE4A8001C1D58 /* NSButtonCell.h */,
+				18752861169EE4A8001C1D58 /* NSCachedImageRep.h */,
+				18752862169EE4A8001C1D58 /* NSCell.h */,
+				18752863169EE4A8001C1D58 /* NSClipView.h */,
+				18752864169EE4A8001C1D58 /* NSColor.h */,
+				18752865169EE4A8001C1D58 /* NSColorList.h */,
+				18752866169EE4A8001C1D58 /* NSColorPanel.h */,
+				18752867169EE4A8001C1D58 /* NSColorPicker.h */,
+				18752868169EE4A8001C1D58 /* NSColorPicking.h */,
+				18752869169EE4A8001C1D58 /* NSColorSpace.h */,
+				1875286A169EE4A8001C1D58 /* NSColorWell.h */,
+				1875286B169EE4A8001C1D58 /* NSComboBox.h */,
+				1875286C169EE4A8001C1D58 /* NSComboBoxCell.h */,
+				1875286D169EE4A8001C1D58 /* NSControl.h */,
+				1875286E169EE4A8001C1D58 /* NSController.h */,
+				1875286F169EE4A8001C1D58 /* NSCursor.h */,
+				18752870169EE4A8001C1D58 /* NSCustomImageRep.h */,
+				18752871169EE4A8001C1D58 /* NSDataLink.h */,
+				18752872169EE4A8001C1D58 /* NSDataLinkManager.h */,
+				18752873169EE4A8001C1D58 /* NSDataLinkPanel.h */,
+				18752874169EE4A8001C1D58 /* NSDocument.h */,
+				18752875169EE4A8001C1D58 /* NSDocumentController.h */,
+				18752876169EE4A8001C1D58 /* NSDragging.h */,
+				18752877169EE4A8001C1D58 /* NSDrawer.h */,
+				18752878169EE4A8001C1D58 /* NSEPSImageRep.h */,
+				18752879169EE4A8001C1D58 /* NSEvent.h */,
+				1875287A169EE4A8001C1D58 /* NSFileWrapper.h */,
+				1875287B169EE4A8001C1D58 /* NSFont.h */,
+				1875287C169EE4A8001C1D58 /* NSFontDescriptor.h */,
+				1875287D169EE4A8001C1D58 /* NSFontManager.h */,
+				1875287E169EE4A8001C1D58 /* NSFontPanel.h */,
+				1875287F169EE4A8001C1D58 /* NSForm.h */,
+				18752880169EE4A8001C1D58 /* NSFormCell.h */,
+				18752881169EE4A8001C1D58 /* NSGlyphGenerator.h */,
+				18752882169EE4A8001C1D58 /* NSGradient.h */,
+				18752883169EE4A8001C1D58 /* NSGraphics.h */,
+				18752884169EE4A8001C1D58 /* NSGraphicsContext.h */,
+				18752885169EE4A8001C1D58 /* NSHelpManager.h */,
+				18752886169EE4A8001C1D58 /* NSHelpPanel.h */,
+				18752887169EE4A8001C1D58 /* NSImage.h */,
+				18752888169EE4A8001C1D58 /* NSImageCell.h */,
+				18752889169EE4A8001C1D58 /* NSImageRep.h */,
+				1875288A169EE4A8001C1D58 /* NSImageView.h */,
+				1875288B169EE4A8001C1D58 /* NSInputManager.h */,
+				1875288C169EE4A8001C1D58 /* NSInputServer.h */,
+				1875288D169EE4A8001C1D58 /* NSInterfaceStyle.h */,
+				1875288E169EE4A8001C1D58 /* NSKeyValueBinding.h */,
+				1875288F169EE4A8001C1D58 /* NSLayoutManager.h */,
+				18752890169EE4A8001C1D58 /* NSLevelIndicator.h */,
+				18752891169EE4A8001C1D58 /* NSLevelIndicatorCell.h */,
+				18752892169EE4A8001C1D58 /* NSMatrix.h */,
+				18752893169EE4A8001C1D58 /* NSMenu.h */,
+				18752894169EE4A8001C1D58 /* NSMenuItem.h */,
+				18752895169EE4A8001C1D58 /* NSMenuItemCell.h */,
+				18752896169EE4A8001C1D58 /* NSMenuView.h */,
+				18752897169EE4A8001C1D58 /* NSMovie.h */,
+				18752898169EE4A8001C1D58 /* NSMovieView.h */,
+				18752899169EE4A8001C1D58 /* NSNib.h */,
+				1875289A169EE4A8001C1D58 /* NSNibConnector.h */,
+				1875289B169EE4A8001C1D58 /* NSNibDeclarations.h */,
+				1875289C169EE4A8001C1D58 /* NSNibLoading.h */,
+				1875289D169EE4A8001C1D58 /* NSObjectController.h */,
+				1875289E169EE4A8001C1D58 /* NSOpenGL.h */,
+				1875289F169EE4A8001C1D58 /* NSOpenGLView.h */,
+				187528A0169EE4A8001C1D58 /* NSOpenPanel.h */,
+				187528A1169EE4A8001C1D58 /* NSOutlineView.h */,
+				187528A2169EE4A8001C1D58 /* NSPageLayout.h */,
+				187528A3169EE4A8001C1D58 /* NSPanel.h */,
+				187528A4169EE4A8001C1D58 /* NSParagraphStyle.h */,
+				187528A5169EE4A8001C1D58 /* NSPasteboard.h */,
+				187528A6169EE4A8001C1D58 /* NSPopUpButton.h */,
+				187528A7169EE4A8001C1D58 /* NSPopUpButtonCell.h */,
+				187528A8169EE4A8001C1D58 /* NSPrintInfo.h */,
+				187528A9169EE4A8001C1D58 /* NSPrintOperation.h */,
+				187528AA169EE4A8001C1D58 /* NSPrintPanel.h */,
+				187528AB169EE4A8001C1D58 /* NSPrinter.h */,
+				187528AC169EE4A8001C1D58 /* NSProgressIndicator.h */,
+				187528AD169EE4A8001C1D58 /* NSResponder.h */,
+				187528AE169EE4A8001C1D58 /* NSRulerMarker.h */,
+				187528AF169EE4A8001C1D58 /* NSRulerView.h */,
+				187528B0169EE4A8001C1D58 /* NSSavePanel.h */,
+				187528B1169EE4A8001C1D58 /* NSScreen.h */,
+				187528B2169EE4A8001C1D58 /* NSScrollView.h */,
+				187528B3169EE4A8001C1D58 /* NSScroller.h */,
+				187528B4169EE4A8001C1D58 /* NSSearchField.h */,
+				187528B5169EE4A8001C1D58 /* NSSearchFieldCell.h */,
+				187528B6169EE4A8001C1D58 /* NSSecureTextField.h */,
+				187528B7169EE4A8001C1D58 /* NSSegmentedCell.h */,
+				187528B8169EE4A8001C1D58 /* NSSegmentedControl.h */,
+				187528B9169EE4A8001C1D58 /* NSSelection.h */,
+				187528BA169EE4A8001C1D58 /* NSShadow.h */,
+				187528BB169EE4A8001C1D58 /* NSSlider.h */,
+				187528BC169EE4A8001C1D58 /* NSSliderCell.h */,
+				187528BD169EE4A8001C1D58 /* NSSound.h */,
+				187528BE169EE4A8001C1D58 /* NSSpeechSynthesizer.h */,
+				187528BF169EE4A8001C1D58 /* NSSpellChecker.h */,
+				187528C0169EE4A8001C1D58 /* NSSpellProtocol.h */,
+				187528C1169EE4A8001C1D58 /* NSSpellServer.h */,
+				187528C2169EE4A8001C1D58 /* NSSplitView.h */,
+				187528C3169EE4A8001C1D58 /* NSStepper.h */,
+				187528C4169EE4A8001C1D58 /* NSStepperCell.h */,
+				187528C5169EE4A8001C1D58 /* NSStringDrawing.h */,
+				187528C6169EE4A8001C1D58 /* NSTabView.h */,
+				187528C7169EE4A8001C1D58 /* NSTabViewItem.h */,
+				187528C8169EE4A8001C1D58 /* NSTableColumn.h */,
+				187528C9169EE4A8001C1D58 /* NSTableHeaderCell.h */,
+				187528CA169EE4A8001C1D58 /* NSTableHeaderView.h */,
+				187528CB169EE4A8001C1D58 /* NSTableView.h */,
+				187528CC169EE4A8001C1D58 /* NSText.h */,
+				187528CD169EE4A8001C1D58 /* NSTextAttachment.h */,
+				187528CE169EE4A8001C1D58 /* NSTextContainer.h */,
+				187528CF169EE4A8001C1D58 /* NSTextField.h */,
+				187528D0169EE4A8001C1D58 /* NSTextFieldCell.h */,
+				187528D1169EE4A8001C1D58 /* NSTextList.h */,
+				187528D2169EE4A8001C1D58 /* NSTextStorage.h */,
+				187528D3169EE4A8001C1D58 /* NSTextTable.h */,
+				187528D4169EE4A8001C1D58 /* NSTextView.h */,
+				187528D5169EE4A8001C1D58 /* NSTokenField.h */,
+				187528D6169EE4A8001C1D58 /* NSTokenFieldCell.h */,
+				187528D7169EE4A8001C1D58 /* NSToolbar.h */,
+				187528D8169EE4A8001C1D58 /* NSToolbarItem.h */,
+				187528D9169EE4A8001C1D58 /* NSToolbarItemGroup.h */,
+				187528DA169EE4A8001C1D58 /* NSTreeController.h */,
+				187528DB169EE4A8001C1D58 /* NSTreeNode.h */,
+				187528DC169EE4A8001C1D58 /* NSUserDefaultsController.h */,
+				187528DD169EE4A8001C1D58 /* NSUserInterfaceValidation.h */,
+				187528DE169EE4A8001C1D58 /* NSView.h */,
+				187528DF169EE4A8001C1D58 /* NSViewController.h */,
+				187528E0169EE4A8001C1D58 /* NSWindow.h */,
+				187528E1169EE4A8001C1D58 /* NSWindowController.h */,
+				187528E2169EE4A8001C1D58 /* NSWorkspace.h */,
+				187528E3169EE4A8001C1D58 /* PSOperators.h */,
+			);
+			path = AppKit;
+			sourceTree = "<group>";
+		};
+		187528E4169EE4A8001C1D58 /* Cocoa */ = {
+			isa = PBXGroup;
+			children = (
+				187528E5169EE4A8001C1D58 /* Cocoa.h */,
+			);
+			path = Cocoa;
+			sourceTree = "<group>";
+		};
+		187529AC169EE4B7001C1D58 /* Source */ = {
+			isa = PBXGroup;
+			children = (
+				187529AD169EE4B7001C1D58 /* .cvsignore */,
+				187529AE169EE4B7001C1D58 /* CompatibilityHeaders.make */,
+				187529AF169EE4B7001C1D58 /* DocMakefile */,
+				187529B0169EE4B7001C1D58 /* Functions.m */,
+				187529B1169EE4B7001C1D58 /* GNUmakefile */,
+				187529B2169EE4B7001C1D58 /* GNUmakefile.postamble */,
+				187529B3169EE4B7001C1D58 /* GNUmakefile.preamble */,
+				187529B4169EE4B7001C1D58 /* GSAnimator.m */,
+				187529B5169EE4B7001C1D58 /* GSBindingHelpers.h */,
+				187529B6169EE4B7001C1D58 /* GSCharacterPanel.m */,
+				187529B7169EE4B7001C1D58 /* GSDisplayServer.m */,
+				187529B8169EE4B7001C1D58 /* GSDragView.m */,
+				187529B9169EE4B7001C1D58 /* GSEPSPrintOperation.m */,
+				187529BA169EE4B7001C1D58 /* GSFastEnumeration.h */,
+				187529BB169EE4B7001C1D58 /* GSFontInfo.m */,
+				187529BC169EE4B7001C1D58 /* GSGModelLoader.m */,
+				187529BD169EE4B7001C1D58 /* GSGhostscriptImageRep.m */,
+				187529BE169EE4B7001C1D58 /* GSGormLoader.m */,
+				187529BF169EE4B7001C1D58 /* GSGormLoading.m */,
+				187529C0169EE4B7001C1D58 /* GSGuiPrivate.h */,
+				187529C1169EE4B7001C1D58 /* GSHbox.m */,
+				187529C2169EE4B7001C1D58 /* GSHelpAttachment.m */,
+				187529C3169EE4B7001C1D58 /* GSHelpManagerPanel.m */,
+				187529C4169EE4B7001C1D58 /* GSHorizontalTypesetter.m */,
+				187529C5169EE4B7001C1D58 /* GSIconManager.h */,
+				187529C6169EE4B7001C1D58 /* GSIconManager.m */,
+				187529C7169EE4B7001C1D58 /* GSImageMagickImageRep.m */,
+				187529C8169EE4B7001C1D58 /* GSInfoPanel.m */,
+				187529C9169EE4B7001C1D58 /* GSKeyBindingAction.h */,
+				187529CA169EE4B7001C1D58 /* GSKeyBindingAction.m */,
+				187529CB169EE4B7001C1D58 /* GSKeyBindingTable.h */,
+				187529CC169EE4B7001C1D58 /* GSKeyBindingTable.m */,
+				187529CD169EE4B7001C1D58 /* GSLayoutManager.m */,
+				187529CE169EE4B7001C1D58 /* GSMemoryPanel.m */,
+				187529CF169EE4B7001C1D58 /* GSModelLoaderFactory.m */,
+				187529D0169EE4B7001C1D58 /* GSNibLoader.m */,
+				187529D1169EE4B7001C1D58 /* GSNibLoading.m */,
+				187529D2169EE4B7001C1D58 /* GSPDFPrintOperation.m */,
+				187529D3169EE4B7001C1D58 /* GSPrintOperation.m */,
+				187529D4169EE4B7001C1D58 /* GSPrinting.m */,
+				187529D5169EE4B7001C1D58 /* GSServicesManager.m */,
+				187529D6169EE4B7001C1D58 /* GSSlideView.h */,
+				187529D7169EE4B7001C1D58 /* GSSlideView.m */,
+				187529D8169EE4B7001C1D58 /* GSStandardWindowDecorationView.m */,
+				187529D9169EE4B7001C1D58 /* GSTable.m */,
+				187529DA169EE4B7001C1D58 /* GSTextFinder.h */,
+				187529DB169EE4B7001C1D58 /* GSTextFinder.m */,
+				187529DC169EE4B7001C1D58 /* GSTextStorage.h */,
+				187529DD169EE4B7001C1D58 /* GSTextStorage.m */,
+				187529DE169EE4B7001C1D58 /* GSTheme.m */,
+				187529DF169EE4B7001C1D58 /* GSThemeDrawing.m */,
+				187529E0169EE4B7001C1D58 /* GSThemeInspector.m */,
+				187529E1169EE4B7001C1D58 /* GSThemeMenu.m */,
+				187529E2169EE4B7001C1D58 /* GSThemeOpenSavePanels.m */,
+				187529E3169EE4B7001C1D58 /* GSThemePanel.m */,
+				187529E4169EE4B7001C1D58 /* GSThemePrivate.h */,
+				187529E5169EE4B7001C1D58 /* GSThemeTools.m */,
+				187529E6169EE4B7001C1D58 /* GSTitleView.m */,
+				187529E7169EE4B7001C1D58 /* GSToolTips.h */,
+				187529E8169EE4B7001C1D58 /* GSToolTips.m */,
+				187529E9169EE4B7001C1D58 /* GSToolbarCustomizationPalette.h */,
+				187529EA169EE4B7001C1D58 /* GSToolbarCustomizationPalette.m */,
+				187529EB169EE4B7001C1D58 /* GSToolbarView.m */,
+				187529EC169EE4B7001C1D58 /* GSTrackingRect.m */,
+				187529ED169EE4B7001C1D58 /* GSTypesetter.m */,
+				187529EE169EE4B7001C1D58 /* GSVbox.m */,
+				187529EF169EE4B7001C1D58 /* GSWindowDecorationView.m */,
+				187529F0169EE4B7001C1D58 /* GSXibLoader.m */,
+				187529F1169EE4B7001C1D58 /* GSXibLoading.m */,
+				187529F2169EE4B7001C1D58 /* Info-gnustep.plist */,
+				187529F3169EE4B7001C1D58 /* NSActionCell.m */,
+				187529F4169EE4B7001C1D58 /* NSAffineTransform.m */,
+				187529F5169EE4B7001C1D58 /* NSAlert.m */,
+				187529F6169EE4B7001C1D58 /* NSAnimation.m */,
+				187529F7169EE4B7001C1D58 /* NSApplication.m */,
+				187529F8169EE4B7001C1D58 /* NSArrayController.m */,
+				187529F9169EE4B7001C1D58 /* NSAttributedString.m */,
+				187529FA169EE4B7001C1D58 /* NSBezierPath.m */,
+				187529FB169EE4B7001C1D58 /* NSBitmapImageRep+GIF.h */,
+				187529FC169EE4B7001C1D58 /* NSBitmapImageRep+GIF.m */,
+				187529FD169EE4B7001C1D58 /* NSBitmapImageRep+ICNS.h */,
+				187529FE169EE4B7001C1D58 /* NSBitmapImageRep+ICNS.m */,
+				187529FF169EE4B7001C1D58 /* NSBitmapImageRep+JPEG.h */,
+				18752A00169EE4B7001C1D58 /* NSBitmapImageRep+JPEG.m */,
+				18752A01169EE4B7001C1D58 /* NSBitmapImageRep+PNG.h */,
+				18752A02169EE4B7001C1D58 /* NSBitmapImageRep+PNG.m */,
+				18752A03169EE4B7001C1D58 /* NSBitmapImageRep+PNM.h */,
+				18752A04169EE4B7001C1D58 /* NSBitmapImageRep+PNM.m */,
+				18752A05169EE4B7001C1D58 /* NSBitmapImageRep.m */,
+				18752A06169EE4B7001C1D58 /* NSBox.m */,
+				18752A07169EE4B7001C1D58 /* NSBrowser.m */,
+				18752A08169EE4B7001C1D58 /* NSBrowserCell.m */,
+				18752A09169EE4B7001C1D58 /* NSBundleAdditions.m */,
+				18752A0A169EE4B7001C1D58 /* NSButton.m */,
+				18752A0B169EE4B7001C1D58 /* NSButtonCell.m */,
+				18752A0C169EE4B7001C1D58 /* NSButtonImageSource.h */,
+				18752A0D169EE4B7001C1D58 /* NSButtonImageSource.m */,
+				18752A0E169EE4B7001C1D58 /* NSCachedImageRep.m */,
+				18752A0F169EE4B7001C1D58 /* NSCell.m */,
+				18752A10169EE4B7001C1D58 /* NSClipView.m */,
+				18752A11169EE4B7001C1D58 /* NSColor.m */,
+				18752A12169EE4B7001C1D58 /* NSColorList.m */,
+				18752A13169EE4B7001C1D58 /* NSColorPanel.m */,
+				18752A14169EE4B7001C1D58 /* NSColorPicker.m */,
+				18752A15169EE4B7001C1D58 /* NSColorSpace.m */,
+				18752A16169EE4B7001C1D58 /* NSColorWell.m */,
+				18752A17169EE4B7001C1D58 /* NSComboBox.m */,
+				18752A18169EE4B7001C1D58 /* NSComboBoxCell.m */,
+				18752A19169EE4B7001C1D58 /* NSControl.m */,
+				18752A1A169EE4B7001C1D58 /* NSController.m */,
+				18752A1B169EE4B7001C1D58 /* NSCursor.m */,
+				18752A1C169EE4B7001C1D58 /* NSCustomImageRep.m */,
+				18752A1D169EE4B7001C1D58 /* NSDataLink.m */,
+				18752A1E169EE4B7001C1D58 /* NSDataLinkManager.m */,
+				18752A1F169EE4B7001C1D58 /* NSDataLinkPanel.m */,
+				18752A20169EE4B7001C1D58 /* NSDocument.m */,
+				18752A21169EE4B7001C1D58 /* NSDocumentController.m */,
+				18752A22169EE4B7001C1D58 /* NSDocumentFrameworkPrivate.h */,
+				18752A23169EE4B7001C1D58 /* NSDrawer.m */,
+				18752A24169EE4B7001C1D58 /* NSEPSImageRep.m */,
+				18752A25169EE4B7001C1D58 /* NSEvent.m */,
+				18752A26169EE4B7001C1D58 /* NSFileWrapper.m */,
+				18752A27169EE4B7001C1D58 /* NSFont.m */,
+				18752A28169EE4B7001C1D58 /* NSFontDescriptor.m */,
+				18752A29169EE4B7001C1D58 /* NSFontManager.m */,
+				18752A2A169EE4B7001C1D58 /* NSFontPanel.m */,
+				18752A2B169EE4B7001C1D58 /* NSForm.m */,
+				18752A2C169EE4B7001C1D58 /* NSFormCell.m */,
+				18752A2D169EE4B7001C1D58 /* NSGlyphGenerator.m */,
+				18752A2E169EE4B7001C1D58 /* NSGradient.m */,
+				18752A2F169EE4B7001C1D58 /* NSGraphicsContext.m */,
+				18752A30169EE4B7001C1D58 /* NSHelpManager.m */,
+				18752A31169EE4B7001C1D58 /* NSHelpPanel.m */,
+				18752A32169EE4B7001C1D58 /* NSImage.m */,
+				18752A33169EE4B7001C1D58 /* NSImageCell.m */,
+				18752A34169EE4B7001C1D58 /* NSImageRep.m */,
+				18752A35169EE4B7001C1D58 /* NSImageView.m */,
+				18752A36169EE4B7001C1D58 /* NSInputManager.m */,
+				18752A37169EE4B7001C1D58 /* NSInputServer.m */,
+				18752A38169EE4B7001C1D58 /* NSInterfaceStyle.m */,
+				18752A39169EE4B7001C1D58 /* NSKeyValueBinding.m */,
+				18752A3A169EE4B7001C1D58 /* NSLayoutManager.m */,
+				18752A3B169EE4B7001C1D58 /* NSLevelIndicator.m */,
+				18752A3C169EE4B7001C1D58 /* NSLevelIndicatorCell.m */,
+				18752A3D169EE4B7001C1D58 /* NSMatrix.m */,
+				18752A3E169EE4B7001C1D58 /* NSMenu.m */,
+				18752A3F169EE4B7001C1D58 /* NSMenuItem.m */,
+				18752A40169EE4B7001C1D58 /* NSMenuItemCell.m */,
+				18752A41169EE4B7001C1D58 /* NSMenuView.m */,
+				18752A42169EE4B7001C1D58 /* NSMovie.m */,
+				18752A43169EE4B7001C1D58 /* NSMovieView.m */,
+				18752A44169EE4B7001C1D58 /* NSNib.m */,
+				18752A45169EE4B7001C1D58 /* NSNibAXAttributeConnector.m */,
+				18752A46169EE4B7001C1D58 /* NSNibAXRelationshipConnector.m */,
+				18752A47169EE4B7001C1D58 /* NSNibBindingConnector.m */,
+				18752A48169EE4B7001C1D58 /* NSObjectController.m */,
+				18752A49169EE4B7001C1D58 /* NSOpenGLContext.m */,
+				18752A4A169EE4B7001C1D58 /* NSOpenGLPixelFormat.m */,
+				18752A4B169EE4B7001C1D58 /* NSOpenGLView.m */,
+				18752A4C169EE4B7001C1D58 /* NSOpenPanel.m */,
+				18752A4D169EE4B7001C1D58 /* NSOutlineView.m */,
+				18752A4E169EE4B7001C1D58 /* NSPageLayout.m */,
+				18752A4F169EE4B7001C1D58 /* NSPanel.m */,
+				18752A50169EE4B7001C1D58 /* NSParagraphStyle.m */,
+				18752A51169EE4B7001C1D58 /* NSPasteboard.m */,
+				18752A52169EE4B7001C1D58 /* NSPopUpButton.m */,
+				18752A53169EE4B7001C1D58 /* NSPopUpButtonCell.m */,
+				18752A54169EE4B7001C1D58 /* NSPrintInfo.m */,
+				18752A55169EE4B7001C1D58 /* NSPrintOperation.m */,
+				18752A56169EE4B7001C1D58 /* NSPrintPanel.m */,
+				18752A57169EE4B7001C1D58 /* NSPrinter.m */,
+				18752A58169EE4B7001C1D58 /* NSProgressIndicator.m */,
+				18752A59169EE4B7001C1D58 /* NSResponder.m */,
+				18752A5A169EE4B7001C1D58 /* NSRulerMarker.m */,
+				18752A5B169EE4B7001C1D58 /* NSRulerView.m */,
+				18752A5C169EE4B7001C1D58 /* NSSavePanel.m */,
+				18752A5D169EE4B7001C1D58 /* NSScreen.m */,
+				18752A5E169EE4B7001C1D58 /* NSScrollView.m */,
+				18752A5F169EE4B7001C1D58 /* NSScroller.m */,
+				18752A60169EE4B7001C1D58 /* NSSearchField.m */,
+				18752A61169EE4B7001C1D58 /* NSSearchFieldCell.m */,
+				18752A62169EE4B7001C1D58 /* NSSecureTextField.m */,
+				18752A63169EE4B7001C1D58 /* NSSegmentedCell.m */,
+				18752A64169EE4B7001C1D58 /* NSSegmentedControl.m */,
+				18752A65169EE4B7001C1D58 /* NSSelection.m */,
+				18752A66169EE4B7001C1D58 /* NSShadow.m */,
+				18752A67169EE4B7001C1D58 /* NSSlider.m */,
+				18752A68169EE4B7001C1D58 /* NSSliderCell.m */,
+				18752A69169EE4B7001C1D58 /* NSSound.m */,
+				18752A6A169EE4B7001C1D58 /* NSSpeechSynthesizer.m */,
+				18752A6B169EE4B7001C1D58 /* NSSpellChecker.m */,
+				18752A6C169EE4B7001C1D58 /* NSSplitView.m */,
+				18752A6D169EE4B7001C1D58 /* NSStepper.m */,
+				18752A6E169EE4B7001C1D58 /* NSStepperCell.m */,
+				18752A6F169EE4B7001C1D58 /* NSStringDrawing.m */,
+				18752A70169EE4B8001C1D58 /* NSTabView.m */,
+				18752A71169EE4B8001C1D58 /* NSTabViewItem.m */,
+				18752A72169EE4B8001C1D58 /* NSTableColumn.m */,
+				18752A73169EE4B8001C1D58 /* NSTableHeaderCell.m */,
+				18752A74169EE4B8001C1D58 /* NSTableHeaderView.m */,
+				18752A75169EE4B8001C1D58 /* NSTableView.m */,
+				18752A76169EE4B8001C1D58 /* NSText.m */,
+				18752A77169EE4B8001C1D58 /* NSTextAttachment.m */,
+				18752A78169EE4B8001C1D58 /* NSTextBlock.m */,
+				18752A79169EE4B8001C1D58 /* NSTextContainer.m */,
+				18752A7A169EE4B8001C1D58 /* NSTextField.m */,
+				18752A7B169EE4B8001C1D58 /* NSTextFieldCell.m */,
+				18752A7C169EE4B8001C1D58 /* NSTextList.m */,
+				18752A7D169EE4B8001C1D58 /* NSTextStorage.m */,
+				18752A7E169EE4B8001C1D58 /* NSTextTable.m */,
+				18752A7F169EE4B8001C1D58 /* NSTextTableBlock.m */,
+				18752A80169EE4B8001C1D58 /* NSTextView.m */,
+				18752A81169EE4B8001C1D58 /* NSTextView_actions.m */,
+				18752A82169EE4B8001C1D58 /* NSTokenField.m */,
+				18752A83169EE4B8001C1D58 /* NSTokenFieldCell.m */,
+				18752A84169EE4B8001C1D58 /* NSToolbar.m */,
+				18752A85169EE4B8001C1D58 /* NSToolbarFrameworkPrivate.h */,
+				18752A86169EE4B8001C1D58 /* NSToolbarItem.m */,
+				18752A87169EE4B8001C1D58 /* NSToolbarItemGroup.m */,
+				18752A88169EE4B8001C1D58 /* NSTreeController.m */,
+				18752A89169EE4B8001C1D58 /* NSUserDefaultsController.m */,
+				18752A8A169EE4B8001C1D58 /* NSView.m */,
+				18752A8B169EE4B8001C1D58 /* NSViewController.m */,
+				18752A8C169EE4B8001C1D58 /* NSViewPrivate.h */,
+				18752A8D169EE4B8001C1D58 /* NSWindow.m */,
+				18752A8E169EE4B8001C1D58 /* NSWindowController.m */,
+				18752A8F169EE4B8001C1D58 /* NSWorkspace.m */,
+				18752A90169EE4B8001C1D58 /* externs.m */,
+				18752A91169EE4B8001C1D58 /* linking.m */,
+				18752A92169EE4B8001C1D58 /* nsimage-tiff.h */,
+				18752A93169EE4B8001C1D58 /* tiff.m */,
+				18752A94169EE4B8001C1D58 /* win32-def.top */,
+				18752A95169EE4B8001C1D58 /* win32-entry.c */,
+			);
+			path = Source;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18B1F16FF953F009E43B0 /* Images */ = {
+			isa = PBXGroup;
+			children = (
+				18A18B2016FF9554009E43B0 /* .cvsignore */,
+				18A18B2116FF9554009E43B0 /* GNUmakefile */,
+				18A18B2216FF9554009E43B0 /* GNUstep.tiff */,
+				18A18B2316FF9554009E43B0 /* GNUstepMenuImage.tiff */,
+				18A18B2416FF9554009E43B0 /* GSSearch.tiff */,
+				18A18B2516FF9554009E43B0 /* GSStop.tiff */,
+				18A18B2616FF9554009E43B0 /* LogoGNUstep.tiff */,
+				18A18B2716FF9554009E43B0 /* MagnifyGlass.tiff */,
+				18A18B2816FF9554009E43B0 /* NSAddTemplate.tiff */,
+				18A18B2916FF9554009E43B0 /* NSComboArrow.tiff */,
+				18A18B2A16FF9554009E43B0 /* NSRatingLevelIndicator.tiff */,
+				18A18B2B16FF9554009E43B0 /* common_2DCheckMark.tiff */,
+				18A18B2C16FF9554009E43B0 /* common_2DDash.tiff */,
+				18A18B2D16FF9554009E43B0 /* common_3DArrowDown.tiff */,
+				18A18B2E16FF9554009E43B0 /* common_3DArrowLeft.tiff */,
+				18A18B2F16FF9554009E43B0 /* common_3DArrowRight.tiff */,
+				18A18B3016FF9554009E43B0 /* common_3DArrowRightH.tiff */,
+				18A18B3116FF9554009E43B0 /* common_3DArrowUp.tiff */,
+				18A18B3216FF9554009E43B0 /* common_ArrowDown.tiff */,
+				18A18B3316FF9554009E43B0 /* common_ArrowDownH.tiff */,
+				18A18B3416FF9554009E43B0 /* common_ArrowLeft.tiff */,
+				18A18B3516FF9554009E43B0 /* common_ArrowLeftH.tiff */,
+				18A18B3616FF9554009E43B0 /* common_ArrowRight.tiff */,
+				18A18B3716FF9554009E43B0 /* common_ArrowRightH.tiff */,
+				18A18B3816FF9554009E43B0 /* common_ArrowUp.tiff */,
+				18A18B3916FF9554009E43B0 /* common_ArrowUpH.tiff */,
+				18A18B3A16FF9554009E43B0 /* common_CenterTabStop.tiff */,
+				18A18B3B16FF9554009E43B0 /* common_Close.tiff */,
+				18A18B3C16FF9554009E43B0 /* common_CloseBroken.tiff */,
+				18A18B3D16FF9554009E43B0 /* common_CloseBrokenH.tiff */,
+				18A18B3E16FF9554009E43B0 /* common_CloseH.tiff */,
+				18A18B3F16FF9554009E43B0 /* common_ClosedHandCursor.tiff */,
+				18A18B4016FF9554009E43B0 /* common_ColorSwatch.tiff */,
+				18A18B4116FF9554009E43B0 /* common_ComboBoxEllipsis.tiff */,
+				18A18B4216FF9554009E43B0 /* common_DecimalTabStop.tiff */,
+				18A18B4316FF9554009E43B0 /* common_Desktop.tiff */,
+				18A18B4416FF9554009E43B0 /* common_Diamond.tiff */,
+				18A18B4516FF9554009E43B0 /* common_Dimple.tiff */,
+				18A18B4616FF9554009E43B0 /* common_DimpleHoriz.tiff */,
+				18A18B4716FF9554009E43B0 /* common_DocsFolder.tiff */,
+				18A18B4816FF9554009E43B0 /* common_DownArrowSmall.tiff */,
+				18A18B4916FF9554009E43B0 /* common_DownloadFolder.tiff */,
+				18A18B4A16FF9554009E43B0 /* common_Folder.tiff */,
+				18A18B4B16FF9554009E43B0 /* common_GSFolder.tiff */,
+				18A18B4C16FF9554009E43B0 /* common_HelpCursor.tiff */,
+				18A18B4D16FF9554009E43B0 /* common_HelpLink.tiff */,
+				18A18B4E16FF9554009E43B0 /* common_Home.tiff */,
+				18A18B4F16FF9554009E43B0 /* common_HomeDirectory.tiff */,
+				18A18B5016FF9554009E43B0 /* common_ImageFolder.tiff */,
+				18A18B5116FF9554009E43B0 /* common_Info.svg */,
+				18A18B5216FF9554009E43B0 /* common_Info.tiff */,
+				18A18B5316FF9554009E43B0 /* common_LeftTabStop.tiff */,
+				18A18B5416FF9554009E43B0 /* common_LibraryFolder.tiff */,
+				18A18B5516FF9554009E43B0 /* common_MiniWindowTile.tiff */,
+				18A18B5616FF9554009E43B0 /* common_Miniaturize.tiff */,
+				18A18B5716FF9554009E43B0 /* common_MiniaturizeH.tiff */,
+				18A18B5816FF9554009E43B0 /* common_Mount.tiff */,
+				18A18B5916FF9554009E43B0 /* common_MusicFolder.tiff */,
+				18A18B5A16FF9554009E43B0 /* common_Nibble.tiff */,
+				18A18B5B16FF9554009E43B0 /* common_OpenHandCursor.tiff */,
+				18A18B5C16FF9554009E43B0 /* common_Printer.tiff */,
+				18A18B5D16FF9554009E43B0 /* common_ProgressIndeterminate_1.tiff */,
+				18A18B5E16FF9554009E43B0 /* common_ProgressIndeterminate_2.tiff */,
+				18A18B5F16FF9554009E43B0 /* common_ProgressIndeterminate_3.tiff */,
+				18A18B6016FF9554009E43B0 /* common_ProgressIndeterminate_4.tiff */,
+				18A18B6116FF9554009E43B0 /* common_ProgressIndeterminate_5.tiff */,
+				18A18B6216FF9554009E43B0 /* common_ProgressIndeterminate_6.tiff */,
+				18A18B6316FF9554009E43B0 /* common_ProgressSpinning_1.tiff */,
+				18A18B6416FF9554009E43B0 /* common_ProgressSpinning_2.tiff */,
+				18A18B6516FF9554009E43B0 /* common_ProgressSpinning_3.tiff */,
+				18A18B6616FF9554009E43B0 /* common_ProgressSpinning_4.tiff */,
+				18A18B6716FF9554009E43B0 /* common_ProgressSpinning_5.tiff */,
+				18A18B6816FF9554009E43B0 /* common_ProgressSpinning_6.tiff */,
+				18A18B6916FF9554009E43B0 /* common_ProgressSpinning_7.tiff */,
+				18A18B6A16FF9554009E43B0 /* common_ProgressSpinning_8.tiff */,
+				18A18B6B16FF9554009E43B0 /* common_RadioOff.tiff */,
+				18A18B6C16FF9554009E43B0 /* common_RadioOn.tiff */,
+				18A18B6D16FF9554009E43B0 /* common_Right.tiff */,
+				18A18B6E16FF9554009E43B0 /* common_RightH.tiff */,
+				18A18B6F16FF9554009E43B0 /* common_RightTabStop.tiff */,
+				18A18B7016FF9554009E43B0 /* common_Root_Apple.tiff */,
+				18A18B7116FF9554009E43B0 /* common_Root_PC.tiff */,
+				18A18B7216FF9554009E43B0 /* common_Root_SGI.tiff */,
+				18A18B7316FF9554009E43B0 /* common_Root_Sparc.tiff */,
+				18A18B7416FF9554009E43B0 /* common_Root_Sparc2.tiff */,
+				18A18B7516FF9554009E43B0 /* common_SliderHoriz.tiff */,
+				18A18B7616FF9554009E43B0 /* common_SliderVert.tiff */,
+				18A18B7716FF9554009E43B0 /* common_SwitchOff.tiff */,
+				18A18B7816FF9554009E43B0 /* common_SwitchOn.tiff */,
+				18A18B7916FF9554009E43B0 /* common_TabDownSelectedLeft.tiff */,
+				18A18B7A16FF9554009E43B0 /* common_TabDownSelectedRight.tiff */,
+				18A18B7B16FF9554009E43B0 /* common_TabDownSelectedToUnSelectedJunction.tiff */,
+				18A18B7C16FF9554009E43B0 /* common_TabDownUnSelectedJunction.tiff */,
+				18A18B7D16FF9554009E43B0 /* common_TabDownUnSelectedLeft.tiff */,
+				18A18B7E16FF9554009E43B0 /* common_TabDownUnSelectedRight.tiff */,
+				18A18B7F16FF9554009E43B0 /* common_TabDownUnSelectedToSelectedJunction.tiff */,
+				18A18B8016FF9554009E43B0 /* common_TabSelectedLeft.tiff */,
+				18A18B8116FF9554009E43B0 /* common_TabSelectedRight.tiff */,
+				18A18B8216FF9554009E43B0 /* common_TabSelectedToUnSelectedJunction.tiff */,
+				18A18B8316FF9554009E43B0 /* common_TabUnSelectToSelectedJunction.tiff */,
+				18A18B8416FF9554009E43B0 /* common_TabUnSelectedJunction.tiff */,
+				18A18B8516FF9554009E43B0 /* common_TabUnSelectedLeft.tiff */,
+				18A18B8616FF9554009E43B0 /* common_TabUnSelectedRight.tiff */,
+				18A18B8716FF9554009E43B0 /* common_Tile.tiff */,
+				18A18B8816FF9554009E43B0 /* common_ToolbarClippedItemsMark.tiff */,
+				18A18B8916FF9554009E43B0 /* common_ToolbarCustomizeToolbarItem.tiff */,
+				18A18B8A16FF9554009E43B0 /* common_ToolbarSeparatorItem.tiff */,
+				18A18B8B16FF9554009E43B0 /* common_ToolbarShowColorsItem.tiff */,
+				18A18B8C16FF9554009E43B0 /* common_ToolbarShowFontsItem.tiff */,
+				18A18B8D16FF9554009E43B0 /* common_ToolbarSpaceItem.tiff */,
+				18A18B8E16FF9554009E43B0 /* common_Unknown.tiff */,
+				18A18B8F16FF9554009E43B0 /* common_UnknownApplication.tiff */,
+				18A18B9016FF9554009E43B0 /* common_UnknownTool.tiff */,
+				18A18B9116FF9554009E43B0 /* common_Unmount.tiff */,
+				18A18B9216FF9554009E43B0 /* common_UpAndDownArrowSmall.tiff */,
+				18A18B9316FF9554009E43B0 /* common_copyCursor.tiff */,
+				18A18B9416FF9554009E43B0 /* common_linkCursor.tiff */,
+				18A18B9516FF9554009E43B0 /* common_noCursor.tiff */,
+				18A18B9616FF9554009E43B0 /* common_outlineCollapsed.tiff */,
+				18A18B9716FF9554009E43B0 /* common_outlineExpanded.tiff */,
+				18A18B9816FF9554009E43B0 /* common_outlineUnexpandable.tiff */,
+				18A18B9916FF9554009E43B0 /* common_ret.tiff */,
+				18A18B9A16FF9554009E43B0 /* common_retH.tiff */,
+				18A18B9B16FF9554009E43B0 /* nsmapping.strings */,
+				18A18B9C16FF9554009E43B0 /* page_landscape.tiff */,
+				18A18B9D16FF9554009E43B0 /* page_portrait.tiff */,
+			);
+			path = Images;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18B9E16FF9554009E43B0 /* KeyBindings */ = {
+			isa = PBXGroup;
+			children = (
+				18A18B9F16FF9564009E43B0 /* DefaultKeyBindings.dict */,
+				18A18BA016FF9564009E43B0 /* GNUmakefile */,
+			);
+			path = KeyBindings;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18BA116FF9564009E43B0 /* Model */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BA216FF9571009E43B0 /* .cvsignore */,
+				18A18BA316FF9571009E43B0 /* Controller.h */,
+				18A18BA416FF9571009E43B0 /* Controller.m */,
+				18A18BA516FF9571009E43B0 /* GMAppKit.m */,
+				18A18BA616FF9571009E43B0 /* GMArchiveObjects.m */,
+				18A18BA716FF9571009E43B0 /* GMArchiver.m */,
+				18A18BA816FF9571009E43B0 /* GNUmakefile */,
+				18A18BA916FF9571009E43B0 /* GNUmakefile.postamble */,
+				18A18BAA16FF9571009E43B0 /* IBClasses.h */,
+				18A18BAB16FF9571009E43B0 /* IBClasses.m */,
+				18A18BAC16FF9571009E43B0 /* IMConnectors.h */,
+				18A18BAD16FF9571009E43B0 /* IMConnectors.m */,
+				18A18BAE16FF9571009E43B0 /* IMCustomObject.m */,
+				18A18BAF16FF9571009E43B0 /* IMLoading.m */,
+				18A18BB016FF9571009E43B0 /* Translator.h */,
+				18A18BB116FF9571009E43B0 /* Translator.m */,
+				18A18BB216FF9571009E43B0 /* libgmodel.bundle */,
+				18A18BB316FF9571009E43B0 /* nib2gmodel.m */,
+				18A18BB416FF9571009E43B0 /* obj */,
+				18A18BC016FF9571009E43B0 /* test.gmodel */,
+				18A18BC116FF9571009E43B0 /* test.m */,
+				18A18BC216FF9571009E43B0 /* test.nib */,
+			);
+			path = Model;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18BB416FF9571009E43B0 /* obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BB516FF9571009E43B0 /* libgmodel.obj */,
+			);
+			path = obj;
+			sourceTree = "<group>";
+		};
+		18A18BB516FF9571009E43B0 /* libgmodel.obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BB616FF9571009E43B0 /* GMAppKit.m.d */,
+				18A18BB716FF9571009E43B0 /* GMAppKit.m.o */,
+				18A18BB816FF9571009E43B0 /* GMArchiver.m.d */,
+				18A18BB916FF9571009E43B0 /* GMArchiver.m.o */,
+				18A18BBA16FF9571009E43B0 /* IMConnectors.m.d */,
+				18A18BBB16FF9571009E43B0 /* IMConnectors.m.o */,
+				18A18BBC16FF9571009E43B0 /* IMCustomObject.m.d */,
+				18A18BBD16FF9571009E43B0 /* IMCustomObject.m.o */,
+				18A18BBE16FF9571009E43B0 /* IMLoading.m.d */,
+				18A18BBF16FF9571009E43B0 /* IMLoading.m.o */,
+			);
+			path = libgmodel.obj;
+			sourceTree = "<group>";
+		};
+		18A18BC316FF9571009E43B0 /* Panels */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BC416FF9587009E43B0 /* ColorPanel.gmodel */,
+				18A18BC516FF9587009E43B0 /* GSDataLinkPanel.gorm */,
+				18A18BC916FF9587009E43B0 /* GSFindPanel.gorm */,
+				18A18BCD16FF9587009E43B0 /* GSPageLayout.gorm */,
+				18A18BD116FF9587009E43B0 /* GSPrintPanel.gorm */,
+				18A18BD516FF9587009E43B0 /* GSSpellPanel.gorm */,
+				18A18BD816FF9587009E43B0 /* GSToolbarCustomizationPalette.gorm */,
+				18A18BDC16FF9587009E43B0 /* GNUmakefile */,
+				18A18BDD16FF9587009E43B0 /* GNUmakefile.postamble */,
+				18A18BDE16FF9587009E43B0 /* SavePanel.gmodel */,
+				18A18BDF16FF9587009E43B0 /* GSDataLinkPanel.gorm */,
+				18A18BE316FF9587009E43B0 /* GSFindPanel.gorm */,
+				18A18BE716FF9587009E43B0 /* GSPageLayout.gorm */,
+				18A18BEB16FF9587009E43B0 /* GSPrintPanel.gorm */,
+				18A18BEF16FF9587009E43B0 /* GSSpellPanel.gorm */,
+				18A18BF316FF9587009E43B0 /* GSToolbarCustomizationPalette.gorm */,
+			);
+			path = Panels;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18BC516FF9587009E43B0 /* GSDataLinkPanel.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BC616FF9587009E43B0 /* data.classes */,
+				18A18BC716FF9587009E43B0 /* data.info */,
+				18A18BC816FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSDataLinkPanel.gorm;
+			path = English.lproj/GSDataLinkPanel.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BC916FF9587009E43B0 /* GSFindPanel.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BCA16FF9587009E43B0 /* data.classes */,
+				18A18BCB16FF9587009E43B0 /* data.info */,
+				18A18BCC16FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSFindPanel.gorm;
+			path = English.lproj/GSFindPanel.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BCD16FF9587009E43B0 /* GSPageLayout.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BCE16FF9587009E43B0 /* data.classes */,
+				18A18BCF16FF9587009E43B0 /* data.info */,
+				18A18BD016FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSPageLayout.gorm;
+			path = English.lproj/GSPageLayout.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BD116FF9587009E43B0 /* GSPrintPanel.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BD216FF9587009E43B0 /* data.classes */,
+				18A18BD316FF9587009E43B0 /* data.info */,
+				18A18BD416FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSPrintPanel.gorm;
+			path = English.lproj/GSPrintPanel.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BD516FF9587009E43B0 /* GSSpellPanel.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BD616FF9587009E43B0 /* data.classes */,
+				18A18BD716FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSSpellPanel.gorm;
+			path = English.lproj/GSSpellPanel.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BD816FF9587009E43B0 /* GSToolbarCustomizationPalette.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BD916FF9587009E43B0 /* data.classes */,
+				18A18BDA16FF9587009E43B0 /* data.info */,
+				18A18BDB16FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSToolbarCustomizationPalette.gorm;
+			path = English.lproj/GSToolbarCustomizationPalette.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BDF16FF9587009E43B0 /* GSDataLinkPanel.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BE016FF9587009E43B0 /* data.classes */,
+				18A18BE116FF9587009E43B0 /* data.info */,
+				18A18BE216FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSDataLinkPanel.gorm;
+			path = Spanish.lproj/GSDataLinkPanel.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BE316FF9587009E43B0 /* GSFindPanel.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BE416FF9587009E43B0 /* data.classes */,
+				18A18BE516FF9587009E43B0 /* data.info */,
+				18A18BE616FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSFindPanel.gorm;
+			path = Spanish.lproj/GSFindPanel.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BE716FF9587009E43B0 /* GSPageLayout.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BE816FF9587009E43B0 /* data.classes */,
+				18A18BE916FF9587009E43B0 /* data.info */,
+				18A18BEA16FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSPageLayout.gorm;
+			path = Spanish.lproj/GSPageLayout.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BEB16FF9587009E43B0 /* GSPrintPanel.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BEC16FF9587009E43B0 /* data.classes */,
+				18A18BED16FF9587009E43B0 /* data.info */,
+				18A18BEE16FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSPrintPanel.gorm;
+			path = Spanish.lproj/GSPrintPanel.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BEF16FF9587009E43B0 /* GSSpellPanel.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BF016FF9587009E43B0 /* data.classes */,
+				18A18BF116FF9587009E43B0 /* data.info */,
+				18A18BF216FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSSpellPanel.gorm;
+			path = Spanish.lproj/GSSpellPanel.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BF316FF9587009E43B0 /* GSToolbarCustomizationPalette.gorm */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BF416FF9587009E43B0 /* data.classes */,
+				18A18BF516FF9587009E43B0 /* data.info */,
+				18A18BF616FF9587009E43B0 /* objects.gorm */,
+			);
+			name = GSToolbarCustomizationPalette.gorm;
+			path = Spanish.lproj/GSToolbarCustomizationPalette.gorm;
+			sourceTree = "<group>";
+		};
+		18A18BF716FF9587009E43B0 /* PrinterTypes */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BF816FF9598009E43B0 /* Generic-PostScript_Printer-Postscript.ppd */,
+				18A18BFA16FF9598009E43B0 /* GNUmakefile */,
+				18A18BFB16FF9598009E43B0 /* GNUmakefile.postamble */,
+				18A18BFC16FF9598009E43B0 /* GSProlog.ps */,
+			);
+			path = PrinterTypes;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18BFD16FF9598009E43B0 /* Printing */ = {
+			isa = PBXGroup;
+			children = (
+				18A18BFE16FF95A8009E43B0 /* GNUmakefile */,
+				18A18BFF16FF95A8009E43B0 /* GSCUPS */,
+				18A18C0F16FF95A8009E43B0 /* GSLPR */,
+			);
+			path = Printing;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18BFF16FF95A8009E43B0 /* GSCUPS */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C0016FF95A8009E43B0 /* GNUmakefile */,
+				18A18C0116FF95A8009E43B0 /* GNUmakefile.postamble */,
+				18A18C0216FF95A8009E43B0 /* GNUmakefile.preamble */,
+				18A18C0316FF95A8009E43B0 /* GSCUPSPageLayout.h */,
+				18A18C0416FF95A8009E43B0 /* GSCUPSPageLayout.m */,
+				18A18C0516FF95A8009E43B0 /* GSCUPSPrincipalClass.h */,
+				18A18C0616FF95A8009E43B0 /* GSCUPSPrincipalClass.m */,
+				18A18C0716FF95A8009E43B0 /* GSCUPSPrintInfo.h */,
+				18A18C0816FF95A8009E43B0 /* GSCUPSPrintInfo.m */,
+				18A18C0916FF95A8009E43B0 /* GSCUPSPrintOperation.h */,
+				18A18C0A16FF95A8009E43B0 /* GSCUPSPrintOperation.m */,
+				18A18C0B16FF95A8009E43B0 /* GSCUPSPrintPanel.h */,
+				18A18C0C16FF95A8009E43B0 /* GSCUPSPrintPanel.m */,
+				18A18C0D16FF95A8009E43B0 /* GSCUPSPrinter.h */,
+				18A18C0E16FF95A8009E43B0 /* GSCUPSPrinter.m */,
+			);
+			path = GSCUPS;
+			sourceTree = "<group>";
+		};
+		18A18C0F16FF95A8009E43B0 /* GSLPR */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C1016FF95A8009E43B0 /* GNUmakefile */,
+				18A18C1116FF95A8009E43B0 /* GNUmakefile.postamble */,
+				18A18C1216FF95A8009E43B0 /* GNUmakefile.preamble */,
+				18A18C1316FF95A8009E43B0 /* GSLPR.bundle */,
+				18A18C1416FF95A8009E43B0 /* GSLPRPageLayout.h */,
+				18A18C1516FF95A8009E43B0 /* GSLPRPageLayout.m */,
+				18A18C1616FF95A8009E43B0 /* GSLPRPrincipalClass.h */,
+				18A18C1716FF95A8009E43B0 /* GSLPRPrincipalClass.m */,
+				18A18C1816FF95A8009E43B0 /* GSLPRPrintInfo.h */,
+				18A18C1916FF95A8009E43B0 /* GSLPRPrintInfo.m */,
+				18A18C1A16FF95A8009E43B0 /* GSLPRPrintOperation.h */,
+				18A18C1B16FF95A8009E43B0 /* GSLPRPrintOperation.m */,
+				18A18C1C16FF95A8009E43B0 /* GSLPRPrintPanel.h */,
+				18A18C1D16FF95A8009E43B0 /* GSLPRPrintPanel.m */,
+				18A18C1E16FF95A8009E43B0 /* GSLPRPrinter.h */,
+				18A18C1F16FF95A8009E43B0 /* GSLPRPrinter.m */,
+				18A18C2016FF95A8009E43B0 /* obj */,
+			);
+			path = GSLPR;
+			sourceTree = "<group>";
+		};
+		18A18C2016FF95A8009E43B0 /* obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C2116FF95A8009E43B0 /* GSLPR.obj */,
+			);
+			path = obj;
+			sourceTree = "<group>";
+		};
+		18A18C2116FF95A8009E43B0 /* GSLPR.obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C2216FF95A8009E43B0 /* GSLPRPageLayout.m.d */,
+				18A18C2316FF95A8009E43B0 /* GSLPRPageLayout.m.o */,
+				18A18C2416FF95A8009E43B0 /* GSLPRPrincipalClass.m.d */,
+				18A18C2516FF95A8009E43B0 /* GSLPRPrincipalClass.m.o */,
+				18A18C2616FF95A8009E43B0 /* GSLPRPrintInfo.m.d */,
+				18A18C2716FF95A8009E43B0 /* GSLPRPrintInfo.m.o */,
+				18A18C2816FF95A8009E43B0 /* GSLPRPrintOperation.m.d */,
+				18A18C2916FF95A8009E43B0 /* GSLPRPrintOperation.m.o */,
+				18A18C2A16FF95A8009E43B0 /* GSLPRPrintPanel.m.d */,
+				18A18C2B16FF95A8009E43B0 /* GSLPRPrintPanel.m.o */,
+				18A18C2C16FF95A8009E43B0 /* GSLPRPrinter.m.d */,
+				18A18C2D16FF95A8009E43B0 /* GSLPRPrinter.m.o */,
+			);
+			path = GSLPR.obj;
+			sourceTree = "<group>";
+		};
+		18A18C2E16FF95A8009E43B0 /* Resources */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C2F16FF95B6009E43B0 /* Localizable.strings */,
+				18A18C3316FF95B6009E43B0 /* GNUmakefile */,
+			);
+			path = Resources;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18C3816FF95B6009E43B0 /* Sounds */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C3916FF95BF009E43B0 /* Basso.wav */,
+				18A18C3A16FF95BF009E43B0 /* Blow.wav */,
+				18A18C3B16FF95BF009E43B0 /* Bottle.wav */,
+				18A18C3C16FF95BF009E43B0 /* Frog.wav */,
+				18A18C3D16FF95BF009E43B0 /* GNUmakefile */,
+				18A18C3E16FF95BF009E43B0 /* Glass.wav */,
+				18A18C3F16FF95BF009E43B0 /* Hero.wav */,
+				18A18C4016FF95BF009E43B0 /* Ping.wav */,
+				18A18C4116FF95BF009E43B0 /* Pop.wav */,
+				18A18C4216FF95BF009E43B0 /* Sosumi.wav */,
+				18A18C4316FF95BF009E43B0 /* Submarine.wav */,
+				18A18C4416FF95BF009E43B0 /* Tink.wav */,
+			);
+			path = Sounds;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18C4516FF95BF009E43B0 /* Tests */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C4616FF95CC009E43B0 /* GNUmakefile */,
+				18A18C4716FF95CC009E43B0 /* gui */,
+			);
+			path = Tests;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18C4716FF95CC009E43B0 /* gui */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C4816FF95CC009E43B0 /* GNUmakefile.postamble */,
+				18A18C4916FF95CC009E43B0 /* GNUmakefile.super */,
+				18A18C4A16FF95CD009E43B0 /* NSBezierPath */,
+				18A18C4F16FF95CD009E43B0 /* NSCell */,
+				18A18C5316FF95CD009E43B0 /* NSEvent */,
+				18A18C5616FF95CD009E43B0 /* NSImage */,
+				18A18C5916FF95CD009E43B0 /* NSParagraphStyle */,
+				18A18C5C16FF95CD009E43B0 /* NSPasteboard */,
+				18A18C5F16FF95CD009E43B0 /* NSPopUpButton */,
+				18A18C6216FF95D0009E43B0 /* NSPrintInfo */,
+				18A18C6516FF95D0009E43B0 /* NSSavePanel */,
+				18A18C6B16FF95D0009E43B0 /* NSSliderCell */,
+				18A18C6E16FF95D0009E43B0 /* NSView */,
+				18A18C7716FF95D0009E43B0 /* TestInfo */,
+				18A18C7816FF95D0009E43B0 /* TextSystem */,
+			);
+			path = gui;
+			sourceTree = "<group>";
+		};
+		18A18C4A16FF95CD009E43B0 /* NSBezierPath */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C4B16FF95CD009E43B0 /* TestInfo */,
+				18A18C4C16FF95CD009E43B0 /* basic.m */,
+				18A18C4D16FF95CD009E43B0 /* bounds.m */,
+				18A18C4E16FF95CD009E43B0 /* windingCountAtPoint.m */,
+			);
+			path = NSBezierPath;
+			sourceTree = "<group>";
+		};
+		18A18C4F16FF95CD009E43B0 /* NSCell */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C5016FF95CD009E43B0 /* TestInfo */,
+				18A18C5116FF95CD009E43B0 /* basic.m */,
+				18A18C5216FF95CD009E43B0 /* objectValue.m */,
+			);
+			path = NSCell;
+			sourceTree = "<group>";
+		};
+		18A18C5316FF95CD009E43B0 /* NSEvent */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C5416FF95CD009E43B0 /* TestInfo */,
+				18A18C5516FF95CD009E43B0 /* delta.m */,
+			);
+			path = NSEvent;
+			sourceTree = "<group>";
+		};
+		18A18C5616FF95CD009E43B0 /* NSImage */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C5716FF95CD009E43B0 /* TestInfo */,
+				18A18C5816FF95CD009E43B0 /* basic.m */,
+			);
+			path = NSImage;
+			sourceTree = "<group>";
+		};
+		18A18C5916FF95CD009E43B0 /* NSParagraphStyle */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C5A16FF95CD009E43B0 /* NSParagraphStyle_defaultWritingDirection.m */,
+				18A18C5B16FF95CD009E43B0 /* TestInfo */,
+			);
+			path = NSParagraphStyle;
+			sourceTree = "<group>";
+		};
+		18A18C5C16FF95CD009E43B0 /* NSPasteboard */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C5D16FF95CD009E43B0 /* TestInfo */,
+				18A18C5E16FF95CD009E43B0 /* lazy_copy.m */,
+			);
+			path = NSPasteboard;
+			sourceTree = "<group>";
+		};
+		18A18C5F16FF95CD009E43B0 /* NSPopUpButton */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C6016FF95D0009E43B0 /* TestInfo */,
+				18A18C6116FF95D0009E43B0 /* defaultSelection.m */,
+			);
+			path = NSPopUpButton;
+			sourceTree = "<group>";
+		};
+		18A18C6216FF95D0009E43B0 /* NSPrintInfo */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C6316FF95D0009E43B0 /* TestInfo */,
+				18A18C6416FF95D0009E43B0 /* sharedPrintInfo.m */,
+			);
+			path = NSPrintInfo;
+			sourceTree = "<group>";
+		};
+		18A18C6516FF95D0009E43B0 /* NSSavePanel */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C6616FF95D0009E43B0 /* TestInfo */,
+				18A18C6716FF95D0009E43B0 /* dummy */,
+				18A18C6A16FF95D0009E43B0 /* setDelegate_reload.m */,
+			);
+			path = NSSavePanel;
+			sourceTree = "<group>";
+		};
+		18A18C6716FF95D0009E43B0 /* dummy */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C6816FF95D0009E43B0 /* A */,
+				18A18C6916FF95D0009E43B0 /* B */,
+			);
+			path = dummy;
+			sourceTree = "<group>";
+		};
+		18A18C6B16FF95D0009E43B0 /* NSSliderCell */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C6C16FF95D0009E43B0 /* TestInfo */,
+				18A18C6D16FF95D0009E43B0 /* minMax.m */,
+			);
+			path = NSSliderCell;
+			sourceTree = "<group>";
+		};
+		18A18C6E16FF95D0009E43B0 /* NSView */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C6F16FF95D0009E43B0 /* NSView_autoresize_and_rounding.m */,
+				18A18C7016FF95D0009E43B0 /* NSView_bounds_scale.m */,
+				18A18C7116FF95D0009E43B0 /* NSView_convertRect.m */,
+				18A18C7216FF95D0009E43B0 /* NSView_frame_bounds.m */,
+				18A18C7316FF95D0009E43B0 /* NSView_frame_rotation.m */,
+				18A18C7416FF95D0009E43B0 /* NSView_visibleRect.m */,
+				18A18C7516FF95D0009E43B0 /* TestInfo */,
+				18A18C7616FF95D0009E43B0 /* scrollRectToVisible.m */,
+			);
+			path = NSView;
+			sourceTree = "<group>";
+		};
+		18A18C7816FF95D0009E43B0 /* TextSystem */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C7916FF95D0009E43B0 /* TestInfo */,
+				18A18C7A16FF95D0009E43B0 /* deallocation.m */,
+				18A18C7B16FF95D0009E43B0 /* repeatedAttachmentCellHeight.m */,
+			);
+			path = TextSystem;
+			sourceTree = "<group>";
+		};
+		18A18C7C16FF95D0009E43B0 /* TextConverters */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C7D16FF95DD009E43B0 /* GNUmakefile */,
+				18A18C7E16FF95DD009E43B0 /* RTF */,
+			);
+			path = TextConverters;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18C7E16FF95DD009E43B0 /* RTF */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C7F16FF95DD009E43B0 /* .cvsignore */,
+				18A18C8016FF95DD009E43B0 /* GNUmakefile */,
+				18A18C8116FF95DD009E43B0 /* GNUmakefile.postamble */,
+				18A18C8216FF95DD009E43B0 /* GNUmakefile.preamble */,
+				18A18C8316FF95DD009E43B0 /* RTFConsumer.h */,
+				18A18C8416FF95DD009E43B0 /* RTFConsumer.m */,
+				18A18C8516FF95DD009E43B0 /* RTFConsumerFunctions.h */,
+				18A18C8616FF95DD009E43B0 /* RTFConverter.bundle */,
+				18A18C8716FF95DD009E43B0 /* RTFProducer.h */,
+				18A18C8816FF95DD009E43B0 /* RTFProducer.m */,
+				18A18C8916FF95DD009E43B0 /* obj */,
+				18A18C9316FF95DD009E43B0 /* rtfGrammar.tab.h */,
+				18A18C9416FF95DD009E43B0 /* rtfGrammar.tab.m */,
+				18A18C9516FF95DD009E43B0 /* rtfGrammar.y */,
+				18A18C9616FF95DD009E43B0 /* rtfScanner.h */,
+				18A18C9716FF95DD009E43B0 /* rtfScanner.m */,
+			);
+			path = RTF;
+			sourceTree = "<group>";
+		};
+		18A18C8916FF95DD009E43B0 /* obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C8A16FF95DD009E43B0 /* RTFConverter.obj */,
+			);
+			path = obj;
+			sourceTree = "<group>";
+		};
+		18A18C8A16FF95DD009E43B0 /* RTFConverter.obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C8B16FF95DD009E43B0 /* RTFConsumer.m.d */,
+				18A18C8C16FF95DD009E43B0 /* RTFConsumer.m.o */,
+				18A18C8D16FF95DD009E43B0 /* RTFProducer.m.d */,
+				18A18C8E16FF95DD009E43B0 /* RTFProducer.m.o */,
+				18A18C8F16FF95DD009E43B0 /* rtfGrammar.tab.m.d */,
+				18A18C9016FF95DD009E43B0 /* rtfGrammar.tab.m.o */,
+				18A18C9116FF95DD009E43B0 /* rtfScanner.m.d */,
+				18A18C9216FF95DD009E43B0 /* rtfScanner.m.o */,
+			);
+			path = RTFConverter.obj;
+			sourceTree = "<group>";
+		};
+		18A18C9816FF95DD009E43B0 /* Themes */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C9916FF95E8009E43B0 /* GNUmakefile */,
+			);
+			path = Themes;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18C9A16FF95E8009E43B0 /* Tools */ = {
+			isa = PBXGroup;
+			children = (
+				18A18C9B16FF95F1009E43B0 /* .cvsignore */,
+				18A18C9C16FF95F1009E43B0 /* GNUmakefile */,
+				18A18C9D16FF95F1009E43B0 /* GNUmakefile.postamble */,
+				18A18C9E16FF95F1009E43B0 /* GNUmakefile.preamble */,
+				18A18C9F16FF95F1009E43B0 /* GSspell.m */,
+				18A18CA016FF95F1009E43B0 /* GSspell.service */,
+				18A18CA416FF95F1009E43B0 /* GSspellInfo.plist */,
+				18A18CA516FF95F1009E43B0 /* gclose.m */,
+				18A18CA616FF95F1009E43B0 /* gcloseall.m */,
+				18A18CA716FF95F1009E43B0 /* gopen.m */,
+				18A18CA816FF95F1009E43B0 /* make_services.m */,
+				18A18CA916FF95F1009E43B0 /* obj */,
+				18A18CC116FF95F2009E43B0 /* say */,
+				18A18CC416FF95F2009E43B0 /* set_show_service.m */,
+				18A18CC516FF95F2009E43B0 /* sound */,
+				18A18CCA16FF95F2009E43B0 /* speech */,
+				18A18CD416FF95F2009E43B0 /* wgetopt.h */,
+			);
+			path = Tools;
+			sourceTree = SOURCE_ROOT;
+		};
+		18A18CA016FF95F1009E43B0 /* GSspell.service */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CA116FF95F1009E43B0 /* GSspell */,
+				18A18CA216FF95F1009E43B0 /* Resources */,
+			);
+			path = GSspell.service;
+			sourceTree = "<group>";
+		};
+		18A18CA216FF95F1009E43B0 /* Resources */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CA316FF95F1009E43B0 /* Info-gnustep.plist */,
+			);
+			path = Resources;
+			sourceTree = "<group>";
+		};
+		18A18CA916FF95F1009E43B0 /* obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CAA16FF95F1009E43B0 /* GSspell.obj */,
+				18A18CAD16FF95F1009E43B0 /* gclose */,
+				18A18CAE16FF95F1009E43B0 /* gclose.obj */,
+				18A18CB116FF95F2009E43B0 /* gcloseall */,
+				18A18CB216FF95F2009E43B0 /* gcloseall.obj */,
+				18A18CB516FF95F2009E43B0 /* gopen */,
+				18A18CB616FF95F2009E43B0 /* gopen.obj */,
+				18A18CB916FF95F2009E43B0 /* make_services */,
+				18A18CBA16FF95F2009E43B0 /* make_services.obj */,
+				18A18CBD16FF95F2009E43B0 /* set_show_service */,
+				18A18CBE16FF95F2009E43B0 /* set_show_service.obj */,
+			);
+			path = obj;
+			sourceTree = "<group>";
+		};
+		18A18CAA16FF95F1009E43B0 /* GSspell.obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CAB16FF95F1009E43B0 /* GSspell.m.d */,
+				18A18CAC16FF95F1009E43B0 /* GSspell.m.o */,
+			);
+			path = GSspell.obj;
+			sourceTree = "<group>";
+		};
+		18A18CAE16FF95F1009E43B0 /* gclose.obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CAF16FF95F1009E43B0 /* gclose.m.d */,
+				18A18CB016FF95F1009E43B0 /* gclose.m.o */,
+			);
+			path = gclose.obj;
+			sourceTree = "<group>";
+		};
+		18A18CB216FF95F2009E43B0 /* gcloseall.obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CB316FF95F2009E43B0 /* gcloseall.m.d */,
+				18A18CB416FF95F2009E43B0 /* gcloseall.m.o */,
+			);
+			path = gcloseall.obj;
+			sourceTree = "<group>";
+		};
+		18A18CB616FF95F2009E43B0 /* gopen.obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CB716FF95F2009E43B0 /* gopen.m.d */,
+				18A18CB816FF95F2009E43B0 /* gopen.m.o */,
+			);
+			path = gopen.obj;
+			sourceTree = "<group>";
+		};
+		18A18CBA16FF95F2009E43B0 /* make_services.obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CBB16FF95F2009E43B0 /* make_services.m.d */,
+				18A18CBC16FF95F2009E43B0 /* make_services.m.o */,
+			);
+			path = make_services.obj;
+			sourceTree = "<group>";
+		};
+		18A18CBE16FF95F2009E43B0 /* set_show_service.obj */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CBF16FF95F2009E43B0 /* set_show_service.m.d */,
+				18A18CC016FF95F2009E43B0 /* set_show_service.m.o */,
+			);
+			path = set_show_service.obj;
+			sourceTree = "<group>";
+		};
+		18A18CC116FF95F2009E43B0 /* say */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CC216FF95F2009E43B0 /* GNUmakefile */,
+				18A18CC316FF95F2009E43B0 /* say.m */,
+			);
+			path = say;
+			sourceTree = "<group>";
+		};
+		18A18CC516FF95F2009E43B0 /* sound */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CC616FF95F2009E43B0 /* AudioOutputSink.m */,
+				18A18CC716FF95F2009E43B0 /* GNUmakefile */,
+				18A18CC816FF95F2009E43B0 /* GSOSSSoundSink.m */,
+				18A18CC916FF95F2009E43B0 /* SndfileSource.m */,
+			);
+			path = sound;
+			sourceTree = "<group>";
+		};
+		18A18CCA16FF95F2009E43B0 /* speech */ = {
+			isa = PBXGroup;
+			children = (
+				18A18CCB16FF95F2009E43B0 /* FliteSpeechEngine.m */,
+				18A18CCC16FF95F2009E43B0 /* GNUmakefile */,
+				18A18CCD16FF95F2009E43B0 /* GSSpeechEngine.h */,
+				18A18CCE16FF95F2009E43B0 /* GSSpeechEngine.m */,
+				18A18CCF16FF95F2009E43B0 /* GSSpeechServer.h */,
+				18A18CD016FF95F2009E43B0 /* GSSpeechServer.m */,
+				18A18CD116FF95F2009E43B0 /* GSSpeechSynthesizer.h */,
+				18A18CD216FF95F2009E43B0 /* GSSpeechSynthesizer.m */,
+				18A18CD316FF95F2009E43B0 /* main.m */,
+			);
+			path = speech;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXHeadersBuildPhase section */
+		187527F2169ED7BA001C1D58 /* Headers */ = {
+			isa = PBXHeadersBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				187528E7169EE4A8001C1D58 /* GMAppKit.h in Headers */,
+				187528E8169EE4A8001C1D58 /* GMArchiver.h in Headers */,
+				187528E9169EE4A8001C1D58 /* GSAnimator.h in Headers */,
+				187528EA169EE4A8001C1D58 /* GSCharacterPanel.h in Headers */,
+				187528EB169EE4A8001C1D58 /* GSDisplayServer.h in Headers */,
+				187528EC169EE4A8001C1D58 /* GSDragView.h in Headers */,
+				187528ED169EE4A8001C1D58 /* GSEPSPrintOperation.h in Headers */,
+				187528EE169EE4A8001C1D58 /* GSFontInfo.h in Headers */,
+				187528EF169EE4A8001C1D58 /* GSGhostscriptImageRep.h in Headers */,
+				187528F0169EE4A8001C1D58 /* GSGormLoading.h in Headers */,
+				187528F1169EE4A8001C1D58 /* GSHbox.h in Headers */,
+				187528F2169EE4A8001C1D58 /* GSHelpAttachment.h in Headers */,
+				187528F3169EE4A8001C1D58 /* GSHelpManagerPanel.h in Headers */,
+				187528F4169EE4A8001C1D58 /* GSHorizontalTypesetter.h in Headers */,
+				187528F5169EE4A8001C1D58 /* GSImageMagickImageRep.h in Headers */,
+				187528F6169EE4A8001C1D58 /* GSInfoPanel.h in Headers */,
+				187528F7169EE4A8001C1D58 /* GSInstantiator.h in Headers */,
+				187528F8169EE4A8001C1D58 /* GSLayoutManager.h in Headers */,
+				187528F9169EE4A8001C1D58 /* GSLayoutManager_internal.h in Headers */,
+				187528FA169EE4A8001C1D58 /* GSMemoryPanel.h in Headers */,
+				187528FB169EE4A8001C1D58 /* GSMethodTable.h in Headers */,
+				187528FC169EE4A8001C1D58 /* GSModelLoaderFactory.h in Headers */,
+				187528FD169EE4A8001C1D58 /* GSNibContainer.h in Headers */,
+				187528FE169EE4A8001C1D58 /* GSNibLoading.h in Headers */,
+				187528FF169EE4A8001C1D58 /* GSPDFPrintOperation.h in Headers */,
+				18752900169EE4A8001C1D58 /* GSPasteboardServer.h in Headers */,
+				18752901169EE4A8001C1D58 /* GSPrintOperation.h in Headers */,
+				18752902169EE4A8001C1D58 /* GSPrinting.h in Headers */,
+				18752903169EE4A8001C1D58 /* GSServicesManager.h in Headers */,
+				18752904169EE4A8001C1D58 /* GSSoundSink.h in Headers */,
+				18752905169EE4A8001C1D58 /* GSSoundSource.h in Headers */,
+				18752906169EE4A8001C1D58 /* GSTable.h in Headers */,
+				18752907169EE4A8001C1D58 /* GSTextConverter.h in Headers */,
+				18752908169EE4A8001C1D58 /* GSTheme.h in Headers */,
+				18752909169EE4A8001C1D58 /* GSTitleView.h in Headers */,
+				1875290A169EE4A8001C1D58 /* GSToolbarView.h in Headers */,
+				1875290B169EE4A8001C1D58 /* GSTrackingRect.h in Headers */,
+				1875290C169EE4A8001C1D58 /* GSTypesetter.h in Headers */,
+				1875290D169EE4A8001C1D58 /* GSVbox.h in Headers */,
+				1875290E169EE4A8001C1D58 /* GSVersion.h in Headers */,
+				18752910169EE4A8001C1D58 /* GSWindowDecorationView.h in Headers */,
+				18752911169EE4A8001C1D58 /* GSXibLoading.h in Headers */,
+				18752912169EE4A8001C1D58 /* IMConnectors.h in Headers */,
+				18752913169EE4A8001C1D58 /* IMCustomObject.h in Headers */,
+				18752914169EE4A8001C1D58 /* IMLoading.h in Headers */,
+				18752916169EE4A8001C1D58 /* AppKit.h in Headers */,
+				18752917169EE4A8001C1D58 /* AppKitDefines.h in Headers */,
+				18752918169EE4A8001C1D58 /* AppKitExceptions.h in Headers */,
+				18752919169EE4A8001C1D58 /* DPSOperators.h in Headers */,
+				1875291A169EE4A8001C1D58 /* NSActionCell.h in Headers */,
+				1875291B169EE4A8001C1D58 /* NSAffineTransform.h in Headers */,
+				1875291C169EE4A8001C1D58 /* NSAlert.h in Headers */,
+				1875291D169EE4A8001C1D58 /* NSAnimation.h in Headers */,
+				1875291E169EE4A8001C1D58 /* NSApplication.h in Headers */,
+				1875291F169EE4A8001C1D58 /* NSArrayController.h in Headers */,
+				18752920169EE4A8001C1D58 /* NSAttributedString.h in Headers */,
+				18752921169EE4A8001C1D58 /* NSBezierPath.h in Headers */,
+				18752922169EE4A8001C1D58 /* NSBitmapImageRep.h in Headers */,
+				18752923169EE4A8001C1D58 /* NSBox.h in Headers */,
+				18752924169EE4A8001C1D58 /* NSBrowser.h in Headers */,
+				18752925169EE4A8001C1D58 /* NSBrowserCell.h in Headers */,
+				18752926169EE4A8001C1D58 /* NSButton.h in Headers */,
+				18752927169EE4A8001C1D58 /* NSButtonCell.h in Headers */,
+				18752928169EE4A8001C1D58 /* NSCachedImageRep.h in Headers */,
+				18752929169EE4A8001C1D58 /* NSCell.h in Headers */,
+				1875292A169EE4A8001C1D58 /* NSClipView.h in Headers */,
+				1875292B169EE4A8001C1D58 /* NSColor.h in Headers */,
+				1875292C169EE4A8001C1D58 /* NSColorList.h in Headers */,
+				1875292D169EE4A8001C1D58 /* NSColorPanel.h in Headers */,
+				1875292E169EE4A8001C1D58 /* NSColorPicker.h in Headers */,
+				1875292F169EE4A8001C1D58 /* NSColorPicking.h in Headers */,
+				18752930169EE4A8001C1D58 /* NSColorSpace.h in Headers */,
+				18752931169EE4A8001C1D58 /* NSColorWell.h in Headers */,
+				18752932169EE4A8001C1D58 /* NSComboBox.h in Headers */,
+				18752933169EE4A8001C1D58 /* NSComboBoxCell.h in Headers */,
+				18752934169EE4A8001C1D58 /* NSControl.h in Headers */,
+				18752935169EE4A8001C1D58 /* NSController.h in Headers */,
+				18752936169EE4A8001C1D58 /* NSCursor.h in Headers */,
+				18752937169EE4A8001C1D58 /* NSCustomImageRep.h in Headers */,
+				18752938169EE4A8001C1D58 /* NSDataLink.h in Headers */,
+				18752939169EE4A8001C1D58 /* NSDataLinkManager.h in Headers */,
+				1875293A169EE4A8001C1D58 /* NSDataLinkPanel.h in Headers */,
+				1875293B169EE4A8001C1D58 /* NSDocument.h in Headers */,
+				1875293C169EE4A8001C1D58 /* NSDocumentController.h in Headers */,
+				1875293D169EE4A8001C1D58 /* NSDragging.h in Headers */,
+				1875293E169EE4A8001C1D58 /* NSDrawer.h in Headers */,
+				1875293F169EE4A8001C1D58 /* NSEPSImageRep.h in Headers */,
+				18752940169EE4A8001C1D58 /* NSEvent.h in Headers */,
+				18752941169EE4A8001C1D58 /* NSFileWrapper.h in Headers */,
+				18752942169EE4A8001C1D58 /* NSFont.h in Headers */,
+				18752943169EE4A8001C1D58 /* NSFontDescriptor.h in Headers */,
+				18752944169EE4A8001C1D58 /* NSFontManager.h in Headers */,
+				18752945169EE4A8001C1D58 /* NSFontPanel.h in Headers */,
+				18752946169EE4A8001C1D58 /* NSForm.h in Headers */,
+				18752947169EE4A8001C1D58 /* NSFormCell.h in Headers */,
+				18752948169EE4A8001C1D58 /* NSGlyphGenerator.h in Headers */,
+				18752949169EE4A8001C1D58 /* NSGradient.h in Headers */,
+				1875294A169EE4A8001C1D58 /* NSGraphics.h in Headers */,
+				1875294B169EE4A8001C1D58 /* NSGraphicsContext.h in Headers */,
+				1875294C169EE4A8001C1D58 /* NSHelpManager.h in Headers */,
+				1875294D169EE4A8001C1D58 /* NSHelpPanel.h in Headers */,
+				1875294E169EE4A8001C1D58 /* NSImage.h in Headers */,
+				1875294F169EE4A8001C1D58 /* NSImageCell.h in Headers */,
+				18752950169EE4A8001C1D58 /* NSImageRep.h in Headers */,
+				18752951169EE4A8001C1D58 /* NSImageView.h in Headers */,
+				18752952169EE4A8001C1D58 /* NSInputManager.h in Headers */,
+				18752953169EE4A8001C1D58 /* NSInputServer.h in Headers */,
+				18752954169EE4A8001C1D58 /* NSInterfaceStyle.h in Headers */,
+				18752955169EE4A8001C1D58 /* NSKeyValueBinding.h in Headers */,
+				18752956169EE4A8001C1D58 /* NSLayoutManager.h in Headers */,
+				18752957169EE4A8001C1D58 /* NSLevelIndicator.h in Headers */,
+				18752958169EE4A8001C1D58 /* NSLevelIndicatorCell.h in Headers */,
+				18752959169EE4A8001C1D58 /* NSMatrix.h in Headers */,
+				1875295A169EE4A8001C1D58 /* NSMenu.h in Headers */,
+				1875295B169EE4A8001C1D58 /* NSMenuItem.h in Headers */,
+				1875295C169EE4A8001C1D58 /* NSMenuItemCell.h in Headers */,
+				1875295D169EE4A8001C1D58 /* NSMenuView.h in Headers */,
+				1875295E169EE4A8001C1D58 /* NSMovie.h in Headers */,
+				1875295F169EE4A8001C1D58 /* NSMovieView.h in Headers */,
+				18752960169EE4A8001C1D58 /* NSNib.h in Headers */,
+				18752961169EE4A8001C1D58 /* NSNibConnector.h in Headers */,
+				18752962169EE4A8001C1D58 /* NSNibDeclarations.h in Headers */,
+				18752963169EE4A8001C1D58 /* NSNibLoading.h in Headers */,
+				18752964169EE4A8001C1D58 /* NSObjectController.h in Headers */,
+				18752965169EE4A8001C1D58 /* NSOpenGL.h in Headers */,
+				18752966169EE4A8001C1D58 /* NSOpenGLView.h in Headers */,
+				18752967169EE4A8001C1D58 /* NSOpenPanel.h in Headers */,
+				18752968169EE4A8001C1D58 /* NSOutlineView.h in Headers */,
+				18752969169EE4A8001C1D58 /* NSPageLayout.h in Headers */,
+				1875296A169EE4A8001C1D58 /* NSPanel.h in Headers */,
+				1875296B169EE4A8001C1D58 /* NSParagraphStyle.h in Headers */,
+				1875296C169EE4A8001C1D58 /* NSPasteboard.h in Headers */,
+				1875296D169EE4A8001C1D58 /* NSPopUpButton.h in Headers */,
+				1875296E169EE4A8001C1D58 /* NSPopUpButtonCell.h in Headers */,
+				1875296F169EE4A8001C1D58 /* NSPrintInfo.h in Headers */,
+				18752970169EE4A8001C1D58 /* NSPrintOperation.h in Headers */,
+				18752971169EE4A8001C1D58 /* NSPrintPanel.h in Headers */,
+				18752972169EE4A8001C1D58 /* NSPrinter.h in Headers */,
+				18752973169EE4A8001C1D58 /* NSProgressIndicator.h in Headers */,
+				18752974169EE4A8001C1D58 /* NSResponder.h in Headers */,
+				18752975169EE4A8001C1D58 /* NSRulerMarker.h in Headers */,
+				18752976169EE4A8001C1D58 /* NSRulerView.h in Headers */,
+				18752977169EE4A8001C1D58 /* NSSavePanel.h in Headers */,
+				18752978169EE4A8001C1D58 /* NSScreen.h in Headers */,
+				18752979169EE4A8001C1D58 /* NSScrollView.h in Headers */,
+				1875297A169EE4A8001C1D58 /* NSScroller.h in Headers */,
+				1875297B169EE4A8001C1D58 /* NSSearchField.h in Headers */,
+				1875297C169EE4A8001C1D58 /* NSSearchFieldCell.h in Headers */,
+				1875297D169EE4A8001C1D58 /* NSSecureTextField.h in Headers */,
+				1875297E169EE4A8001C1D58 /* NSSegmentedCell.h in Headers */,
+				1875297F169EE4A8001C1D58 /* NSSegmentedControl.h in Headers */,
+				18752980169EE4A8001C1D58 /* NSSelection.h in Headers */,
+				18752981169EE4A8001C1D58 /* NSShadow.h in Headers */,
+				18752982169EE4A8001C1D58 /* NSSlider.h in Headers */,
+				18752983169EE4A8001C1D58 /* NSSliderCell.h in Headers */,
+				18752984169EE4A8001C1D58 /* NSSound.h in Headers */,
+				18752985169EE4A8001C1D58 /* NSSpeechSynthesizer.h in Headers */,
+				18752986169EE4A8001C1D58 /* NSSpellChecker.h in Headers */,
+				18752987169EE4A8001C1D58 /* NSSpellProtocol.h in Headers */,
+				18752988169EE4A8001C1D58 /* NSSpellServer.h in Headers */,
+				18752989169EE4A8001C1D58 /* NSSplitView.h in Headers */,
+				1875298A169EE4A8001C1D58 /* NSStepper.h in Headers */,
+				1875298B169EE4A8001C1D58 /* NSStepperCell.h in Headers */,
+				1875298C169EE4A8001C1D58 /* NSStringDrawing.h in Headers */,
+				1875298D169EE4A8001C1D58 /* NSTabView.h in Headers */,
+				1875298E169EE4A8001C1D58 /* NSTabViewItem.h in Headers */,
+				1875298F169EE4A8001C1D58 /* NSTableColumn.h in Headers */,
+				18752990169EE4A8001C1D58 /* NSTableHeaderCell.h in Headers */,
+				18752991169EE4A8001C1D58 /* NSTableHeaderView.h in Headers */,
+				18752992169EE4A8001C1D58 /* NSTableView.h in Headers */,
+				18752993169EE4A8001C1D58 /* NSText.h in Headers */,
+				18752994169EE4A8001C1D58 /* NSTextAttachment.h in Headers */,
+				18752995169EE4A8001C1D58 /* NSTextContainer.h in Headers */,
+				18752996169EE4A8001C1D58 /* NSTextField.h in Headers */,
+				18752997169EE4A8001C1D58 /* NSTextFieldCell.h in Headers */,
+				18752998169EE4A8001C1D58 /* NSTextList.h in Headers */,
+				18752999169EE4A8001C1D58 /* NSTextStorage.h in Headers */,
+				1875299A169EE4A8001C1D58 /* NSTextTable.h in Headers */,
+				1875299B169EE4A8001C1D58 /* NSTextView.h in Headers */,
+				1875299C169EE4A8001C1D58 /* NSTokenField.h in Headers */,
+				1875299D169EE4A8001C1D58 /* NSTokenFieldCell.h in Headers */,
+				1875299E169EE4A8001C1D58 /* NSToolbar.h in Headers */,
+				1875299F169EE4A8001C1D58 /* NSToolbarItem.h in Headers */,
+				187529A0169EE4A8001C1D58 /* NSToolbarItemGroup.h in Headers */,
+				187529A1169EE4A8001C1D58 /* NSTreeController.h in Headers */,
+				187529A2169EE4A8001C1D58 /* NSTreeNode.h in Headers */,
+				187529A3169EE4A8001C1D58 /* NSUserDefaultsController.h in Headers */,
+				187529A4169EE4A8001C1D58 /* NSUserInterfaceValidation.h in Headers */,
+				187529A5169EE4A8001C1D58 /* NSView.h in Headers */,
+				187529A6169EE4A8001C1D58 /* NSViewController.h in Headers */,
+				187529A7169EE4A8001C1D58 /* NSWindow.h in Headers */,
+				187529A8169EE4A8001C1D58 /* NSWindowController.h in Headers */,
+				187529A9169EE4A8001C1D58 /* NSWorkspace.h in Headers */,
+				187529AA169EE4A8001C1D58 /* PSOperators.h in Headers */,
+				187529AB169EE4A8001C1D58 /* Cocoa.h in Headers */,
+				18752A9E169EE4B8001C1D58 /* GSBindingHelpers.h in Headers */,
+				18752AA3169EE4B8001C1D58 /* GSFastEnumeration.h in Headers */,
+				18752AA9169EE4B8001C1D58 /* GSGuiPrivate.h in Headers */,
+				18752AAE169EE4B8001C1D58 /* GSIconManager.h in Headers */,
+				18752AB2169EE4B8001C1D58 /* GSKeyBindingAction.h in Headers */,
+				18752AB4169EE4B8001C1D58 /* GSKeyBindingTable.h in Headers */,
+				18752ABF169EE4B8001C1D58 /* GSSlideView.h in Headers */,
+				18752AC3169EE4B8001C1D58 /* GSTextFinder.h in Headers */,
+				18752AC5169EE4B8001C1D58 /* GSTextStorage.h in Headers */,
+				18752ACD169EE4B8001C1D58 /* GSThemePrivate.h in Headers */,
+				18752AD0169EE4B8001C1D58 /* GSToolTips.h in Headers */,
+				18752AD2169EE4B8001C1D58 /* GSToolbarCustomizationPalette.h in Headers */,
+				18752AE4169EE4B8001C1D58 /* NSBitmapImageRep+GIF.h in Headers */,
+				18752AE6169EE4B8001C1D58 /* NSBitmapImageRep+ICNS.h in Headers */,
+				18752AE8169EE4B8001C1D58 /* NSBitmapImageRep+JPEG.h in Headers */,
+				18752AEA169EE4B8001C1D58 /* NSBitmapImageRep+PNG.h in Headers */,
+				18752AEC169EE4B8001C1D58 /* NSBitmapImageRep+PNM.h in Headers */,
+				18752AF5169EE4B8001C1D58 /* NSButtonImageSource.h in Headers */,
+				18752B0B169EE4B8001C1D58 /* NSDocumentFrameworkPrivate.h in Headers */,
+				18752B6E169EE4B8001C1D58 /* NSToolbarFrameworkPrivate.h in Headers */,
+				18752B75169EE4B8001C1D58 /* NSViewPrivate.h in Headers */,
+				18752B7B169EE4B8001C1D58 /* nsimage-tiff.h in Headers */,
+				18A18B1E16FF94F4009E43B0 /* AppKit-Prefix.pch in Headers */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXHeadersBuildPhase section */
+
+/* Begin PBXNativeTarget section */
+		187527F4169ED7BA001C1D58 /* AppKit */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 1875280A169ED7BA001C1D58 /* Build configuration list for PBXNativeTarget "AppKit" */;
+			buildPhases = (
+				187527F0169ED7BA001C1D58 /* Sources */,
+				187527F1169ED7BA001C1D58 /* Frameworks */,
+				187527F2169ED7BA001C1D58 /* Headers */,
+				187527F3169ED7BA001C1D58 /* Resources */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = AppKit;
+			productName = ApplicationKit;
+			productReference = 187527F5169ED7BA001C1D58 /* AppKit.framework */;
+			productType = "com.apple.product-type.framework";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		187527EB169ED7BA001C1D58 /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 0420;
+			};
+			buildConfigurationList = 187527EE169ED7BA001C1D58 /* Build configuration list for PBXProject "ApplicationKit" */;
+			compatibilityVersion = "Xcode 3.2";
+			developmentRegion = English;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				English,
+				Esperanto,
+				French,
+				German,
+				Italian,
+				Lojban,
+				Spanish,
+			);
+			mainGroup = 187527E9169ED7BA001C1D58;
+			productRefGroup = 187527F6169ED7BA001C1D58 /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				187527F4169ED7BA001C1D58 /* AppKit */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXResourcesBuildPhase section */
+		187527F3169ED7BA001C1D58 /* Resources */ = {
+			isa = PBXResourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXResourcesBuildPhase section */
+
+/* Begin PBXSourcesBuildPhase section */
+		187527F0169ED7BA001C1D58 /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				18752A99169EE4B8001C1D58 /* Functions.m in Sources */,
+				18752A9D169EE4B8001C1D58 /* GSAnimator.m in Sources */,
+				18752A9F169EE4B8001C1D58 /* GSCharacterPanel.m in Sources */,
+				18752AA0169EE4B8001C1D58 /* GSDisplayServer.m in Sources */,
+				18752AA1169EE4B8001C1D58 /* GSDragView.m in Sources */,
+				18752AA2169EE4B8001C1D58 /* GSEPSPrintOperation.m in Sources */,
+				18752AA4169EE4B8001C1D58 /* GSFontInfo.m in Sources */,
+				18752AA5169EE4B8001C1D58 /* GSGModelLoader.m in Sources */,
+				18752AA6169EE4B8001C1D58 /* GSGhostscriptImageRep.m in Sources */,
+				18752AA7169EE4B8001C1D58 /* GSGormLoader.m in Sources */,
+				18752AA8169EE4B8001C1D58 /* GSGormLoading.m in Sources */,
+				18752AAA169EE4B8001C1D58 /* GSHbox.m in Sources */,
+				18752AAB169EE4B8001C1D58 /* GSHelpAttachment.m in Sources */,
+				18752AAC169EE4B8001C1D58 /* GSHelpManagerPanel.m in Sources */,
+				18752AAD169EE4B8001C1D58 /* GSHorizontalTypesetter.m in Sources */,
+				18752AAF169EE4B8001C1D58 /* GSIconManager.m in Sources */,
+				18752AB0169EE4B8001C1D58 /* GSImageMagickImageRep.m in Sources */,
+				18752AB1169EE4B8001C1D58 /* GSInfoPanel.m in Sources */,
+				18752AB3169EE4B8001C1D58 /* GSKeyBindingAction.m in Sources */,
+				18752AB5169EE4B8001C1D58 /* GSKeyBindingTable.m in Sources */,
+				18752AB6169EE4B8001C1D58 /* GSLayoutManager.m in Sources */,
+				18752AB7169EE4B8001C1D58 /* GSMemoryPanel.m in Sources */,
+				18752AB8169EE4B8001C1D58 /* GSModelLoaderFactory.m in Sources */,
+				18752AB9169EE4B8001C1D58 /* GSNibLoader.m in Sources */,
+				18752ABA169EE4B8001C1D58 /* GSNibLoading.m in Sources */,
+				18752ABB169EE4B8001C1D58 /* GSPDFPrintOperation.m in Sources */,
+				18752ABC169EE4B8001C1D58 /* GSPrintOperation.m in Sources */,
+				18752ABD169EE4B8001C1D58 /* GSPrinting.m in Sources */,
+				18752ABE169EE4B8001C1D58 /* GSServicesManager.m in Sources */,
+				18752AC0169EE4B8001C1D58 /* GSSlideView.m in Sources */,
+				18752AC1169EE4B8001C1D58 /* GSStandardWindowDecorationView.m in Sources */,
+				18752AC2169EE4B8001C1D58 /* GSTable.m in Sources */,
+				18752AC4169EE4B8001C1D58 /* GSTextFinder.m in Sources */,
+				18752AC6169EE4B8001C1D58 /* GSTextStorage.m in Sources */,
+				18752AC7169EE4B8001C1D58 /* GSTheme.m in Sources */,
+				18752AC8169EE4B8001C1D58 /* GSThemeDrawing.m in Sources */,
+				18752AC9169EE4B8001C1D58 /* GSThemeInspector.m in Sources */,
+				18752ACA169EE4B8001C1D58 /* GSThemeMenu.m in Sources */,
+				18752ACB169EE4B8001C1D58 /* GSThemeOpenSavePanels.m in Sources */,
+				18752ACC169EE4B8001C1D58 /* GSThemePanel.m in Sources */,
+				18752ACE169EE4B8001C1D58 /* GSThemeTools.m in Sources */,
+				18752ACF169EE4B8001C1D58 /* GSTitleView.m in Sources */,
+				18752AD1169EE4B8001C1D58 /* GSToolTips.m in Sources */,
+				18752AD3169EE4B8001C1D58 /* GSToolbarCustomizationPalette.m in Sources */,
+				18752AD4169EE4B8001C1D58 /* GSToolbarView.m in Sources */,
+				18752AD5169EE4B8001C1D58 /* GSTrackingRect.m in Sources */,
+				18752AD6169EE4B8001C1D58 /* GSTypesetter.m in Sources */,
+				18752AD7169EE4B8001C1D58 /* GSVbox.m in Sources */,
+				18752AD8169EE4B8001C1D58 /* GSWindowDecorationView.m in Sources */,
+				18752AD9169EE4B8001C1D58 /* GSXibLoader.m in Sources */,
+				18752ADA169EE4B8001C1D58 /* GSXibLoading.m in Sources */,
+				18752ADC169EE4B8001C1D58 /* NSActionCell.m in Sources */,
+				18752ADD169EE4B8001C1D58 /* NSAffineTransform.m in Sources */,
+				18752ADE169EE4B8001C1D58 /* NSAlert.m in Sources */,
+				18752ADF169EE4B8001C1D58 /* NSAnimation.m in Sources */,
+				18752AE0169EE4B8001C1D58 /* NSApplication.m in Sources */,
+				18752AE1169EE4B8001C1D58 /* NSArrayController.m in Sources */,
+				18752AE2169EE4B8001C1D58 /* NSAttributedString.m in Sources */,
+				18752AE3169EE4B8001C1D58 /* NSBezierPath.m in Sources */,
+				18752AE5169EE4B8001C1D58 /* NSBitmapImageRep+GIF.m in Sources */,
+				18752AE7169EE4B8001C1D58 /* NSBitmapImageRep+ICNS.m in Sources */,
+				18752AE9169EE4B8001C1D58 /* NSBitmapImageRep+JPEG.m in Sources */,
+				18752AEB169EE4B8001C1D58 /* NSBitmapImageRep+PNG.m in Sources */,
+				18752AED169EE4B8001C1D58 /* NSBitmapImageRep+PNM.m in Sources */,
+				18752AEE169EE4B8001C1D58 /* NSBitmapImageRep.m in Sources */,
+				18752AEF169EE4B8001C1D58 /* NSBox.m in Sources */,
+				18752AF0169EE4B8001C1D58 /* NSBrowser.m in Sources */,
+				18752AF1169EE4B8001C1D58 /* NSBrowserCell.m in Sources */,
+				18752AF2169EE4B8001C1D58 /* NSBundleAdditions.m in Sources */,
+				18752AF3169EE4B8001C1D58 /* NSButton.m in Sources */,
+				18752AF4169EE4B8001C1D58 /* NSButtonCell.m in Sources */,
+				18752AF7169EE4B8001C1D58 /* NSCachedImageRep.m in Sources */,
+				18752AF8169EE4B8001C1D58 /* NSCell.m in Sources */,
+				18752AF9169EE4B8001C1D58 /* NSClipView.m in Sources */,
+				18752AFA169EE4B8001C1D58 /* NSColor.m in Sources */,
+				18752AFB169EE4B8001C1D58 /* NSColorList.m in Sources */,
+				18752AFC169EE4B8001C1D58 /* NSColorPanel.m in Sources */,
+				18752AFD169EE4B8001C1D58 /* NSColorPicker.m in Sources */,
+				18752AFE169EE4B8001C1D58 /* NSColorSpace.m in Sources */,
+				18752AFF169EE4B8001C1D58 /* NSColorWell.m in Sources */,
+				18752B00169EE4B8001C1D58 /* NSComboBox.m in Sources */,
+				18752B01169EE4B8001C1D58 /* NSComboBoxCell.m in Sources */,
+				18752B02169EE4B8001C1D58 /* NSControl.m in Sources */,
+				18752B03169EE4B8001C1D58 /* NSController.m in Sources */,
+				18752B04169EE4B8001C1D58 /* NSCursor.m in Sources */,
+				18752B05169EE4B8001C1D58 /* NSCustomImageRep.m in Sources */,
+				18752B06169EE4B8001C1D58 /* NSDataLink.m in Sources */,
+				18752B07169EE4B8001C1D58 /* NSDataLinkManager.m in Sources */,
+				18752B08169EE4B8001C1D58 /* NSDataLinkPanel.m in Sources */,
+				18752B09169EE4B8001C1D58 /* NSDocument.m in Sources */,
+				18752B0A169EE4B8001C1D58 /* NSDocumentController.m in Sources */,
+				18752B0C169EE4B8001C1D58 /* NSDrawer.m in Sources */,
+				18752B0D169EE4B8001C1D58 /* NSEPSImageRep.m in Sources */,
+				18752B0E169EE4B8001C1D58 /* NSEvent.m in Sources */,
+				18752B0F169EE4B8001C1D58 /* NSFileWrapper.m in Sources */,
+				18752B10169EE4B8001C1D58 /* NSFont.m in Sources */,
+				18752B11169EE4B8001C1D58 /* NSFontDescriptor.m in Sources */,
+				18752B12169EE4B8001C1D58 /* NSFontManager.m in Sources */,
+				18752B13169EE4B8001C1D58 /* NSFontPanel.m in Sources */,
+				18752B14169EE4B8001C1D58 /* NSForm.m in Sources */,
+				18752B15169EE4B8001C1D58 /* NSFormCell.m in Sources */,
+				18752B16169EE4B8001C1D58 /* NSGlyphGenerator.m in Sources */,
+				18752B17169EE4B8001C1D58 /* NSGradient.m in Sources */,
+				18752B18169EE4B8001C1D58 /* NSGraphicsContext.m in Sources */,
+				18752B19169EE4B8001C1D58 /* NSHelpManager.m in Sources */,
+				18752B1A169EE4B8001C1D58 /* NSHelpPanel.m in Sources */,
+				18752B1B169EE4B8001C1D58 /* NSImage.m in Sources */,
+				18752B1C169EE4B8001C1D58 /* NSImageCell.m in Sources */,
+				18752B1D169EE4B8001C1D58 /* NSImageRep.m in Sources */,
+				18752B1E169EE4B8001C1D58 /* NSImageView.m in Sources */,
+				18752B1F169EE4B8001C1D58 /* NSInputManager.m in Sources */,
+				18752B20169EE4B8001C1D58 /* NSInputServer.m in Sources */,
+				18752B21169EE4B8001C1D58 /* NSInterfaceStyle.m in Sources */,
+				18752B22169EE4B8001C1D58 /* NSKeyValueBinding.m in Sources */,
+				18752B23169EE4B8001C1D58 /* NSLayoutManager.m in Sources */,
+				18752B24169EE4B8001C1D58 /* NSLevelIndicator.m in Sources */,
+				18752B25169EE4B8001C1D58 /* NSLevelIndicatorCell.m in Sources */,
+				18752B26169EE4B8001C1D58 /* NSMatrix.m in Sources */,
+				18752B27169EE4B8001C1D58 /* NSMenu.m in Sources */,
+				18752B28169EE4B8001C1D58 /* NSMenuItem.m in Sources */,
+				18752B29169EE4B8001C1D58 /* NSMenuItemCell.m in Sources */,
+				18752B2A169EE4B8001C1D58 /* NSMenuView.m in Sources */,
+				18752B2B169EE4B8001C1D58 /* NSMovie.m in Sources */,
+				18752B2C169EE4B8001C1D58 /* NSMovieView.m in Sources */,
+				18752B2D169EE4B8001C1D58 /* NSNib.m in Sources */,
+				18752B2E169EE4B8001C1D58 /* NSNibAXAttributeConnector.m in Sources */,
+				18752B2F169EE4B8001C1D58 /* NSNibAXRelationshipConnector.m in Sources */,
+				18752B30169EE4B8001C1D58 /* NSNibBindingConnector.m in Sources */,
+				18752B31169EE4B8001C1D58 /* NSObjectController.m in Sources */,
+				18752B32169EE4B8001C1D58 /* NSOpenGLContext.m in Sources */,
+				18752B33169EE4B8001C1D58 /* NSOpenGLPixelFormat.m in Sources */,
+				18752B34169EE4B8001C1D58 /* NSOpenGLView.m in Sources */,
+				18752B35169EE4B8001C1D58 /* NSOpenPanel.m in Sources */,
+				18752B36169EE4B8001C1D58 /* NSOutlineView.m in Sources */,
+				18752B37169EE4B8001C1D58 /* NSPageLayout.m in Sources */,
+				18752B38169EE4B8001C1D58 /* NSPanel.m in Sources */,
+				18752B39169EE4B8001C1D58 /* NSParagraphStyle.m in Sources */,
+				18752B3A169EE4B8001C1D58 /* NSPasteboard.m in Sources */,
+				18752B3B169EE4B8001C1D58 /* NSPopUpButton.m in Sources */,
+				18752B3C169EE4B8001C1D58 /* NSPopUpButtonCell.m in Sources */,
+				18752B3D169EE4B8001C1D58 /* NSPrintInfo.m in Sources */,
+				18752B3E169EE4B8001C1D58 /* NSPrintOperation.m in Sources */,
+				18752B3F169EE4B8001C1D58 /* NSPrintPanel.m in Sources */,
+				18752B40169EE4B8001C1D58 /* NSPrinter.m in Sources */,
+				18752B41169EE4B8001C1D58 /* NSProgressIndicator.m in Sources */,
+				18752B42169EE4B8001C1D58 /* NSResponder.m in Sources */,
+				18752B43169EE4B8001C1D58 /* NSRulerMarker.m in Sources */,
+				18752B44169EE4B8001C1D58 /* NSRulerView.m in Sources */,
+				18752B45169EE4B8001C1D58 /* NSSavePanel.m in Sources */,
+				18752B46169EE4B8001C1D58 /* NSScreen.m in Sources */,
+				18752B47169EE4B8001C1D58 /* NSScrollView.m in Sources */,
+				18752B48169EE4B8001C1D58 /* NSScroller.m in Sources */,
+				18752B49169EE4B8001C1D58 /* NSSearchField.m in Sources */,
+				18752B4A169EE4B8001C1D58 /* NSSearchFieldCell.m in Sources */,
+				18752B4B169EE4B8001C1D58 /* NSSecureTextField.m in Sources */,
+				18752B4C169EE4B8001C1D58 /* NSSegmentedCell.m in Sources */,
+				18752B4D169EE4B8001C1D58 /* NSSegmentedControl.m in Sources */,
+				18752B4E169EE4B8001C1D58 /* NSSelection.m in Sources */,
+				18752B4F169EE4B8001C1D58 /* NSShadow.m in Sources */,
+				18752B50169EE4B8001C1D58 /* NSSlider.m in Sources */,
+				18752B51169EE4B8001C1D58 /* NSSliderCell.m in Sources */,
+				18752B52169EE4B8001C1D58 /* NSSound.m in Sources */,
+				18752B53169EE4B8001C1D58 /* NSSpeechSynthesizer.m in Sources */,
+				18752B54169EE4B8001C1D58 /* NSSpellChecker.m in Sources */,
+				18752B55169EE4B8001C1D58 /* NSSplitView.m in Sources */,
+				18752B56169EE4B8001C1D58 /* NSStepper.m in Sources */,
+				18752B57169EE4B8001C1D58 /* NSStepperCell.m in Sources */,
+				18752B58169EE4B8001C1D58 /* NSStringDrawing.m in Sources */,
+				18752B59169EE4B8001C1D58 /* NSTabView.m in Sources */,
+				18752B5A169EE4B8001C1D58 /* NSTabViewItem.m in Sources */,
+				18752B5B169EE4B8001C1D58 /* NSTableColumn.m in Sources */,
+				18752B5C169EE4B8001C1D58 /* NSTableHeaderCell.m in Sources */,
+				18752B5D169EE4B8001C1D58 /* NSTableHeaderView.m in Sources */,
+				18752B5E169EE4B8001C1D58 /* NSTableView.m in Sources */,
+				18752B5F169EE4B8001C1D58 /* NSText.m in Sources */,
+				18752B60169EE4B8001C1D58 /* NSTextAttachment.m in Sources */,
+				18752B61169EE4B8001C1D58 /* NSTextBlock.m in Sources */,
+				18752B62169EE4B8001C1D58 /* NSTextContainer.m in Sources */,
+				18752B63169EE4B8001C1D58 /* NSTextField.m in Sources */,
+				18752B64169EE4B8001C1D58 /* NSTextFieldCell.m in Sources */,
+				18752B65169EE4B8001C1D58 /* NSTextList.m in Sources */,
+				18752B66169EE4B8001C1D58 /* NSTextStorage.m in Sources */,
+				18752B67169EE4B8001C1D58 /* NSTextTable.m in Sources */,
+				18752B68169EE4B8001C1D58 /* NSTextTableBlock.m in Sources */,
+				18752B69169EE4B8001C1D58 /* NSTextView.m in Sources */,
+				18752B6A169EE4B8001C1D58 /* NSTextView_actions.m in Sources */,
+				18752B6B169EE4B8001C1D58 /* NSTokenField.m in Sources */,
+				18752B6C169EE4B8001C1D58 /* NSTokenFieldCell.m in Sources */,
+				18752B6D169EE4B8001C1D58 /* NSToolbar.m in Sources */,
+				18752B6F169EE4B8001C1D58 /* NSToolbarItem.m in Sources */,
+				18752B70169EE4B8001C1D58 /* NSToolbarItemGroup.m in Sources */,
+				18752B71169EE4B8001C1D58 /* NSTreeController.m in Sources */,
+				18752B72169EE4B8001C1D58 /* NSUserDefaultsController.m in Sources */,
+				18752B73169EE4B8001C1D58 /* NSView.m in Sources */,
+				18752B74169EE4B8001C1D58 /* NSViewController.m in Sources */,
+				18752B76169EE4B8001C1D58 /* NSWindow.m in Sources */,
+				18752B77169EE4B8001C1D58 /* NSWindowController.m in Sources */,
+				18752B78169EE4B8001C1D58 /* NSWorkspace.m in Sources */,
+				18752B79169EE4B8001C1D58 /* externs.m in Sources */,
+				18752B7A169EE4B8001C1D58 /* linking.m in Sources */,
+				18752B7C169EE4B8001C1D58 /* tiff.m in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin PBXVariantGroup section */
+		18A18BF816FF9598009E43B0 /* Generic-PostScript_Printer-Postscript.ppd */ = {
+			isa = PBXVariantGroup;
+			children = (
+				18A18BF916FF9598009E43B0 /* English */,
+			);
+			name = "Generic-PostScript_Printer-Postscript.ppd";
+			sourceTree = "<group>";
+		};
+		18A18C2F16FF95B6009E43B0 /* Localizable.strings */ = {
+			isa = PBXVariantGroup;
+			children = (
+				18A18C3016FF95B6009E43B0 /* English */,
+				18A18C3116FF95B6009E43B0 /* Esperanto */,
+				18A18C3216FF95B6009E43B0 /* French */,
+				18A18C3416FF95B6009E43B0 /* German */,
+				18A18C3516FF95B6009E43B0 /* Italian */,
+				18A18C3616FF95B6009E43B0 /* Lojban */,
+				18A18C3716FF95B6009E43B0 /* Spanish */,
+			);
+			name = Localizable.strings;
+			sourceTree = "<group>";
+		};
+/* End PBXVariantGroup section */
+
+/* Begin XCBuildConfiguration section */
+		18752808169ED7BA001C1D58 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				ARCHS = "$(ARCHS_STANDARD_64_BIT)";
+				COPY_PHASE_STRIP = NO;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
+				GCC_VERSION = com.apple.compilers.llvm.clang.1_0;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.6;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = macosx;
+			};
+			name = Debug;
+		};
+		18752809169ED7BA001C1D58 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				ARCHS = "$(ARCHS_STANDARD_64_BIT)";
+				COPY_PHASE_STRIP = YES;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
+				GCC_VERSION = com.apple.compilers.llvm.clang.1_0;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				MACOSX_DEPLOYMENT_TARGET = 10.6;
+				SDKROOT = macosx;
+			};
+			name = Release;
+		};
+		1875280B169ED7BA001C1D58 /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = YES;
+				DYLIB_COMPATIBILITY_VERSION = 1;
+				DYLIB_CURRENT_VERSION = 1;
+				FRAMEWORK_VERSION = A;
+				GCC_PRECOMPILE_PREFIX_HEADER = NO;
+				GCC_PREFIX_HEADER = "Support/AppKit/AppKit-Prefix.pch";
+				HEADER_SEARCH_PATHS = (
+					/opt/local/include,
+					/usr/GNUstep/Local/Library/Headers,
+					"$(SRCROOT)/Headers",
+				);
+				INFOPLIST_FILE = "Support/AppKit/AppKit-Info.plist";
+				LIBRARY_SEARCH_PATHS = (
+					/opt/local/lib,
+					/usr/GNUstep/Local/Library/Libraries,
+				);
+				OTHER_CFLAGS = (
+					"-DBACKEND_BUNDLE",
+					"-DGNUSTEP",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				USER_HEADER_SEARCH_PATHS = "Headers/Additions/GNUstepGUI Headers/Additions/ Headers/";
+				WRAPPER_EXTENSION = framework;
+			};
+			name = Debug;
+		};
+		1875280C169ED7BA001C1D58 /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = YES;
+				DYLIB_COMPATIBILITY_VERSION = 1;
+				DYLIB_CURRENT_VERSION = 1;
+				FRAMEWORK_VERSION = A;
+				GCC_PRECOMPILE_PREFIX_HEADER = NO;
+				GCC_PREFIX_HEADER = "Support/AppKit/AppKit-Prefix.pch";
+				HEADER_SEARCH_PATHS = (
+					/opt/local/include,
+					/usr/GNUstep/Local/Library/Headers,
+					"$(SRCROOT)/Headers",
+				);
+				INFOPLIST_FILE = "Support/AppKit/AppKit-Info.plist";
+				LIBRARY_SEARCH_PATHS = (
+					/opt/local/lib,
+					/usr/GNUstep/Local/Library/Libraries,
+				);
+				OTHER_CFLAGS = (
+					"-DBACKEND_BUNDLE",
+					"-DGNUSTEP",
+				);
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				USER_HEADER_SEARCH_PATHS = "Headers/Additions/GNUstepGUI Headers/Additions/ Headers/";
+				WRAPPER_EXTENSION = framework;
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		187527EE169ED7BA001C1D58 /* Build configuration list for PBXProject "ApplicationKit" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				18752808169ED7BA001C1D58 /* Debug */,
+				18752809169ED7BA001C1D58 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		1875280A169ED7BA001C1D58 /* Build configuration list for PBXNativeTarget "AppKit" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				1875280B169ED7BA001C1D58 /* Debug */,
+				1875280C169ED7BA001C1D58 /* Release */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 187527EB169ED7BA001C1D58 /* Project object */;
+}
diff --git a/Headers/Additions/GNUstepGUI/GSDisplayServer.h b/Headers/Additions/GNUstepGUI/GSDisplayServer.h
index 4162641..7cf9ea2 100644
--- a/Headers/Additions/GNUstepGUI/GSDisplayServer.h
+++ b/Headers/Additions/GNUstepGUI/GSDisplayServer.h
@@ -91,21 +91,21 @@ APPKIT_EXPORT NSString *GSScreenNumber;
 - (NSCountedSet*) dragTypesForWindow: (NSWindow *)win;
 - (id <NSDraggingInfo>) dragInfo;
 - (BOOL) slideImage: (NSImage*)image from: (NSPoint)from to: (NSPoint)to;
-- (void) restrictWindow: (int)win toImage: (NSImage*)image;
-- (int) findWindowAt: (NSPoint)screenLocation 
-           windowRef: (int*)windowRef 
-           excluding: (int)win;
+- (void) restrictWindow: (NSInteger)win toImage: (NSImage*)image;
+- (NSInteger) findWindowAt: (NSPoint)screenLocation 
+                 windowRef: (NSInteger*)windowRef 
+                 excluding: (NSInteger)win;
 
 
 /* Screen information */
-- (NSSize) resolutionForScreen: (int)screen;
-- (NSRect) boundsForScreen: (int)screen;
-- (NSWindowDepth) windowDepthForScreen: (int)screen;
-- (const NSWindowDepth *) availableDepthsForScreen: (int)screen;
+- (NSSize) resolutionForScreen: (NSInteger)screen;
+- (NSRect) boundsForScreen: (NSInteger)screen;
+- (NSWindowDepth) windowDepthForScreen: (NSInteger)screen;
+- (const NSWindowDepth *) availableDepthsForScreen: (NSInteger)screen;
 - (NSArray *) screenList;
 
 - (void *) serverDevice;
-- (void *) windowDevice: (int)win;
+- (void *) windowDevice: (NSInteger)win;
 
 - (void) beep;
 
@@ -114,7 +114,7 @@ APPKIT_EXPORT NSString *GSScreenNumber;
 - (NSSize) iconSize;
 
 /* Screen capture */ 
-- (NSImage *) contentsOfScreen: (int)screen inRect: (NSRect)rect;
+- (NSImage *) contentsOfScreen: (NSInteger)screen inRect: (NSRect)rect;
 
 @end
 
@@ -122,59 +122,59 @@ APPKIT_EXPORT NSString *GSScreenNumber;
 /* GNUstep Window operations */
 /* ----------------------------------------------------------------------- */
 @interface GSDisplayServer (WindowOps)
-- (void) _setWindowOwnedByServer: (int)win;
-- (int) window: (NSRect)frame : (NSBackingStoreType)type : (unsigned int)style;
-- (int) window: (NSRect)frame : (NSBackingStoreType)type : (unsigned int)style
-	      : (int)screen;
-- (void) termwindow: (int)win;
-- (int) nativeWindow: (void *)winref : (NSRect*)frame : (NSBackingStoreType*)type 
-                    : (unsigned int*)style : (int*)screen;
+- (void) _setWindowOwnedByServer: (NSInteger)win;
+- (NSInteger) window: (NSRect)frame : (NSBackingStoreType)type : (NSUInteger)style;
+- (NSInteger) window: (NSRect)frame : (NSBackingStoreType)type : (NSUInteger)style
+                    : (NSInteger)screen;
+- (void) termwindow: (NSInteger)win;
+- (NSInteger) nativeWindow: (void *)winref : (NSRect*)frame : (NSBackingStoreType*)type 
+                          : (NSUInteger*)style : (NSInteger*)screen;
 
 /* Only if handlesWindowDecorations returns YES. */
-- (void) stylewindow: (unsigned int)style : (int)win;
+- (void) stylewindow: (NSUInteger)style : (NSInteger)win;
 
-- (void) windowbacking: (NSBackingStoreType)type : (int)win;
-- (void) titlewindow: (NSString *)window_title : (int)win;
-- (void) miniwindow: (int)win;
+- (void) windowbacking: (NSBackingStoreType)type : (NSInteger)win;
+- (void) titlewindow: (NSString *)window_title : (NSInteger)win;
+- (void) miniwindow: (NSInteger)win;
 - (BOOL) appOwnsMiniwindow;
-- (void) setWindowdevice: (int)win forContext: (NSGraphicsContext *)ctxt;
+- (void) setWindowdevice: (NSInteger)win forContext: (NSGraphicsContext *)ctxt;
 // Deprecated
-- (void) windowdevice: (int) winNum;
-- (void) orderwindow: (int)op : (int)otherWin : (int)win;
-- (void) movewindow: (NSPoint)loc : (int)win;
-- (void) placewindow: (NSRect)frame : (int)win;
-- (NSRect) windowbounds: (int)win;
-- (void) setwindowlevel: (int)level : (int)win;
-- (int) windowlevel: (int)win;
+- (void) windowdevice: (NSInteger) winNum;
+- (void) orderwindow: (NSInteger)op : (NSInteger)otherWin : (NSInteger)win;
+- (void) movewindow: (NSPoint)loc : (NSInteger)win;
+- (void) placewindow: (NSRect)frame : (NSInteger)win;
+- (NSRect) windowbounds: (NSInteger)win;
+- (void) setwindowlevel: (NSInteger)level : (NSInteger)win;
+- (NSInteger) windowlevel: (NSInteger)win;
 - (NSArray *) windowlist;
-- (int) windowdepth: (int)win;
-- (void) setmaxsize: (NSSize)size : (int)win;
-- (void) setminsize: (NSSize)size : (int)win;
-- (void) setresizeincrements: (NSSize)size : (int)win;
-- (void) flushwindowrect: (NSRect)rect : (int)win;
-- (void) styleoffsets: (float*)l : (float*)r : (float*)t : (float*)b 
-                     : (unsigned int)style;
-- (void) docedited: (int) edited : (int)win;
-- (void) setinputstate: (int)state : (int)win;
-- (void) setinputfocus: (int)win;
-- (void) setalpha: (float)alpha : (int)win;
-- (void) setShadow: (BOOL)hasShadow : (int)win;
+- (NSInteger) windowdepth: (NSInteger)win;
+- (void) setmaxsize: (NSSize)size : (NSInteger)win;
+- (void) setminsize: (NSSize)size : (NSInteger)win;
+- (void) setresizeincrements: (NSSize)size : (NSInteger)win;
+- (void) flushwindowrect: (NSRect)rect : (NSInteger)win;
+- (void) styleoffsets: (CGFloat*)l : (CGFloat*)r : (CGFloat*)t : (CGFloat*)b 
+                     : (NSUInteger)style;
+- (void) docedited: (NSInteger) edited : (NSInteger)win;
+- (void) setinputstate: (NSInteger)state : (NSInteger)win;
+- (void) setinputfocus: (NSInteger)win;
+- (void) setalpha: (CGFloat)alpha : (NSInteger)win;
+- (void) setShadow: (BOOL)hasShadow : (NSInteger)win;
 
 - (NSPoint) mouselocation;
-- (NSPoint) mouseLocationOnScreen: (int)aScreen window: (int *)win;
-- (BOOL) capturemouse: (int)win;
+- (NSPoint) mouseLocationOnScreen: (NSInteger)aScreen window: (NSInteger *)win;
+- (BOOL) capturemouse: (NSInteger)win;
 - (void) releasemouse;
-- (void) setMouseLocation: (NSPoint)mouseLocation onScreen: (int)aScreen;
+- (void) setMouseLocation: (NSPoint)mouseLocation onScreen: (NSInteger)aScreen;
 - (void) hidecursor;
 - (void) showcursor;
-- (void) standardcursor: (int) style : (void**)cid;
+- (void) standardcursor: (NSInteger) style : (void**)cid;
 - (void) imagecursor: (NSPoint)hotp : (NSImage *) image : (void**)cid;
 - (void) setcursorcolor: (NSColor *)fg : (NSColor *)bg : (void*)cid;
 - (void) recolorcursor: (NSColor *)fg : (NSColor *)bg : (void*) cid;
 - (void) setcursor: (void*) cid;
 - (void) freecursor: (void*) cid;
-- (void) setParentWindow: (int)parentWin 
-          forChildWindow: (int)childWin;
+- (void) setParentWindow: (NSInteger)parentWin 
+          forChildWindow: (NSInteger)childWin;
 
 @end
 
@@ -182,32 +182,32 @@ APPKIT_EXPORT NSString *GSScreenNumber;
 /* GNUstep Event Operations */
 /* ----------------------------------------------------------------------- */
 @interface GSDisplayServer (EventOps)
-- (NSEvent*) getEventMatchingMask: (unsigned)mask
+- (NSEvent*) getEventMatchingMask: (NSUInteger)mask
 		       beforeDate: (NSDate*)limit
 			   inMode: (NSString*)mode
 			  dequeue: (BOOL)flag;
-- (void) discardEventsMatchingMask: (unsigned)mask
+- (void) discardEventsMatchingMask: (NSUInteger)mask
 		       beforeEvent: (NSEvent*)limit;
 - (void) postEvent: (NSEvent*)anEvent atStart: (BOOL)flag;
 @end
 
 
 static inline NSEvent*
-DPSGetEvent(GSDisplayServer *ctxt, unsigned mask, NSDate* limit, NSString *mode)
+DPSGetEvent(GSDisplayServer *ctxt, NSUInteger mask, NSDate* limit, NSString *mode)
 {
   return [ctxt getEventMatchingMask: mask beforeDate: limit inMode: mode
 	       dequeue: YES];
 }
 
 static inline NSEvent*
-DPSPeekEvent(GSDisplayServer *ctxt, unsigned mask, NSDate* limit, NSString *mode)
+DPSPeekEvent(GSDisplayServer *ctxt, NSUInteger mask, NSDate* limit, NSString *mode)
 {
   return [ctxt getEventMatchingMask: mask beforeDate: limit inMode: mode
 	       dequeue: NO];
 }
 
 static inline void
-DPSDiscardEvents(GSDisplayServer *ctxt, unsigned mask, NSEvent* limit)
+DPSDiscardEvents(GSDisplayServer *ctxt, NSUInteger mask, NSEvent* limit)
 {
   [ctxt discardEventsMatchingMask: mask beforeEvent: limit];
 }
diff --git a/Headers/Additions/GNUstepGUI/GSDragView.h b/Headers/Additions/GNUstepGUI/GSDragView.h
index e14663a..68bddc9 100644
--- a/Headers/Additions/GNUstepGUI/GSDragView.h
+++ b/Headers/Additions/GNUstepGUI/GSDragView.h
@@ -99,7 +99,7 @@
   NSPoint	newPosition;
 
   // OS specific current window target of the drag operation
-  int		targetWindowRef;
+  NSInteger		targetWindowRef;
 
   // Operations supported by the target, only valid if targetWindowRef isn't 0
   NSDragOperation targetMask;
@@ -116,20 +116,20 @@
 
 + (id) sharedDragView;
 - (void) dragImage: (NSImage*)anImage
-		at: (NSPoint)screenLocation
-	    offset: (NSSize)initialOffset
-	     event: (NSEvent*)event
-	pasteboard: (NSPasteboard*)pboard
-	    source: (id)sourceObject
+                at: (NSPoint)screenLocation
+            offset: (NSSize)initialOffset
+             event: (NSEvent*)event
+        pasteboard: (NSPasteboard*)pboard
+            source: (id)sourceObject
          slideBack: (BOOL)slideFlag;
 - (void) postDragEvent: (NSEvent*)theEvent;
 - (void) sendExternalEvent: (GSAppKitSubtype)subtype
-		    action: (NSDragOperation)action
-		  position: (NSPoint)eventLocation
-		 timestamp: (NSTimeInterval)time
-		  toWindow: (int)dWindowNumber;
+                    action: (NSDragOperation)action
+                  position: (NSPoint)eventLocation
+                 timestamp: (NSTimeInterval)time
+                  toWindow: (NSInteger)dWindowNumber;
 - (NSWindow*) windowAcceptingDnDunder: (NSPoint)mouseLocation
-			    windowRef: (int*)mouseWindowRef;
+                            windowRef: (NSInteger*)mouseWindowRef;
 
 @end
 #endif
diff --git a/Headers/Additions/GNUstepGUI/GSFontInfo.h b/Headers/Additions/GNUstepGUI/GSFontInfo.h
index 3f73fe9..373bed3 100644
--- a/Headers/Additions/GNUstepGUI/GSFontInfo.h
+++ b/Headers/Additions/GNUstepGUI/GSFontInfo.h
@@ -102,7 +102,7 @@ values. Backends may override these. */
 - (NSDictionary*) afmDictionary;
 - (NSString*) afmFileContents;
 - (void) appendBezierPathWithGlyphs: (NSGlyph*)glyphs
-			      count: (int)count
+			      count: (NSInteger)count
 		       toBezierPath: (NSBezierPath*)path;
 - (CGFloat) ascender;
 - (NSRect) boundingRectForGlyph: (NSGlyph)aGlyph;
diff --git a/Headers/Additions/GNUstepGUI/GSHorizontalTypesetter.h b/Headers/Additions/GNUstepGUI/GSHorizontalTypesetter.h
index 06e30de..5f2d153 100644
--- a/Headers/Additions/GNUstepGUI/GSHorizontalTypesetter.h
+++ b/Headers/Additions/GNUstepGUI/GSHorizontalTypesetter.h
@@ -43,7 +43,7 @@
   NSTextContainer *curTextContainer;
   NSTextStorage *curTextStorage;
 
-  unsigned int curGlyph;
+  NSUInteger curGlyph;
   NSPoint curPoint;
 
 
@@ -64,7 +64,7 @@
   NSRange fontRange; /* glyphs */
 
   struct GSHorizontalTypesetter_glyph_cache_s *cache;
-  unsigned int cache_base, cache_size, cache_length;
+  NSUInteger cache_base, cache_size, cache_length;
   BOOL at_end;
 
 
diff --git a/Headers/Additions/GNUstepGUI/GSLayoutManager.h b/Headers/Additions/GNUstepGUI/GSLayoutManager.h
index 1356038..0d85e39 100644
--- a/Headers/Additions/GNUstepGUI/GSLayoutManager.h
+++ b/Headers/Additions/GNUstepGUI/GSLayoutManager.h
@@ -88,7 +88,7 @@ enum {
 /* OPT: This is just a simple implementation that should let me figure out
 how it's supposed to work. It's functional and correct, but it isn't fast. */
 
-  unsigned int layout_glyph, layout_char;
+  NSUInteger layout_glyph, layout_char;
 
   struct GSLayoutManager_textcontainer_s *textcontainers;
   int num_textcontainers;
@@ -108,7 +108,7 @@ how it's supposed to work. It's functional and correct, but it isn't fast. */
   the last run so we can quickly get more information for the next glyph.
   */
   struct GSLayoutManager_glyph_run_s *cached_run;
-  unsigned int cached_pos, cached_cpos;
+  NSUInteger cached_pos, cached_cpos;
 }
 
 
@@ -154,9 +154,9 @@ changes (contains range but may be larger due to eg. attribute fixing).
 If characters have been edited, lengthChange has the text length delta.
 */
 - (void) textStorage: (NSTextStorage *)aTextStorage
-	edited: (unsigned int)mask
+	edited: (NSUInteger)mask
 	range: (NSRange)range
-	changeInLength: (int)lengthChange
+	changeInLength: (NSInteger)lengthChange
 	invalidatedRange: (NSRange)invalidatedRange;
 
 /**
@@ -185,52 +185,52 @@ This method is used internally and should _not_ be called. (It interacts
 in complex ways with layout invalidation.)
 */
 - (void) invalidateGlyphsForCharacterRange: (NSRange)aRange 
-	changeInLength: (int)lengthChange
+	changeInLength: (NSInteger)lengthChange
 	actualCharacterRange: (NSRange *)actualRange;
 
 /*
 These are internal methods and should _not_ be called.
 */
 - (void) insertGlyph: (NSGlyph)aGlyph
-	atGlyphIndex: (unsigned int)glyphIndex
-	characterIndex: (unsigned int)charIndex;
-- (void) replaceGlyphAtIndex: (unsigned int)glyphIndex
+	atGlyphIndex: (NSUInteger)glyphIndex
+	characterIndex: (NSUInteger)charIndex;
+- (void) replaceGlyphAtIndex: (NSUInteger)glyphIndex
 	withGlyph: (NSGlyph)newGlyph;
 - (void) deleteGlyphsInRange: (NSRange)aRange;
-- (void) setCharacterIndex: (unsigned int)charIndex
-	forGlyphAtIndex: (unsigned int)glyphIndex;
+- (void) setCharacterIndex: (NSUInteger)charIndex
+	forGlyphAtIndex: (NSUInteger)glyphIndex;
 
 
 /* Returns total number of glyphs. */
-- (unsigned int) numberOfGlyphs;
+- (NSUInteger) numberOfGlyphs;
 
 /* Returns the glyph at glyphIndex or raises an NSRangeException if the
 index is invalid (past the end of the glyphs). */
-- (NSGlyph) glyphAtIndex: (unsigned int)glyphIndex;
+- (NSGlyph) glyphAtIndex: (NSUInteger)glyphIndex;
 
 /* Returns the glyph at glyphIndex and sets isValidIndex to YES if the index
 is valid. Otherwise, the return value is arbitrary and isValidIndex is set
 to NO. */
-- (NSGlyph) glyphAtIndex: (unsigned int)glyphIndex
+- (NSGlyph) glyphAtIndex: (NSUInteger)glyphIndex
 	isValidIndex: (BOOL *)isValidIndex;
 
 /* Returns if the glyph at glyphIndex is valid or not */
-- (BOOL) isValidGlyphIndex: (unsigned int)glyphIndex;
+- (BOOL) isValidGlyphIndex: (NSUInteger)glyphIndex;
 
 /* Copies displayed glyphs to glyphArray for glyphRange. Returns the number
 of glyphs actually copied to the array. NSRangeException of the range is
 invalid (extends beyond the end of glyphs). */
-- (unsigned int) getGlyphs: (NSGlyph *)glyphArray
+- (NSUInteger) getGlyphs: (NSGlyph *)glyphArray
 	range: (NSRange)glyphRange;
 
 /* Return the first character for the glyph at glyphIndex.
 (NSRangeException?) */
-- (unsigned int) characterIndexForGlyphAtIndex: (unsigned int)glyphIndex;
+- (NSUInteger) characterIndexForGlyphAtIndex: (NSUInteger)glyphIndex;
 
 /**
  * GNUstep extension
  */
-- (NSSize) advancementForGlyphAtIndex: (unsigned int)glyphIndex;
+- (NSSize) advancementForGlyphAtIndex: (NSUInteger)glyphIndex;
 
 /* Returns the range of glyphs for the characters in charRange. If
 actualRange isn't NULL, the exact range of characters for the glyphs in the
@@ -249,12 +249,12 @@ it isn't NULL. */
 Non-negative tags are reserved. You must provide storage yourself (by
 subclassing). */
 #if !OS_API_VERSION(MAC_OS_X_VERSION_10_3, GS_API_LATEST)
-- (void) setIntAttribute: (int)attributeTag 
-	value: (int)anInt
-	forGlyphAtIndex: (unsigned int)glyphIndex;
+- (void) setIntAttribute: (NSInteger)attributeTag 
+	value: (NSInteger)anInt
+	forGlyphAtIndex: (NSUInteger)glyphIndex;
 #endif
-- (int) intAttribute: (int)attributeTag
-	forGlyphAtIndex: (unsigned int)glyphIndex;
+- (NSInteger) intAttribute: (NSInteger)attributeTag
+	forGlyphAtIndex: (NSUInteger)glyphIndex;
 
 
 /* Returns the font actually used for a range of glyphs. This isn't
@@ -262,17 +262,17 @@ necessarily the font specified by NSFontAttributeName; both the typesetter
 and the layout manager can substitute a different font (the typesetter might
 eg. substitute a smaller font for sub-/super-scripted text, and the layout
 manager might be substituting screen fonts. */
-- (NSFont *) effectiveFontForGlyphAtIndex: (unsigned int)glyphIndex
+- (NSFont *) effectiveFontForGlyphAtIndex: (NSUInteger)glyphIndex
 	range: (NSRange *)range; /* GNUstep extension */
 
 
 - (void) setDrawsOutsideLineFragment: (BOOL)flag
-	forGlyphAtIndex: (unsigned int)glyphIndex;
-- (BOOL) drawsOutsideLineFragmentForGlyphAtIndex: (unsigned int) glyphIndex;
+	forGlyphAtIndex: (NSUInteger)glyphIndex;
+- (BOOL) drawsOutsideLineFragmentForGlyphAtIndex: (NSUInteger) glyphIndex;
 
 - (void) setNotShownAttribute: (BOOL)flag 
-	forGlyphAtIndex: (unsigned int)glyphIndex;
-- (BOOL) notShownAttributeForGlyphAtIndex: (unsigned int) glyphIndex;
+	forGlyphAtIndex: (NSUInteger)glyphIndex;
+- (BOOL) notShownAttributeForGlyphAtIndex: (NSUInteger) glyphIndex;
 
 @end
 
@@ -285,8 +285,8 @@ manager might be substituting screen fonts. */
 
 - (void) addTextContainer: (NSTextContainer *)container;
 - (void) insertTextContainer: (NSTextContainer*)aTextContainer 
-	atIndex: (unsigned int)index;
-- (void) removeTextContainerAtIndex: (unsigned int)index;
+	atIndex: (NSUInteger)index;
+- (void) removeTextContainerAtIndex: (NSUInteger)index;
 
 - (void) textContainerChangedGeometry: (NSTextContainer *)aContainer;
 
@@ -353,10 +353,10 @@ invalidated.
 
 /* Extension, but without this, there's no way to get the starting locations
 of the nominally spaced glyphs. */
-- (NSRange) rangeOfNominallySpacedGlyphsContainingIndex:(unsigned int)glyphIndex
+- (NSRange) rangeOfNominallySpacedGlyphsContainingIndex:(NSUInteger)glyphIndex
 	startLocation: (NSPoint *)p;
 
-- (NSRange) rangeOfNominallySpacedGlyphsContainingIndex:(unsigned int)glyphIndex;
+- (NSRange) rangeOfNominallySpacedGlyphsContainingIndex:(NSUInteger)glyphIndex;
 
 /* The union of all line frag rects' used rects. (TODO: shouldn't this be
 just the union of all the line frag rects?) */
@@ -365,25 +365,25 @@ just the union of all the line frag rects?) */
 - (NSRange) glyphRangeForTextContainer: (NSTextContainer *)container;
 
 
-- (unsigned int) firstUnlaidCharacterIndex;
-- (unsigned int) firstUnlaidGlyphIndex;
-- (void) getFirstUnlaidCharacterIndex: (unsigned int *)charIndex
-	glyphIndex: (unsigned int *)glyphIndex;
+- (NSUInteger) firstUnlaidCharacterIndex;
+- (NSUInteger) firstUnlaidGlyphIndex;
+- (void) getFirstUnlaidCharacterIndex: (NSUInteger *)charIndex
+	glyphIndex: (NSUInteger *)glyphIndex;
 
 
 /*
 Basic (and experimental) methods that let the typesetter use soft-invalidated
 layout information.
 */
--(void) _softInvalidateUseLineFrags: (int)num
+-(void) _softInvalidateUseLineFrags: (NSInteger)num
 			  withShift: (NSSize)shift
 		    inTextContainer: (NSTextContainer *)textContainer;
--(NSRect) _softInvalidateLineFragRect: (int)index
-			   firstGlyph: (unsigned int *)first_glyph
-			    nextGlyph: (unsigned int *)next_glyph
+-(NSRect) _softInvalidateLineFragRect: (NSInteger)index
+			   firstGlyph: (NSUInteger *)first_glyph
+			    nextGlyph: (NSUInteger *)next_glyph
 		      inTextContainer: (NSTextContainer *)textContainer;
--(unsigned int) _softInvalidateFirstGlyphInTextContainer: (NSTextContainer *)textContainer;
--(unsigned int) _softInvalidateNumberOfLineFragsInTextContainer: (NSTextContainer *)textContainer;
+-(NSUInteger) _softInvalidateFirstGlyphInTextContainer: (NSTextContainer *)textContainer;
+-(NSUInteger) _softInvalidateNumberOfLineFragsInTextContainer: (NSTextContainer *)textContainer;
 
 @end
 
diff --git a/Headers/Additions/GNUstepGUI/GSLayoutManager_internal.h b/Headers/Additions/GNUstepGUI/GSLayoutManager_internal.h
index 06b0edf..5f034be 100644
--- a/Headers/Additions/GNUstepGUI/GSLayoutManager_internal.h
+++ b/Headers/Additions/GNUstepGUI/GSLayoutManager_internal.h
@@ -64,7 +64,7 @@ typedef struct GSLayoutManager_glyph_run_head_s
   /* char_length must always be accurate. glyph_length is the number of
   valid glyphs counting from the start. For a level 0 head, it's the number
   of glyphs in that run. */
-  unsigned int glyph_length, char_length;
+  NSUInteger glyph_length, char_length;
 
   /* Glyph generation is complete for all created runs. */
   unsigned int complete:1;
@@ -83,14 +83,14 @@ typedef struct
   is necessary, the mapping will have to be range to range. (Eg. if you
   have characters 'ab' mapped to glyphs 'AB', reordered to 'BA', then the
   range 'ab' will be mapped to the range 'BA'. */
-  unsigned int char_offset:18; /* This could be made smaller, if necessary */
-  unsigned int drawsOutsideLineFragment:1;
-  unsigned int isNotShown:1;
+  NSUInteger char_offset:18; /* This could be made smaller, if necessary */
+  NSUInteger drawsOutsideLineFragment:1;
+  NSUInteger isNotShown:1;
 
-  unsigned int inscription:3;
-  unsigned int soft:1;
-  unsigned int elasitc:1;
-  unsigned int bidilevel:7; // Need to support 0..61
+  NSUInteger inscription:3;
+  NSUInteger soft:1;
+  NSUInteger elasitc:1;
+  NSUInteger bidilevel:7; // Need to support 0..61
 
   NSSize advancement;
 } glyph_t;
@@ -142,20 +142,20 @@ typedef struct GSLayoutManager_glyph_run_s
 /* All positions and lengths in glyphs */
 typedef struct
 {
-  unsigned int pos, length;
+  NSUInteger pos, length;
   NSPoint p;
 } linefrag_point_t;
 
 typedef struct
 {
-  unsigned int pos, length;
+  NSUInteger pos, length;
   NSSize size;
 } linefrag_attachment_t;
 
 typedef struct
 {
   NSRect rect, used_rect;
-  unsigned int pos, length;
+  NSUInteger pos, length;
 
   linefrag_point_t *points;
   int num_points;
@@ -169,7 +169,7 @@ typedef struct GSLayoutManager_textcontainer_s
   NSTextContainer *textContainer;
 
   BOOL complete;
-  unsigned int pos, length;
+  NSUInteger pos, length;
 
   /*
   This should be set to YES whenever any layout information for this text
@@ -190,9 +190,9 @@ typedef struct GSLayoutManager_textcontainer_s
   layout information.
   */
   linefrag_t *linefrags;
-  int num_linefrags;
-  int num_soft;
-  int size_linefrags;
+  NSInteger  num_linefrags;
+  NSInteger  num_soft;
+  NSInteger  size_linefrags;
 
   /*
   Keep some per-textcontainer info that's expensive to calculate and often
@@ -219,29 +219,29 @@ typedef struct GSLayoutManager_textcontainer_s
 -(void) _glyphDumpRuns;
 -(void) _sanityChecks;
 
--(void) _generateGlyphsUpToCharacter: (unsigned int)last;
--(void) _generateGlyphsUpToGlyph: (unsigned int)last;
+-(void) _generateGlyphsUpToCharacter: (NSUInteger)last;
+-(void) _generateGlyphsUpToGlyph: (NSUInteger)last;
 
--(glyph_run_t *) _glyphForCharacter: (unsigned int)target
-	index: (unsigned int *)rindex
-	positions: (unsigned int *)rpos : (unsigned int *)rcpos;
+-(glyph_run_t *) _glyphForCharacter: (NSUInteger)target
+	index: (NSUInteger *)rindex
+	positions: (NSUInteger *)rpos : (NSUInteger *)rcpos;
 
 
--(glyph_run_t *)run_for_glyph_index: (unsigned int)glyphIndex
-	: (unsigned int *)glyph_pos
-	: (unsigned int *)char_pos;
+-(glyph_run_t *)run_for_glyph_index: (NSUInteger)glyphIndex
+	: (NSUInteger *)glyph_pos
+	: (NSUInteger *)char_pos;
 @end
 
 
 
 @interface GSLayoutManager (LayoutHelpers)
 -(void) _freeLayout;
--(void) _invalidateLayoutFromContainer: (int)idx;
+-(void) _invalidateLayoutFromContainer: (NSInteger)idx;
 -(void) _invalidateEverything;
 
 -(void) _doLayout; /* TODO: this is just a hack until proper incremental layout is done */
--(void) _doLayoutToGlyph: (unsigned int)glyphIndex;
--(void) _doLayoutToContainer: (int)cindex;
+-(void) _doLayoutToGlyph: (NSUInteger)glyphIndex;
+-(void) _doLayoutToContainer: (NSInteger)cindex;
 
 -(void) _didInvalidateLayout;
 @end
diff --git a/Headers/Additions/GNUstepGUI/GSMethodTable.h b/Headers/Additions/GNUstepGUI/GSMethodTable.h
index 86af3eb..1d9b585 100644
--- a/Headers/Additions/GNUstepGUI/GSMethodTable.h
+++ b/Headers/Additions/GNUstepGUI/GSMethodTable.h
@@ -242,9 +242,9 @@ typedef struct {
   void (*GSSendBezierPath_)
         (NSGraphicsContext*, SEL, NSBezierPath *);
   void (*GSRectClipList__)
-        (NSGraphicsContext*, SEL, const NSRect *, int);
+        (NSGraphicsContext*, SEL, const NSRect *, NSInteger);
   void (*GSRectFillList__)
-        (NSGraphicsContext*, SEL, const NSRect *, int);
+        (NSGraphicsContext*, SEL, const NSRect *, NSInteger);
 
 /* ----------------------------------------------------------------------- */
 /* Window system ops */
diff --git a/Headers/Additions/GNUstepGUI/GSNibLoading.h b/Headers/Additions/GNUstepGUI/GSNibLoading.h
index 4546942..dd2cf46 100644
--- a/Headers/Additions/GNUstepGUI/GSNibLoading.h
+++ b/Headers/Additions/GNUstepGUI/GSNibLoading.h
@@ -67,29 +67,29 @@
 typedef struct _GSWindowTemplateFlags
 {
 #if GS_WORDS_BIGENDIAN == 1
-  unsigned int isHiddenOnDeactivate:1;
-  unsigned int isNotReleasedOnClose:1;
-  unsigned int isDeferred:1;
-  unsigned int isOneShot:1;
-  unsigned int isVisible:1;
-  unsigned int wantsToBeColor:1;
-  unsigned int dynamicDepthLimit:1;
-  unsigned int autoPositionMask:6;
-  unsigned int savePosition:1;
-  unsigned int style:2;
-  unsigned int _unused:16; // currently not used, contains Cocoa specific info
+  uint32_t isHiddenOnDeactivate:1;
+  uint32_t isNotReleasedOnClose:1;
+  uint32_t isDeferred:1;
+  uint32_t isOneShot:1;
+  uint32_t isVisible:1;
+  uint32_t wantsToBeColor:1;
+  uint32_t dynamicDepthLimit:1;
+  uint32_t autoPositionMask:6;
+  uint32_t savePosition:1;
+  uint32_t style:2;
+  uint32_t _unused:16; // currently not used, contains Cocoa specific info
 #else
-  unsigned int _unused:16; // currently not used, contains Cocoa specific info
-  unsigned int style:2;
-  unsigned int savePosition:1;
-  unsigned int autoPositionMask:6;
-  unsigned int dynamicDepthLimit:1;
-  unsigned int wantsToBeColor:1;
-  unsigned int isVisible:1;
-  unsigned int isOneShot:1;
-  unsigned int isDeferred:1;
-  unsigned int isNotReleasedOnClose:1;
-  unsigned int isHiddenOnDeactivate:1;
+  uint32_t _unused:16; // currently not used, contains Cocoa specific info
+  uint32_t style:2;
+  uint32_t savePosition:1;
+  uint32_t autoPositionMask:6;
+  uint32_t dynamicDepthLimit:1;
+  uint32_t wantsToBeColor:1;
+  uint32_t isVisible:1;
+  uint32_t isOneShot:1;
+  uint32_t isDeferred:1;
+  uint32_t isNotReleasedOnClose:1;
+  uint32_t isHiddenOnDeactivate:1;
 #endif
 } GSWindowTemplateFlags;
 
@@ -126,7 +126,7 @@ typedef struct _GSWindowTemplateFlags
   NSBackingStoreType   _backingStoreType;
   NSSize               _maxSize;
   NSSize               _minSize;
-  unsigned             _windowStyle;
+  NSUInteger             _windowStyle;
   NSString            *_title;
   NSString            *_viewClass;
   NSString            *_windowClass;
@@ -144,7 +144,7 @@ typedef struct _GSWindowTemplateFlags
 	    isOneShot: (BOOL) oneShot
 	    isVisible: (BOOL) visible
        wantsToBeColor: (BOOL) wantsToBeColor
-     autoPositionMask: (int) autoPositionMask;
+     autoPositionMask: (NSInteger) autoPositionMask;
 - (void) setBackingStoreType: (NSBackingStoreType)type;
 - (NSBackingStoreType) backingStoreType;
 - (void) setDeferred: (BOOL)flag;
@@ -153,8 +153,8 @@ typedef struct _GSWindowTemplateFlags
 - (NSSize) maxSize;
 - (void) setMinSize: (NSSize)minSize;
 - (NSSize) minSize;
-- (void) setWindowStyle: (unsigned)sty;
-- (unsigned) windowStyle;
+- (void) setWindowStyle: (NSUInteger)windowStyle;
+- (NSUInteger) windowStyle;
 - (void) setTitle: (NSString *) title;
 - (NSString *)title;
 - (void) setViewClass: (NSString *)viewClass;
@@ -272,7 +272,7 @@ typedef struct _GSWindowTemplateFlags
   id              _firstResponder;
   id              _fontManager;
   NSString       *_framework;
-  unsigned        _nextOid;
+  NSUInteger        _nextOid;
   NSMutableArray *_accessibilityConnectors;
   NSMapTable     *_accessibilityOids;
   NSMutableSet   *_topLevelObjects;
@@ -288,8 +288,8 @@ typedef struct _GSWindowTemplateFlags
 - (NSMutableArray *) visibleWindows;
 - (void) setRoot: (id)root;
 - (id) root;
-- (void) setNextOid: (int)noid;
-- (int) nextOid;
+- (void) setNextOid: (NSInteger)noid;
+- (NSInteger) nextOid;
 @end
 
 // class needed for nib encoding/decoding by the progress bar...
diff --git a/Headers/Additions/GNUstepGUI/GSTheme.h b/Headers/Additions/GNUstepGUI/GSTheme.h
index ac68850..176ed03 100644
--- a/Headers/Additions/GNUstepGUI/GSTheme.h
+++ b/Headers/Additions/GNUstepGUI/GSTheme.h
@@ -744,14 +744,14 @@ APPKIT_EXPORT	NSString	*GSThemeWillDeactivateNotification;
 - (void) drawButton: (NSRect)frame
 	         in: (NSCell*)cell
 	       view: (NSView*)view
-	      style: (int)style
+	      style: (NSInteger)style
 	      state: (GSThemeControlState)state;
 
 /**
  * Amount by which the button is inset by the border.
  */
 - (GSThemeMargins) buttonMarginsForCell: (NSCell*)cell
-				  style: (int)style 
+				  style: (NSInteger)style 
 				  state: (GSThemeControlState)state;
 
 /** 
@@ -826,7 +826,7 @@ APPKIT_EXPORT	NSString	*GSThemeWillDeactivateNotification;
  * current theme.  Drawing code is entitled to assume that this value will
  * remain constant until the theme is deactivated.
  */
-- (float) defaultScrollerWidth;
+- (CGFloat) defaultScrollerWidth;
 
 /** 
  * Method for toolbar theming.
@@ -835,7 +835,7 @@ APPKIT_EXPORT	NSString	*GSThemeWillDeactivateNotification;
 - (NSColor *) toolbarBorderColor;
 - (void) drawToolbarRect: (NSRect)aRect
                    frame: (NSRect)viewFrame
-              borderMask: (unsigned int)borderMask;
+              borderMask: (NSUInteger)borderMask;
 - (BOOL) toolbarIsOpaque;
 
 // Methods to deal with steppers..
@@ -1038,7 +1038,7 @@ APPKIT_EXPORT	NSString	*GSThemeWillDeactivateNotification;
 - (void) drawProgressIndicator: (NSProgressIndicator*)progress
                     withBounds: (NSRect)bounds
                       withClip: (NSRect)rect
-                       atCount: (int)count
+                       atCount: (NSInteger)count
                       forValue: (double)val;
 
 - (NSRect) drawProgressIndicatorBezel: (NSRect)bounds withClip: (NSRect) rect;
@@ -1052,14 +1052,14 @@ APPKIT_EXPORT	NSString	*GSThemeWillDeactivateNotification;
                       inView: (NSView *)controlView
                        state: (GSThemeControlState)state;
 
-- (float) titlebarHeight;
+- (CGFloat) titlebarHeight;
 
-- (float) resizebarHeight;
+- (CGFloat) resizebarHeight;
 
 - (void) drawWindowBorder: (NSRect)rect
                 withFrame: (NSRect)frame 
-             forStyleMask: (unsigned int)styleMask
-                    state: (int)inputState
+             forStyleMask: (NSUInteger)styleMask
+                    state: (NSInteger)inputState
                  andTitle: (NSString*)title;
 
 - (void) drawBrowserHeaderCell: (NSTableHeaderCell*)cell
@@ -1121,7 +1121,7 @@ APPKIT_EXPORT	NSString	*GSThemeWillDeactivateNotification;
 					inView: (NSView *)view
 			      selectingColumns: (BOOL)selectingColumns;
 
-- (void) drawTableViewRow: (int)rowIndex 
+- (void) drawTableViewRow: (NSInteger)rowIndex 
 		 clipRect: (NSRect)clipRect
 		   inView: (NSView *)view;
 @end
@@ -1258,7 +1258,7 @@ withRepeatedImage: (NSImage*)image
 	    withCellFrame: (NSRect)cellFrame
 	controlViewWindow: (NSWindow *)cvWin
 	    preferredEdge: (NSRectEdge)edge
-	     selectedItem: (int)selectedItem;
+	     selectedItem: (NSInteger)selectedItem;
 
 /**
  * Process events for popups.
@@ -1280,7 +1280,7 @@ withRepeatedImage: (NSImage*)image
  * Calculate the height of the menu for in-window menus.  The default
  * implementation returns [NSMenuView menuBarHeight];
  */
-- (float) menuHeightForWindow: (NSWindow *)window;
+- (CGFloat) menuHeightForWindow: (NSWindow *)window;
 
 /**
  * Update the menu for the window.  This refreshes the menu contents.
diff --git a/Headers/Additions/GNUstepGUI/GSToolbarView.h b/Headers/Additions/GNUstepGUI/GSToolbarView.h
index 221406b..1f18aa0 100644
--- a/Headers/Additions/GNUstepGUI/GSToolbarView.h
+++ b/Headers/Additions/GNUstepGUI/GSToolbarView.h
@@ -55,21 +55,21 @@ typedef enum {
   NSToolbar *_toolbar;
   NSClipView *_clipView;
   GSToolbarClippedItemsButton *_clippedItemsMark;
-  unsigned int _borderMask;
+  NSUInteger _borderMask;
   NSRect _rectAvailable;
-  float _heightFromLayout;
+  CGFloat _heightFromLayout;
 }
 
-+ (int) draggedItemIndex;
-+ (void) setDraggedItemIndex:(int)sourceIndex;
++ (NSInteger) draggedItemIndex;
++ (void) setDraggedItemIndex:(NSInteger)sourceIndex;
 
 - (id) initWithFrame: (NSRect)frame;
 
 // Accessors
 - (NSToolbar *) toolbar;
 - (void) setToolbar: (NSToolbar *)toolbar;
-- (unsigned int) borderMask;
-- (void) setBorderMask: (unsigned int)borderMask;
+- (NSUInteger) borderMask;
+- (void) setBorderMask: (NSUInteger)borderMask;
 
 @end
 
diff --git a/Headers/Additions/GNUstepGUI/GSTypesetter.h b/Headers/Additions/GNUstepGUI/GSTypesetter.h
index c2fc80e..230ad56 100644
--- a/Headers/Additions/GNUstepGUI/GSTypesetter.h
+++ b/Headers/Additions/GNUstepGUI/GSTypesetter.h
@@ -50,7 +50,7 @@ GSTypesetter's implementation returns NSMakeSize(0,0).
 + (NSSize) printingAdjustmentsInLayoutManager: (GSLayoutManager *)layoutManager
 		 forNominallySpacedGlyphRange: (NSRange)glyphRange
 				 packedGlyphs: (const unsigned char *)glyphs
-					count: (unsigned)packedGlyphCount;
+					count: (NSUInteger)packedGlyphCount;
 
 /*
 Returns a thread-safe shared GSTypesetter (a GSHorizontalTypesetter
@@ -120,10 +120,10 @@ Subclasses need to implement this method.
 */
 -(int) layoutGlyphsInLayoutManager: (GSLayoutManager *)layoutManager
 		   inTextContainer: (NSTextContainer *)textContainer
-	      startingAtGlyphIndex: (unsigned int)glyphIndex
+	      startingAtGlyphIndex: (NSUInteger)glyphIndex
 	  previousLineFragmentRect: (NSRect)previousLineFragRect
-		    nextGlyphIndex: (unsigned int *)nextGlyphIndex
-	     numberOfLineFragments: (unsigned int)howMany;
+		    nextGlyphIndex: (NSUInteger *)nextGlyphIndex
+	     numberOfLineFragments: (NSUInteger)howMany;
 
 @end
 
diff --git a/Headers/Additions/GNUstepGUI/GSWindowDecorationView.h b/Headers/Additions/GNUstepGUI/GSWindowDecorationView.h
index 065d1d8..2ae8905 100644
--- a/Headers/Additions/GNUstepGUI/GSWindowDecorationView.h
+++ b/Headers/Additions/GNUstepGUI/GSWindowDecorationView.h
@@ -53,9 +53,9 @@ this, either directly, or indirectly (by using the backend).
 @interface GSWindowDecorationView : NSView
 {
   NSWindow *window; /* not retained */
-  int windowNumber;
+  NSInteger windowNumber;
   NSRect contentRect;
-  int inputState;
+  NSInteger inputState;
   BOOL documentEdited;
   BOOL hasMenu;
   BOOL hasToolbar;
@@ -75,14 +75,14 @@ this, either directly, or indirectly (by using the backend).
 - (void) setBackgroundColor: (NSColor *)color;
 - (void) setContentView: (NSView *)contentView;
 - (void) setDocumentEdited: (BOOL)flag;
-- (void) setInputState: (int)state;
+- (void) setInputState: (NSInteger)state;
 - (void) setTitle: (NSString *)title;
 
 /*
 Called when the backend window is created or destroyed. When it's destroyed,
 windowNumber will be 0.
 */
-- (void) setWindowNumber: (int)windowNumber;			  
+- (void) setWindowNumber: (NSInteger)windowNumber;			  
 
 // Flags controlling if elements are present
 - (void) setHasMenu: (BOOL) flag;
diff --git a/Headers/AppKit/DPSOperators.h b/Headers/AppKit/DPSOperators.h
index 02c9850..c95883f 100644
--- a/Headers/AppKit/DPSOperators.h
+++ b/Headers/AppKit/DPSOperators.h
@@ -413,11 +413,11 @@ GSSendBezierPath(GSCTXT *ctxt, NSBezierPath * path)
 __attribute__((unused));
 
 static inline void
-GSRectClipList(GSCTXT *ctxt, const NSRect * rects, int count)
+GSRectClipList(GSCTXT *ctxt, const NSRect * rects, NSInteger count)
 __attribute__((unused));
 
 static inline void
-GSRectFillList(GSCTXT *ctxt, const NSRect * rects, int count)
+GSRectFillList(GSCTXT *ctxt, const NSRect * rects, NSInteger count)
 __attribute__((unused));
 
 
@@ -1116,14 +1116,14 @@ GSSendBezierPath(GSCTXT *ctxt, NSBezierPath * path)
 }
 
 static inline void
-GSRectClipList(GSCTXT *ctxt, const NSRect * rects, int count)
+GSRectClipList(GSCTXT *ctxt, const NSRect * rects, NSInteger count)
 {
   (ctxt->methods->GSRectClipList__)
     (ctxt, @selector(GSRectClipList: :), rects, count);
 }
 
 static inline void
-GSRectFillList(GSCTXT *ctxt, const NSRect * rects, int count)
+GSRectFillList(GSCTXT *ctxt, const NSRect * rects, NSInteger count)
 {
   (ctxt->methods->GSRectFillList__)
     (ctxt, @selector(GSRectFillList: :), rects, count);
diff --git a/Headers/AppKit/NSAnimation.h b/Headers/AppKit/NSAnimation.h
index 0eddd12..0c69ea9 100644
--- a/Headers/AppKit/NSAnimation.h
+++ b/Headers/AppKit/NSAnimation.h
@@ -123,10 +123,10 @@ APPKIT_EXPORT NSString *NSAnimationTriggerOrderOut;
   NSAnimationProgress _currentProgress;   // Progress of the animation
 
   /* GSIArray<NSAnimationProgress> */ void *_progressMarks; // Array
-  unsigned int _nextMark;                 // The next mark to be reached
+  NSUInteger _nextMark;                   // The next mark to be reached
                                           //   = count if no next mark
   __strong NSNumber **_cachedProgressMarkNumbers;  // Cached values used by
-  unsigned _cachedProgressMarkNumberCount;//   [-progressMarks]
+  NSUInteger _cachedProgressMarkNumberCount;//   [-progressMarks]
   BOOL _isCachedProgressMarkNumbersValid;
 
   NSAnimation *_startAnimation, *_stopAnimation; // Animations used as
diff --git a/Headers/AppKit/NSApplication.h b/Headers/AppKit/NSApplication.h
index baed218..ddd2be4 100644
--- a/Headers/AppKit/NSApplication.h
+++ b/Headers/AppKit/NSApplication.h
@@ -243,7 +243,7 @@ APPKIT_EXPORT NSString	*NSEventTrackingRunLoopMode;
      modalForWindow: (NSWindow *)docWindow
       modalDelegate: (id)modalDelegate
      didEndSelector: (SEL)didEndSelector
-	contextInfo: (void *)contextInfo;
+        contextInfo: (void *)contextInfo;
 - (void) endSheet: (NSWindow *)sheet;
 - (void) endSheet: (NSWindow *)sheet
        returnCode: (NSInteger)returnCode;
@@ -265,8 +265,8 @@ APPKIT_EXPORT NSString	*NSEventTrackingRunLoopMode;
  * Sending action messages
  */
 - (BOOL) sendAction: (SEL)aSelector
-		 to: (id)aTarget
-	       from: (id)sender;
+                 to: (id)aTarget
+               from: (id)sender;
 - (id) targetForAction: (SEL)aSelector;
 #if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)
 - (id)targetForAction: (SEL)theAction 
@@ -274,7 +274,7 @@ APPKIT_EXPORT NSString	*NSEventTrackingRunLoopMode;
                  from: (id)sender;
 #endif
 - (BOOL) tryToPerform: (SEL)aSelector
-		 with: (id)anObject;
+                 with: (id)anObject;
 
 /*
  * Setting the application's icon
@@ -296,7 +296,7 @@ APPKIT_EXPORT NSString	*NSEventTrackingRunLoopMode;
 - (NSWindow*) keyWindow;
 - (NSWindow*) mainWindow;
 - (NSWindow*) makeWindowsPerform: (SEL)aSelector
-			 inOrder: (BOOL)flag;
+                         inOrder: (BOOL)flag;
 - (void) miniaturizeAll: (id)sender;
 - (void) preventWindowOrdering;
 - (void) setWindowsNeedUpdate: (BOOL)flag;
@@ -335,12 +335,12 @@ APPKIT_EXPORT NSString	*NSEventTrackingRunLoopMode;
  * Managing the Windows menu
  */
 - (void) addWindowsItem: (NSWindow*)aWindow
-		  title: (NSString*)aString
-	       filename: (BOOL)isFilename;
+                  title: (NSString*)aString
+               filename: (BOOL)isFilename;
 - (void) arrangeInFront: (id)sender;
 - (void) changeWindowsItem: (NSWindow*)aWindow
-		     title: (NSString*)aString
-		  filename: (BOOL)isFilename;
+                     title: (NSString*)aString
+                  filename: (BOOL)isFilename;
 - (void) removeWindowsItem: (NSWindow*)aWindow;
 - (void) setWindowsMenu: (NSMenu*)aMenu;
 - (void) updateWindowsItem: (NSWindow*)aWindow;
@@ -350,13 +350,13 @@ APPKIT_EXPORT NSString	*NSEventTrackingRunLoopMode;
  * Managing the Service menu
  */
 - (void) registerServicesMenuSendTypes: (NSArray*)sendTypes
-			   returnTypes: (NSArray*)returnTypes;
+                           returnTypes: (NSArray*)returnTypes;
 - (NSMenu*) servicesMenu;
 - (id) servicesProvider;
 - (void) setServicesMenu: (NSMenu*)aMenu;
 - (void) setServicesProvider: (id)anObject;
 - (id) validRequestorForSendType: (NSString*)sendType
-		      returnType: (NSString*)returnType;
+                      returnType: (NSString*)returnType;
 
 /*
  * Getting the display context
@@ -717,6 +717,9 @@ NSApplicationMain(int argc, const char **argv);
 APPKIT_EXPORT void 
 NSShowSystemInfoPanel(NSDictionary *options);
 
+APPKIT_EXPORT void 
+NSUnregisterServicesProvider(NSString *name);
+
 /*
  * The NSApp global variable.
  */
diff --git a/Headers/AppKit/NSBitmapImageRep.h b/Headers/AppKit/NSBitmapImageRep.h
index 618339b..2586ae5 100644
--- a/Headers/AppKit/NSBitmapImageRep.h
+++ b/Headers/AppKit/NSBitmapImageRep.h
@@ -75,33 +75,34 @@ typedef enum _NSTIFFCompression {
    <item> NSJPEG2000FileType. Not implemented </item>
   </list>
  */
-typedef enum _NSBitmapImageFileType {
+enum {
     NSTIFFFileType,
     NSBMPFileType,
     NSGIFFileType,
     NSJPEGFileType,
     NSPNGFileType,
-    NSJPEG2000FileType  // available in Mac OS X v10.4
-} NSBitmapImageFileType;
+    NSJPEG2000FileType /* available in Mac OS X v10.4 */
+};
+typedef NSUInteger NSBitmapImageFileType;
 
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)
 
-typedef enum _NSBitmapFormat
-{
-  NSAlphaFirstBitmapFormat = 1,
-  NSAlphaNonpremultipliedBitmapFormat = 2,
-  NSFloatingPointSamplesBitmapFormat = 4
-} NSBitmapFormat;
+enum {
+    NSAlphaFirstBitmapFormat            = 1 << 0,
+    NSAlphaNonpremultipliedBitmapFormat = 1 << 1,
+    NSFloatingPointSamplesBitmapFormat  = 1 << 2
+};
+typedef NSUInteger NSBitmapFormat;
 
-typedef enum _NSImageRepLoadStatus
-{
-  NSImageRepLoadStatusUnknownType = -1,
-  NSImageRepLoadStatusReadingHeader = -2,
-  NSImageRepLoadStatusWillNeedAllData = -3,
-  NSImageRepLoadStatusInvalidData = -4,
-  NSImageRepLoadStatusUnexpectedEOF = -5,
-  NSImageRepLoadStatusCompleted = -6
-} NSImageRepLoadStatus;
+enum {
+    NSImageRepLoadStatusUnknownType     = -1,
+    NSImageRepLoadStatusReadingHeader   = -2,
+    NSImageRepLoadStatusWillNeedAllData = -3,
+    NSImageRepLoadStatusInvalidData     = -4,
+    NSImageRepLoadStatusUnexpectedEOF   = -5,
+    NSImageRepLoadStatusCompleted       = -6
+};
+typedef NSInteger NSImageRepLoadStatus;
 
 #endif
 
diff --git a/Headers/AppKit/NSBox.h b/Headers/AppKit/NSBox.h
index 27b5719..57a3d06 100644
--- a/Headers/AppKit/NSBox.h
+++ b/Headers/AppKit/NSBox.h
@@ -49,26 +49,26 @@
  * </list>
  */
 typedef enum _NSTitlePosition {
-  NSNoTitle,
-  NSAboveTop,
-  NSAtTop,
-  NSBelowTop,
-  NSAboveBottom,
-  NSAtBottom,
-  NSBelowBottom
+    NSNoTitle     = 0,
+    NSAboveTop    = 1,
+    NSAtTop       = 2,
+    NSBelowTop    = 3,
+    NSAboveBottom = 4,
+    NSAtBottom    = 5,
+    NSBelowBottom = 6
 } NSTitlePosition;
 
 #if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)
-typedef enum _NSBoxType
-{
-  NSBoxPrimary=0,
-  NSBoxSecondary,
-  NSBoxSeparator,
-  NSBoxOldStyle
+enum {
+    NSBoxPrimary   = 0,
+    NSBoxSecondary = 1,
+    NSBoxSeparator = 2,
+    NSBoxOldStyle  = 3,
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)
-  , NSBoxCustom
+    NSBoxCustom    = 4
 #endif
-} NSBoxType;
+};
+typedef NSUInteger NSBoxType;
 #endif
 
 @interface NSBox : NSView <NSCoding>
diff --git a/Headers/AppKit/NSBrowser.h b/Headers/AppKit/NSBrowser.h
index dcdae54..ee2f950 100644
--- a/Headers/AppKit/NSBrowser.h
+++ b/Headers/AppKit/NSBrowser.h
@@ -87,12 +87,12 @@ typedef NSUInteger NSBrowserColumnResizingType;
   NSMutableArray *_browserColumns;
   NSSize _columnSize;
   NSRect _scrollerRect;
-  int _alphaNumericalLastColumn;
-  int _maxVisibleColumns;
+  NSInteger _alphaNumericalLastColumn;
+  NSInteger _maxVisibleColumns;
   CGFloat _minColumnWidth;
-  int _lastColumnLoaded;
-  int _firstVisibleColumn;
-  int _lastVisibleColumn;
+  NSInteger _lastColumnLoaded;
+  NSInteger _firstVisibleColumn;
+  NSInteger _lastVisibleColumn;
   NSString *_columnsAutosaveName;
   NSBrowserColumnResizingType _columnResizing;
 }
diff --git a/Headers/AppKit/NSButtonCell.h b/Headers/AppKit/NSButtonCell.h
index bcef78d..997a089 100644
--- a/Headers/AppKit/NSButtonCell.h
+++ b/Headers/AppKit/NSButtonCell.h
@@ -69,7 +69,7 @@
  *         Cocoa.</desc>
  * </deflist>
  */
-typedef enum _NSButtonType {
+enum {
   NSMomentaryLightButton,
   NSPushOnPushOffButton,
   NSToggleButton,
@@ -81,9 +81,10 @@ typedef enum _NSButtonType {
   // These are old names
   NSMomentaryLight = NSMomentaryPushInButton,
   NSMomentaryPushButton = NSMomentaryLightButton
-} NSButtonType;
+};
+typedef NSUInteger NSButtonType;
 
-typedef enum _NSBezelStyle {
+enum {
   NSRoundedBezelStyle = 1,
   NSRegularSquareBezelStyle,
   NSThickSquareBezelStyle,
@@ -104,15 +105,17 @@ typedef enum _NSBezelStyle {
   NSSmallIconButtonBezelStyle,
   NSMediumIconButtonBezelStyle,
   NSLargeIconButtonBezelStyle
-} NSBezelStyle;
+};
+typedef NSUInteger NSBezelStyle;
 
-typedef enum _NSGradientType {
+enum {
     NSGradientNone,
     NSGradientConcaveWeak,
     NSGradientConcaveStrong,
     NSGradientConvexWeak,
     NSGradientConvexStrong
-} NSGradientType;
+};
+typedef NSUInteger NSGradientType;
 
 
 @interface NSButtonCell : NSActionCell
@@ -124,8 +127,8 @@ typedef enum _NSGradientType {
   NSFont *_keyEquivalentFont;
   NSSound *_sound;
   NSUInteger _keyEquivalentModifierMask;
-  NSInteger _highlightsByMask;
-  NSInteger _showAltStateMask;
+  NSUInteger _highlightsByMask;
+  NSUInteger _showAltStateMask;
   float _delayInterval;
   float _repeatInterval;
   NSBezelStyle _bezel_style;
diff --git a/Headers/AppKit/NSCell.h b/Headers/AppKit/NSCell.h
index af530ab..eda6fab 100644
--- a/Headers/AppKit/NSCell.h
+++ b/Headers/AppKit/NSCell.h
@@ -155,43 +155,43 @@ typedef NSUInteger NSImageScaling;
   id _object_value;
   struct GSCellFlagsType { 
     // total 32 bits.  0 bits left.
-    unsigned contents_is_attributed_string: 1;
-    unsigned is_highlighted: 1;
-    unsigned is_disabled: 1;
-    unsigned is_editable: 1;
-    unsigned is_rich_text: 1;
-    unsigned imports_graphics: 1;
-    unsigned shows_first_responder: 1; 
-    unsigned refuses_first_responder: 1; 
-    unsigned sends_action_on_end_editing: 1; 
-    unsigned is_bordered: 1;   
-    unsigned is_bezeled: 1;   
-    unsigned is_scrollable: 1;
-    unsigned reserved: 1;
-    unsigned text_align: 3; // 5 values
-    unsigned is_selectable: 1;
-    unsigned allows_mixed_state: 1;
-    unsigned has_valid_object_value: 1;
-    unsigned type: 2;           // 3 values
-    unsigned image_position: 3; // 7 values
-    unsigned entry_type: 4;     // 8 values
-    unsigned allows_undo: 1;
-    unsigned line_break_mode: 3; // 6 values
+    NSUInteger contents_is_attributed_string: 1;
+    NSUInteger is_highlighted: 1;
+    NSUInteger is_disabled: 1;
+    NSUInteger is_editable: 1;
+    NSUInteger is_rich_text: 1;
+    NSUInteger imports_graphics: 1;
+    NSUInteger shows_first_responder: 1; 
+    NSUInteger refuses_first_responder: 1; 
+    NSUInteger sends_action_on_end_editing: 1; 
+    NSUInteger is_bordered: 1;   
+    NSUInteger is_bezeled: 1;   
+    NSUInteger is_scrollable: 1;
+    NSUInteger reserved: 1;
+    NSUInteger text_align: 3; // 5 values
+    NSUInteger is_selectable: 1;
+    NSUInteger allows_mixed_state: 1;
+    NSUInteger has_valid_object_value: 1;
+    NSUInteger type: 2;           // 3 values
+    NSUInteger image_position: 3; // 7 values
+    NSUInteger entry_type: 4;     // 8 values
+    NSUInteger allows_undo: 1;
+    NSUInteger line_break_mode: 3; // 6 values
 
     // total 20 bits.  4 bits extension, 8 bits left.
-    int state: 2; // 3 values but one negative
-    unsigned mnemonic_location: 8;
-    unsigned control_tint: 3;
-    unsigned control_size: 2;
-    unsigned focus_ring_type: 2; // 3 values
-    unsigned base_writing_direction: 2; // 3 values
+    NSInteger state: 2; // 3 values but one negative
+    NSUInteger mnemonic_location: 8;
+    NSUInteger control_tint: 3;
+    NSUInteger control_size: 2;
+    NSUInteger focus_ring_type: 2; // 3 values
+    NSUInteger base_writing_direction: 2; // 3 values
     // 4 bits reserved for subclass use
-    unsigned subclass_bool_one: 1;
-    unsigned subclass_bool_two: 1;
-    unsigned subclass_bool_three: 1;
-    unsigned subclass_bool_four: 1;
+    NSUInteger subclass_bool_one: 1;
+    NSUInteger subclass_bool_two: 1;
+    NSUInteger subclass_bool_three: 1;
+    NSUInteger subclass_bool_four: 1;
     // Set while the cell is edited/selected
-    unsigned in_editing: 1;
+    NSUInteger in_editing: 1;
   } _cell;
   NSUInteger _mouse_down_flags;
   NSUInteger _action_mask;
@@ -242,7 +242,7 @@ typedef NSUInteger NSImageScaling;
 //
 - (NSInteger)cellAttribute:(NSCellAttribute)aParameter;
 - (void)setCellAttribute:(NSCellAttribute)aParameter
-		      to:(NSInteger)value;
+                      to:(NSInteger)value;
 
 //
 // Setting the NSCell's Type 
@@ -414,27 +414,27 @@ typedef NSUInteger NSImageScaling;
 // Tracking the Mouse 
 //
 - (BOOL)continueTracking:(NSPoint)lastPoint
-		      at:(NSPoint)currentPoint
-		  inView:(NSView *)controlView;
+                      at:(NSPoint)currentPoint
+                  inView:(NSView *)controlView;
 - (NSInteger)mouseDownFlags;
 - (void)getPeriodicDelay:(float *)delay
-		interval:(float *)interval;
+                interval:(float *)interval;
 - (BOOL)startTrackingAt:(NSPoint)startPoint
-		 inView:(NSView *)controlView;
+                 inView:(NSView *)controlView;
 - (void)stopTracking:(NSPoint)lastPoint
-		  at:(NSPoint)stopPoint
-	      inView:(NSView *)controlView
-		  mouseIsUp:(BOOL)flag;
+                  at:(NSPoint)stopPoint
+              inView:(NSView *)controlView
+           mouseIsUp:(BOOL)flag;
 - (BOOL)trackMouse:(NSEvent *)theEvent
-	    inRect:(NSRect)cellFrame
-	    ofView:(NSView *)controlView
-	    untilMouseUp:(BOOL)flag;
+            inRect:(NSRect)cellFrame
+            ofView:(NSView *)controlView
+      untilMouseUp:(BOOL)flag;
 
 //
 // Managing the Cursor 
 //
 - (void)resetCursorRect:(NSRect)cellFrame
-		 inView:(NSView *)controlView;
+                 inView:(NSView *)controlView;
 
 //
 // Handling Keyboard Alternatives 
@@ -460,17 +460,17 @@ typedef NSUInteger NSImageScaling;
 //
 - (NSView *)controlView;
 - (void)drawInteriorWithFrame:(NSRect)cellFrame
-		       inView:(NSView *)controlView;
+                       inView:(NSView *)controlView;
 - (void)drawWithFrame:(NSRect)cellFrame
-	       inView:(NSView *)controlView;
+               inView:(NSView *)controlView;
 - (void)highlight:(BOOL)lit
-	withFrame:(NSRect)cellFrame
-	   inView:(NSView *)controlView;
+        withFrame:(NSRect)cellFrame
+           inView:(NSView *)controlView;
 - (BOOL)isHighlighted;
 #if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)
 - (void)setHighlighted: (BOOL) flag;
 - (NSColor*)highlightColorWithFrame:(NSRect)cellFrame
-			     inView:(NSView *)controlView;
+                             inView:(NSView *)controlView;
 - (void)setControlTint:(NSControlTint)controlTint;
 - (NSControlTint)controlTint;
 #endif
@@ -483,16 +483,16 @@ typedef NSUInteger NSImageScaling;
 // Editing Text 
 //
 - (void)editWithFrame:(NSRect)aRect
-	       inView:(NSView *)controlView	
-	       editor:(NSText *)textObject	
-	       delegate:(id)anObject	
-		event:(NSEvent *)theEvent;
+               inView:(NSView *)controlView	
+               editor:(NSText *)textObject	
+             delegate:(id)anObject	
+                event:(NSEvent *)theEvent;
 - (void)selectWithFrame:(NSRect)aRect
-		 inView:(NSView *)controlView	 
-		 editor:(NSText *)textObject	 
-		 delegate:(id)anObject	 
-		  start:(NSInteger)selStart	 
-		 length:(NSInteger)selLength;
+                 inView:(NSView *)controlView	 
+                 editor:(NSText *)textObject	 
+               delegate:(id)anObject	 
+                  start:(NSInteger)selStart	 
+                 length:(NSInteger)selLength;
 - (void)endEditing:(NSText *)textObject;
 #if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)
 - (BOOL)sendsActionOnEndEditing;
@@ -515,7 +515,7 @@ typedef NSUInteger NSImageScaling;
 - (NSSize) _sizeText: (NSString*) title;
 - (void) _drawText: (NSString*)aString  inFrame: (NSRect)cellFrame;
 - (void) _drawAttributedText: (NSAttributedString*)aString  
-		     inFrame: (NSRect)aRect;
+                     inFrame: (NSRect)aRect;
 - (BOOL) _sendsActionOn:(NSUInteger)eventTypeMask;
 - (NSAttributedString*) _drawAttributedString;
 - (void) _drawBorderAndBackgroundWithFrame: (NSRect)cellFrame 
@@ -523,9 +523,10 @@ typedef NSUInteger NSImageScaling;
 - (void) _drawFocusRingWithFrame: (NSRect)cellFrame 
                           inView: (NSView*)controlView;
 - (void) _drawEditorWithFrame: (NSRect)cellFrame
-		       inView: (NSView*)controlView;
+                       inView: (NSView*)controlView;
 - (void) _setInEditing: (BOOL)flag;
 - (void) _updateFieldEditor: (NSText*)textObject;
+
 @end
 
 #endif // _GNUstep_H_NSCell
diff --git a/Headers/AppKit/NSComboBox.h b/Headers/AppKit/NSComboBox.h
index ae50158..01da8cb 100644
--- a/Headers/AppKit/NSComboBox.h
+++ b/Headers/AppKit/NSComboBox.h
@@ -95,22 +95,26 @@
 @end
 
 @interface NSObject (NSComboBoxDataSource)
+
 - (NSInteger) numberOfItemsInComboBox: (NSComboBox *)aComboBox;
 - (id) comboBox: (NSComboBox *)aComboBox objectValueForItemAtIndex:(NSInteger)index;
-- (NSUInteger) comboBox: (NSComboBox *)aComboBox 
-  indexOfItemWithStringValue: (NSString *)string;
+- (NSUInteger) comboBox: (NSComboBox *)aComboBox indexOfItemWithStringValue: (NSString *)string;
+
 #if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)
 /* text completion */
 - (NSString *) comboBox: (NSComboBox *)aComboBox 
-	completedString: (NSString *)aString;
+        completedString: (NSString *)aString;
 #endif
+
 @end
 
 @interface NSObject (NSComboBoxNotifications)
+
 - (void) comboBoxWillPopUp: (NSNotification *)notification;
 - (void) comboBoxWillDismiss: (NSNotification *)notification;
 - (void) comboBoxSelectionDidChange: (NSNotification *)notification;
 - (void) comboBoxSelectionIsChanging: (NSNotification *)notification;
+
 @end
 
 APPKIT_EXPORT	NSString *NSComboBoxWillPopUpNotification;
diff --git a/Headers/AppKit/NSComboBoxCell.h b/Headers/AppKit/NSComboBoxCell.h
index 8b0d3d7..821ed81 100644
--- a/Headers/AppKit/NSComboBoxCell.h
+++ b/Headers/AppKit/NSComboBoxCell.h
@@ -45,10 +45,10 @@
    BOOL			_usesDataSource;
    BOOL			_hasVerticalScroller;
    BOOL                 _completes;
-   int			_visibleItems;
+   NSInteger			_visibleItems;
    NSSize		_intercellSpacing;
-   float		_itemHeight;
-   int                  _selectedItem;
+   CGFloat		_itemHeight;
+   NSInteger                  _selectedItem;
    NSRect               _lastValidFrame;
    NSRange		_prevSelectedRange;
   
@@ -100,8 +100,8 @@
 - (NSArray *)objectValues;
 
 - (BOOL) trackMouse: (NSEvent *)theEvent 
-	     inRect: (NSRect)cellFrame
-	     ofView: (NSView *)controlView 
+             inRect: (NSRect)cellFrame
+             ofView: (NSView *)controlView 
        untilMouseUp: (BOOL)flag;
 
 #if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)
@@ -118,16 +118,17 @@
 @end
 
 @interface NSObject (NSComboBoxCellDataSource)
+
 - (NSInteger)numberOfItemsInComboBoxCell:(NSComboBoxCell *)comboBoxCell;
-- (id)comboBoxCell:(NSComboBoxCell *)aComboBoxCell 
-  objectValueForItemAtIndex:(NSInteger)index;
-- (NSUInteger)comboBoxCell:(NSComboBoxCell *)aComboBoxCell
-  indexOfItemWithStringValue:(NSString *)string;
+- (id)comboBoxCell:(NSComboBoxCell *)aComboBoxCell objectValueForItemAtIndex:(NSInteger)index;
+- (NSUInteger)comboBoxCell:(NSComboBoxCell *)aComboBoxCell indexOfItemWithStringValue:(NSString *)string;
+
 #if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)
 /* text completion */
 - (NSString *)comboBoxCell:(NSComboBoxCell *)aComboBoxCell 
-	   completedString:(NSString *)uncompletedString;
+           completedString:(NSString *)uncompletedString;
 #endif
+
 @end
 
 #endif /* _GNUstep_H_NSComboBoxCell */
diff --git a/Headers/AppKit/NSDataLinkManager.h b/Headers/AppKit/NSDataLinkManager.h
index 920e668..6334146 100644
--- a/Headers/AppKit/NSDataLinkManager.h
+++ b/Headers/AppKit/NSDataLinkManager.h
@@ -145,6 +145,6 @@
 // Draw a Distinctive Outline around Linked Data
 //
 void NSFrameLinkRect(NSRect aRect, BOOL isDestination);
-float NSLinkFrameThickness(void);
+CGFloat NSLinkFrameThickness(void);
 
 #endif // _GNUstep_H_NSDataLinkManager
diff --git a/Headers/AppKit/NSDocument.h b/Headers/AppKit/NSDocument.h
index cd068f2..cd6bc10 100644
--- a/Headers/AppKit/NSDocument.h
+++ b/Headers/AppKit/NSDocument.h
@@ -86,8 +86,9 @@ typedef enum _NSSaveOperationType {
 
 @interface NSDocument : NSObject
 {
-  @private
+  @protected /* used by Gorm */
     NSWindow		*_window;		// Outlet for the single window case
+  @private
     NSMutableArray 	*_window_controllers;	// WindowControllers for this document
     NSURL		*_file_url;		// Save location as URL
     NSString		*_file_name;		// Save location
diff --git a/Headers/AppKit/NSDocumentController.h b/Headers/AppKit/NSDocumentController.h
index 4738423..67b5bc5 100644
--- a/Headers/AppKit/NSDocumentController.h
+++ b/Headers/AppKit/NSDocumentController.h
@@ -54,7 +54,9 @@
   @private
     NSMutableArray 	*_documents;
     NSMutableArray 	*_recent_documents;
+  @protected /* used by Gorm */
     NSArray		*_types;	// from info.plist with key NSTypes
+  @private
     NSTimeInterval      _autosavingDelay;
     struct __controller_flags {
         unsigned int should_create_ui:1;
diff --git a/Headers/AppKit/NSEvent.h b/Headers/AppKit/NSEvent.h
index dc4232f..2eeb67b 100644
--- a/Headers/AppKit/NSEvent.h
+++ b/Headers/AppKit/NSEvent.h
@@ -168,7 +168,7 @@ NSEventMaskFromType(NSEventType type);
 static inline NSUInteger
 NSEventMaskFromType(NSEventType type)
 {
-  return (1 << type);
+  return ((NSUInteger)1 << type);
 }
 
 enum {
diff --git a/Headers/AppKit/NSFontPanel.h b/Headers/AppKit/NSFontPanel.h
index faf9633..5dda479 100644
--- a/Headers/AppKit/NSFontPanel.h
+++ b/Headers/AppKit/NSFontPanel.h
@@ -66,10 +66,10 @@ enum {
   // store currently selected information
   NSArray *_familyList;
   NSArray *_faceList;
-  int _family;
-  int _face;
+  NSInteger _family;
+  NSInteger _face;
   NSFontTraitMask _traits;
-  int _weight;
+  NSInteger _weight;
   // user typed string for preview area
   NSString *_previewString;
 
diff --git a/Headers/AppKit/NSGraphics.h b/Headers/AppKit/NSGraphics.h
index 8a265a6..da5e0d3 100644
--- a/Headers/AppKit/NSGraphics.h
+++ b/Headers/AppKit/NSGraphics.h
@@ -123,8 +123,7 @@ APPKIT_EXPORT void NSRectClipList(const NSRect *rects, NSInteger count);
 APPKIT_EXPORT void NSRectFill(NSRect aRect);
 APPKIT_EXPORT void NSRectFillList(const NSRect *rects, NSInteger count);
 APPKIT_EXPORT void NSRectFillListWithGrays(const NSRect *rects,
-					   const CGFloat *grays,
-                                           NSInteger count);
+					   const CGFloat *grays, NSInteger count);
 
 /** Draws a set of edges of aRect.  The sides array should contain
     count edges, and grays the corresponding color.  Edges are drawn
@@ -132,8 +131,7 @@ APPKIT_EXPORT void NSRectFillListWithGrays(const NSRect *rects,
     inside previous edges (thus, they will never overlap).  */
 APPKIT_EXPORT NSRect NSDrawTiledRects(NSRect aRect, const NSRect clipRect,
                                       const NSRectEdge *sides,
-                                      const CGFloat *grays,
-                                      NSInteger count);
+                                      const CGFloat *grays, NSInteger count);
 
 APPKIT_EXPORT void NSDrawButton(const NSRect aRect, const NSRect clipRect);
 APPKIT_EXPORT void NSDrawGrayBezel(const NSRect aRect, const NSRect clipRect);
@@ -167,7 +165,7 @@ APPKIT_EXPORT void NSFrameRectWithWidthUsingOperation(const NSRect aRect, CGFloa
 
 APPKIT_EXPORT NSColor* NSReadPixel(NSPoint location);
 
-APPKIT_EXPORT void NSCopyBitmapFromGState(int srcGstate, NSRect srcRect, 
+APPKIT_EXPORT void NSCopyBitmapFromGState(NSInteger srcGstate, NSRect srcRect, 
 					  NSRect destRect);
 APPKIT_EXPORT void NSCopyBits(NSInteger srcGstate, NSRect srcRect, 
 			      NSPoint destPoint);
@@ -227,8 +225,8 @@ APPKIT_EXPORT NSWindow* GSWindowWithNumber(NSInteger num);
 
 #if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)
 // Window operations
-APPKIT_EXPORT void NSConvertGlobalToWindowNumber(int globalNum, unsigned int *winNum);
-APPKIT_EXPORT void NSConvertWindowNumberToGlobal(int winNum, unsigned int *globalNum);
+APPKIT_EXPORT void NSConvertGlobalToWindowNumber(NSInteger globalNum, NSInteger *winNum);
+APPKIT_EXPORT void NSConvertWindowNumberToGlobal(NSInteger winNum, NSInteger *globalNum);
 
 // Rectangle drawing
 APPKIT_EXPORT NSRect NSDrawColorTiledRects(NSRect boundsRect, NSRect clipRect, 
@@ -254,9 +252,9 @@ APPKIT_EXPORT void NSDrawWindowBackground(NSRect aRect);
 
 // Context information
 APPKIT_EXPORT void NSCountWindowsForContext(NSInteger context, NSInteger *count);
-APPKIT_EXPORT void NSWindowListForContext(NSInteger context, NSInteger size, NSInteger **list);
-APPKIT_EXPORT int NSGetWindowServerMemory(int context, int *virtualMemory, 
-                                          int *windowBackingMemory, 
+APPKIT_EXPORT void NSWindowListForContext(NSInteger context, NSInteger size, NSInteger list[]);
+APPKIT_EXPORT int NSGetWindowServerMemory(NSInteger context, NSInteger *virtualMemory, 
+                                          NSInteger *windowBackingMemory, 
                                           NSString **windowDumpStream);
 
 #endif
diff --git a/Headers/AppKit/NSGraphicsContext.h b/Headers/AppKit/NSGraphicsContext.h
index 6af577a..31485b3 100644
--- a/Headers/AppKit/NSGraphicsContext.h
+++ b/Headers/AppKit/NSGraphicsContext.h
@@ -53,12 +53,10 @@
 /*
  * Backing Store Types
  */
-enum _NSBackingStoreType
-{
-  NSBackingStoreRetained,
-  NSBackingStoreNonretained,
-  NSBackingStoreBuffered
-
+enum {
+    NSBackingStoreRetained     = 0,
+    NSBackingStoreNonretained  = 1,
+    NSBackingStoreBuffered     = 2
 };
 typedef NSUInteger NSBackingStoreType;
 
@@ -492,7 +490,7 @@ transform between current user space and image space for this image.</desc>
 /* ----------------------------------------------------------------------- */
 @interface NSGraphicsContext (Printing)
 
-- (void) beginPage: (int)ordinalNum
+- (void) beginPage: (NSInteger)ordinalNum
              label: (NSString*)aString
               bBox: (NSRect)pageRect
              fonts: (NSString*)fontNames;
@@ -501,11 +499,11 @@ transform between current user space and image space for this image.</desc>
                  createdBy: (NSString*)anApplication
                      fonts: (NSString*)fontNames
                    forWhom: (NSString*)user
-                     pages: (int)numPages
+                     pages: (NSInteger)numPages
                      title: (NSString*)aTitle;
 - (void) beginSetup;
 - (void) beginTrailer;
-- (void) endDocumentPages: (int)pages
+- (void) endDocumentPages: (NSInteger)pages
             documentFonts: (NSSet*)fontNames;
 - (void) endHeaderComments;
 - (void) endPageSetup;
diff --git a/Headers/AppKit/NSImageCell.h b/Headers/AppKit/NSImageCell.h
index 0775a8c..0c6f44e 100644
--- a/Headers/AppKit/NSImageCell.h
+++ b/Headers/AppKit/NSImageCell.h
@@ -43,7 +43,7 @@
  *  NSImageAlignLeft, NSImageAlignBottom, NSImageAlignBottomLeft,
  *  NSImageAlignBottomRight, NSImageAlignRight</code>.</p>
  */
-typedef enum {
+enum {
     NSImageAlignCenter = 0,
     NSImageAlignTop,
     NSImageAlignTopLeft,
@@ -53,7 +53,8 @@ typedef enum {
     NSImageAlignBottomLeft,
     NSImageAlignBottomRight,
     NSImageAlignRight
-} NSImageAlignment;
+};
+typedef NSUInteger NSImageAlignment;
 
 /**
  *  <p>Enumeration of the types of frame that can be used in an
@@ -61,13 +62,14 @@ typedef enum {
  *  NSImageFramePhoto, NSImageFrameGrayBezel, NSImageFrameGroove,
  *  NSImageFrameButton</code>.</p>
  */
-typedef enum {
+enum {
     NSImageFrameNone = 0,
     NSImageFramePhoto,
     NSImageFrameGrayBezel,
     NSImageFrameGroove,
     NSImageFrameButton
-} NSImageFrameStyle;
+};
+typedef NSUInteger NSImageFrameStyle;
 
 /**
  *  <p>An NSImageCell is a cell that can display a single image.  It
diff --git a/Headers/AppKit/NSInputManager.h b/Headers/AppKit/NSInputManager.h
index 7f20076..dfb66eb 100644
--- a/Headers/AppKit/NSInputManager.h
+++ b/Headers/AppKit/NSInputManager.h
@@ -125,7 +125,7 @@
      encounter this keystroke, we abort all pending keystrokes and
      reset ourselves immediately into vanilla root input state.  */
   unichar _abortCharacter;
-  unsigned int _abortFlags;
+  NSUInteger _abortFlags;
 
   /* When it is YES, keystrokes containing the NSControlKeyMask as not
      inserted into the text.  This is so that if you press Control-x,
@@ -163,7 +163,7 @@
    the modifiers.  */
 + (BOOL) parseKey: (NSString *)key 
     intoCharacter: (unichar *)character
-     andModifiers: (unsigned int *)modifiers;
+     andModifiers: (NSUInteger *)modifiers;
 
 /* This is used to produce a key description which can be put into a
    keybinding file from an actual keystroke.  The gnustep-gui never
@@ -174,7 +174,7 @@
    files.  Pass 0 as modifiers if you only want the name of the
    keystroke, ignoring modifiers.  */
 + (NSString *) describeKeyStroke: (unichar)character
-		   withModifiers: (unsigned int)modifiers;
+		   withModifiers: (NSUInteger)modifiers;
 
 /* Methods used internally ... not really part of the public API, can change
    without notice.  */
diff --git a/Headers/AppKit/NSLayoutManager.h b/Headers/AppKit/NSLayoutManager.h
index bd011cf..a733f3d 100644
--- a/Headers/AppKit/NSLayoutManager.h
+++ b/Headers/AppKit/NSLayoutManager.h
@@ -81,12 +81,12 @@ typedef enum {
 - (BOOL) layoutManagerOwnsFirstResponderInWindow: (NSWindow *)window;
 
 -(NSArray *) rulerMarkersForTextView: (NSTextView *)textView
-		      paragraphStyle: (NSParagraphStyle *)paragraphStyle
-			       ruler: (NSRulerView *)aRulerView;
+                      paragraphStyle: (NSParagraphStyle *)paragraphStyle
+                               ruler: (NSRulerView *)aRulerView;
 -(NSView *) rulerAccessoryViewForTextView: (NSTextView *)textView
-			   paragraphStyle: (NSParagraphStyle *)style
-				    ruler: (NSRulerView *)ruler
-				  enabled: (BOOL)isEnabled;
+                           paragraphStyle: (NSParagraphStyle *)style
+                                    ruler: (NSRulerView *)ruler
+                                  enabled: (BOOL)isEnabled;
 
 -(float) hyphenationFactor;
 -(void) setHyphenationFactor: (float)factor;
@@ -103,28 +103,28 @@ typedef enum {
 
 
 - (NSRect *) rectArrayForGlyphRange: (NSRange)glyphRange
-	withinSelectedGlyphRange: (NSRange)selGlyphRange
-	inTextContainer: (NSTextContainer *)container
-	rectCount: (NSUInteger *)rectCount;
+           withinSelectedGlyphRange: (NSRange)selGlyphRange
+                    inTextContainer: (NSTextContainer *)container
+                          rectCount: (NSUInteger *)rectCount;
 - (NSRect *) rectArrayForCharacterRange: (NSRange)charRange
-	withinSelectedCharacterRange: (NSRange)selCharRange
-	inTextContainer: (NSTextContainer *)container
-	rectCount: (NSUInteger *)rectCount;
+           withinSelectedCharacterRange: (NSRange)selCharRange
+                        inTextContainer: (NSTextContainer *)container
+                              rectCount: (NSUInteger *)rectCount;
 
 - (NSRect) boundingRectForGlyphRange: (NSRange)glyphRange 
-	inTextContainer: (NSTextContainer *)aTextContainer;
+                     inTextContainer: (NSTextContainer *)aTextContainer;
 
 
 - (NSRange) glyphRangeForBoundingRect: (NSRect)bounds 
-	inTextContainer: (NSTextContainer *)container;
+                      inTextContainer: (NSTextContainer *)container;
 - (NSRange) glyphRangeForBoundingRectWithoutAdditionalLayout: (NSRect)bounds
-	inTextContainer: (NSTextContainer *)container;
+                                             inTextContainer: (NSTextContainer *)container;
 
-- (unsigned int) glyphIndexForPoint: (NSPoint)aPoint
-	inTextContainer: (NSTextContainer *)aTextContainer;
+- (NSUInteger) glyphIndexForPoint: (NSPoint)aPoint
+                  inTextContainer: (NSTextContainer *)aTextContainer;
 - (NSUInteger) glyphIndexForPoint: (NSPoint)point
-	inTextContainer: (NSTextContainer *)container
-	fractionOfDistanceThroughGlyph: (CGFloat *)partialFraction;
+                  inTextContainer: (NSTextContainer *)container
+   fractionOfDistanceThroughGlyph: (CGFloat *)partialFraction;
 
 
 /*
@@ -138,8 +138,8 @@ If the character isn't in the text container, returns NSZeroRect.
 
 GNUstep extension.
 */
--(NSRect) insertionPointRectForCharacterIndex: (unsigned int)cindex
-			      inTextContainer: (NSTextContainer *)textContainer;
+-(NSRect) insertionPointRectForCharacterIndex: (NSUInteger)cindex
+                              inTextContainer: (NSTextContainer *)textContainer;
 
 
 /*
@@ -166,10 +166,10 @@ in that container.
 
 GNUstep extension.
 */
--(unsigned int) characterIndexMoving: (GSInsertionPointMovementDirection)direction
-		  fromCharacterIndex: (unsigned int)from
-	      originalCharacterIndex: (unsigned int)original
-			    distance: (float)distance;
+-(NSUInteger) characterIndexMoving: (GSInsertionPointMovementDirection)direction
+                fromCharacterIndex: (NSUInteger)from
+            originalCharacterIndex: (NSUInteger)original
+                          distance: (CGFloat)distance;
 
 
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)
@@ -195,22 +195,22 @@ GNUstep extension.
 @interface NSLayoutManager (drawing)
 
 -(void) drawBackgroundForGlyphRange: (NSRange)range
-	atPoint: (NSPoint)containerOrigin;
+                            atPoint: (NSPoint)containerOrigin;
 
 -(void) drawGlyphsForGlyphRange: (NSRange)range
-	atPoint: (NSPoint)containerOrigin;
+                        atPoint: (NSPoint)containerOrigin;
 
 -(void) underlineGylphRange: (NSRange)range
               underlineType: (NSInteger)type
            lineFragmentRect: (NSRect)fragmentRect
      lineFragmentGlyphRange: (NSRange)fragmentGlyphRange
-	    containerOrigin: (NSPoint)containerOrigin;
+            containerOrigin: (NSPoint)containerOrigin;
 -(void) drawUnderlineForGlyphRange: (NSRange)underlineRange
                      underlineType: (NSInteger)type
                     baselineOffset: (CGFloat)offset
                   lineFragmentRect: (NSRect)fragmentRect
             lineFragmentGlyphRange: (NSRange)fragmentGlyphRange
-	           containerOrigin: (NSPoint)containerOrigin;
+                   containerOrigin: (NSPoint)containerOrigin;
 
 - (NSSize) attachmentSizeForGlyphAtIndex: (NSUInteger)glyphIndex;
 - (void) showAttachmentCell: (NSCell *)cell
@@ -220,6 +220,7 @@ GNUstep extension.
 @end
 
 @interface NSLayoutManager (temporaryattributes)
+
 - (void) addTemporaryAttributes: (NSDictionary *)attrs 
               forCharacterRange: (NSRange)range;
 - (void) removeTemporaryAttribute: (NSString *)attr 
@@ -244,6 +245,7 @@ GNUstep extension.
                                  longestEffectiveRange: (NSRange*)longestRange 
                                                inRange: (NSRange)range;
 #endif
+
 @end
 #endif
 
diff --git a/Headers/AppKit/NSMatrix.h b/Headers/AppKit/NSMatrix.h
index f2da1c5..2b63d01 100644
--- a/Headers/AppKit/NSMatrix.h
+++ b/Headers/AppKit/NSMatrix.h
@@ -51,12 +51,12 @@ typedef enum _NSMatrixMode {
 
 @interface NSMatrix : NSControl <NSCoding>
 {
-  __strong id		**_cells;
-  BOOL		**_selectedCells;
-  int		_maxRows;
-  int		_maxCols;
-  int		_numRows;
-  int		_numCols;
+  __strong id   **_cells;
+  BOOL          **_selectedCells;
+  NSInteger     _maxRows;
+  NSInteger     _maxCols;
+  NSInteger     _numRows;
+  NSInteger     _numCols;
   NSZone	*_myZone;
   Class		_cellClass;
   id		_cellPrototype;
@@ -75,8 +75,8 @@ typedef enum _NSMatrixMode {
   SEL		_doubleAction;
   SEL		_errorAction;
   id		_selectedCell;
-  int		_selectedRow;
-  int		_selectedColumn;
+  NSInteger     _selectedRow;
+  NSInteger     _selectedColumn;
   BOOL		_allowsEmptySelection;
   BOOL		_selectionByRect;
   BOOL		_drawsBackground;
@@ -84,8 +84,8 @@ typedef enum _NSMatrixMode {
   BOOL		_autosizesCells;
   BOOL		_autoscroll;
   id            _reserved1;
-  int		_dottedRow;
-  int		_dottedColumn;
+  NSInteger     _dottedRow;
+  NSInteger     _dottedColumn;
 }
 
 /*
diff --git a/Headers/AppKit/NSMenu.h b/Headers/AppKit/NSMenu.h
index b499c11..cdf3790 100644
--- a/Headers/AppKit/NSMenu.h
+++ b/Headers/AppKit/NSMenu.h
@@ -100,22 +100,22 @@
 /** Method used by NSMenuItemCell to draw itself correctly and nicely
  *  lined up with the other menu items.
  */
-- (float) stateImageWidth; 
+- (CGFloat) stateImageWidth; 
 /** Method used by NSMenuItemCell to draw itself correctly and nicely
  *  lined up with the other menu items
  */
-- (float) imageAndTitleOffset;
+- (CGFloat) imageAndTitleOffset;
 /** Methos used by NSMenuItemCell to draw itself correctly and nicely
  *  lined up with the other menu items.
  */
-- (float) imageAndTitleWidth;
+- (CGFloat) imageAndTitleWidth;
 /** Methos used by NSMenuItemCell to draw itself correctly and nicely
  *  lined up with the other menu items.
  */
-- (float) keyEquivalentOffset;
+- (CGFloat) keyEquivalentOffset;
 /** Used by NSItemCell to ...
  */
-- (float) keyEquivalentWidth;
+- (CGFloat) keyEquivalentWidth;
 
 /** Used by the NSMenu to determine where to position a
  *  submenu.
@@ -352,11 +352,11 @@
   } _menu;
 
 @private
-  NSWindow *_aWindow;
-  NSWindow *_bWindow;
-  NSMenu *_oldAttachedMenu;
-  int     _oldHiglightedIndex;
-  NSString *_name;
+  NSWindow  *_aWindow;
+  NSWindow  *_bWindow;
+  NSMenu    *_oldAttachedMenu;
+  NSInteger _oldHiglightedIndex;
+  NSString  *_name;
 }
 
 /** Returns the memory allocation zone used to create instances of this class.
@@ -444,7 +444,7 @@
  * and the actionSelector.
  */
 - (NSInteger) indexOfItemWithTarget: (id)anObject
-                   andAction: (SEL)actionSelector;
+                          andAction: (SEL)actionSelector;
 
 /** Returns the index of an item with the represented object anObject.
  */
@@ -528,7 +528,7 @@
 - (NSPoint) locationForSubmenu: (NSMenu*)aSubmenu;
 
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)
-- (float)menuBarHeight;
+- (CGFloat)menuBarHeight;
 #endif
 
 - (BOOL) menuChangedMessagesEnabled;
diff --git a/Headers/AppKit/NSMenuView.h b/Headers/AppKit/NSMenuView.h
index 9e3bde2..98f1413 100644
--- a/Headers/AppKit/NSMenuView.h
+++ b/Headers/AppKit/NSMenuView.h
@@ -80,32 +80,32 @@
 */
 @interface NSMenuView : NSView <NSCoding, NSMenuView>
 {
-  NSMutableArray *_itemCells;
-  BOOL           _horizontal;
-  char		 _pad1[3];
-  NSFont         *_font;
-  int            _highlightedItemIndex;
-  float          _horizontalEdgePad;
-  float          _stateImageOffset;
-  float          _stateImageWidth;
-  float          _imageAndTitleOffset;
-  float          _imageAndTitleWidth;
-  float          _keyEqOffset;
-  float          _keyEqWidth;
-  BOOL           _needsSizing;
-  char		 _pad2[3];
-  NSSize         _cellSize;
+  NSMutableArray    *_itemCells;
+  BOOL              _horizontal;
+  char              _pad1[3];
+  NSFont            *_font;
+  NSInteger         _highlightedItemIndex;
+  CGFloat           _horizontalEdgePad;
+  CGFloat           _stateImageOffset;
+  CGFloat           _stateImageWidth;
+  CGFloat           _imageAndTitleOffset;
+  CGFloat           _imageAndTitleWidth;
+  CGFloat           _keyEqOffset;
+  CGFloat           _keyEqWidth;
+  BOOL              _needsSizing;
+  char              _pad2[3];
+  NSSize            _cellSize;
 
 @private
-  id             _items_link;
-  int            _leftBorderOffset;
-  id             _titleView;
+  id                _items_link;
+  NSInteger         _leftBorderOffset;
+  id                _titleView;
 
   /*
   Private and not named '_menu' to avoid confusion and further problems
   with NSResponder's menu.
   */
-  NSMenu        *_attachedMenu;
+  NSMenu            *_attachedMenu;
 }
 
 /***********************************************************************
@@ -123,7 +123,7 @@
 /**
    Returns the height of the menu bar.
  */
-+ (float) menuBarHeight;
++ (CGFloat) menuBarHeight;
 
 /**
    Sets the menu to be displayed in to menu. Also this method adds this 
@@ -209,12 +209,12 @@
    Returns horizontal space used for padding between menu item elements 
    (state image, title image, title, key equivalent, submenu arrow image).
  */
-- (float) horizontalEdgePadding;
+- (CGFloat) horizontalEdgePadding;
 
 /**
    Sets amount of pixels added between menu item elements to pad.
  */
-- (void) setHorizontalEdgePadding: (float)pad;
+- (void) setHorizontalEdgePadding: (CGFloat)pad;
 
 /***********************************************************************
  * Notification methods
@@ -293,35 +293,35 @@
 /**
    Returns the starting horizontal position for drawing the state image.
  */
-- (float) stateImageOffset;
+- (CGFloat) stateImageOffset;
 
 /**
    Returns the width of the state image.
  */
-- (float) stateImageWidth;
+- (CGFloat) stateImageWidth;
 
 /**
    Returns the starting horizontal position for drawing the image and title.
  */
-- (float) imageAndTitleOffset;
+- (CGFloat) imageAndTitleOffset;
 
 /**
    Returns the width of the image and title section. Tis section contains 
    image and text of menu item.
  */
-- (float) imageAndTitleWidth;
+- (CGFloat) imageAndTitleWidth;
 
 /**
    Returns the starting position for drawing the key equivalent. Key 
    equivalent can be submenu arrow if menu item has submenu.
  */
-- (float) keyEquivalentOffset;
+- (CGFloat) keyEquivalentOffset;
 
 /**
    Returns the width of key equivalent text. Key equivalent can be submenu 
    arrow if menu item has submenu
  */
-- (float) keyEquivalentWidth;
+- (CGFloat) keyEquivalentWidth;
 
 /**
    Returns bounds rectangle of the menu view. It is smaller by 1 pixel 
diff --git a/Headers/AppKit/NSOutlineView.h b/Headers/AppKit/NSOutlineView.h
index eb45d22..8f6023b 100644
--- a/Headers/AppKit/NSOutlineView.h
+++ b/Headers/AppKit/NSOutlineView.h
@@ -178,7 +178,9 @@ namesOfPromisedFilesDroppedAtDestination: (NSURL *)dropDestination
 /*
  * Constants
  */
-extern const int NSOutlineViewDropOnItemIndex;
+enum {
+    NSOutlineViewDropOnItemIndex = -1
+};
 
 /*
  * Notifications
diff --git a/Headers/AppKit/NSParagraphStyle.h b/Headers/AppKit/NSParagraphStyle.h
index 3cf8f35..d50c27c 100644
--- a/Headers/AppKit/NSParagraphStyle.h
+++ b/Headers/AppKit/NSParagraphStyle.h
@@ -69,7 +69,7 @@ APPKIT_EXPORT NSString *NSTabColumnTerminatorsAttributeName;
   NSTextTabType	_tabStopType;
   NSDictionary *_options;
   NSTextAlignment _alignment;
-  float	_location;
+  CGFloat _location;
 }
 
 - (id) initWithType: (NSTextTabType)type  location: (CGFloat)loc;
@@ -91,22 +91,22 @@ APPKIT_EXPORT NSString *NSTabColumnTerminatorsAttributeName;
   NSMutableArray *_tabStops;
   NSArray *_textBlocks;
   NSArray *_textLists;
-  float _lineSpacing;
-  float _paragraphSpacing;
-  float _headIndent;
-  float _tailIndent;
-  float _firstLineHeadIndent;
-  float _minimumLineHeight;
-  float _maximumLineHeight;
-  float _paragraphSpacingBefore;
-  float _defaultTabInterval;
+  CGFloat _lineSpacing;
+  CGFloat _paragraphSpacing;
+  CGFloat _headIndent;
+  CGFloat _tailIndent;
+  CGFloat _firstLineHeadIndent;
+  CGFloat _minimumLineHeight;
+  CGFloat _maximumLineHeight;
+  CGFloat _paragraphSpacingBefore;
+  CGFloat _defaultTabInterval;
+  CGFloat _lineHeightMultiple;
   float _hyphenationFactor;
-  float _lineHeightMultiple;
   float _tighteningFactorForTruncation;
   NSTextAlignment _alignment;
   NSLineBreakMode _lineBreakMode;
   NSWritingDirection _baseDirection;
-  int _headerLevel;
+  NSInteger _headerLevel;
 }
 
 + (NSParagraphStyle*) defaultParagraphStyle;
diff --git a/Headers/AppKit/NSPopUpButtonCell.h b/Headers/AppKit/NSPopUpButtonCell.h
index 0838a1a..6bc84b7 100644
--- a/Headers/AppKit/NSPopUpButtonCell.h
+++ b/Headers/AppKit/NSPopUpButtonCell.h
@@ -50,11 +50,11 @@ typedef enum {
 {
   id <NSMenuItem> _selectedItem;
   struct __pbcFlags {
-      unsigned int pullsDown: 1;
-      unsigned int preferredEdge: 3;
-      unsigned int usesItemFromMenu: 1;
-      unsigned int altersStateOfSelectedItem: 1;
-      unsigned int arrowPosition: 2;
+      NSUInteger pullsDown: 1;
+      NSUInteger preferredEdge: 3;
+      NSUInteger usesItemFromMenu: 1;
+      NSUInteger altersStateOfSelectedItem: 1;
+      NSUInteger arrowPosition: 2;
   } _pbcFlags;
 }
 
diff --git a/Headers/AppKit/NSPrintOperation.h b/Headers/AppKit/NSPrintOperation.h
index 9e019a2..d8b53b8 100644
--- a/Headers/AppKit/NSPrintOperation.h
+++ b/Headers/AppKit/NSPrintOperation.h
@@ -77,7 +77,7 @@ typedef enum _NSPrintingPageOrder {
       unsigned int can_spawn_separate_thread:1;
       unsigned int RESERVED:29;
   } _flags;
-  int  _currentPage;
+  NSInteger  _currentPage;
 }
 
 //
@@ -164,7 +164,7 @@ typedef enum _NSPrintingPageOrder {
 //
 // Page Information
 //
-- (int)currentPage;
+- (NSInteger)currentPage;
 - (NSPrintingPageOrder)pageOrder;
 - (void)setPageOrder:(NSPrintingPageOrder)order;
 
diff --git a/Headers/AppKit/NSScreen.h b/Headers/AppKit/NSScreen.h
index cf44382..5d6a0a0 100644
--- a/Headers/AppKit/NSScreen.h
+++ b/Headers/AppKit/NSScreen.h
@@ -44,11 +44,11 @@
 @interface NSScreen : NSObject
 {
 @private
-  NSWindowDepth        _depth;
-  NSRect               _frame;
-  int                  _screenNumber;
-  NSWindowDepth		*_supportedWindowDepths;
-  void			*_reserved;
+  NSWindowDepth _depth;
+  NSRect        _frame;
+  NSInteger     _screenNumber;
+  NSWindowDepth *_supportedWindowDepths;
+  void          *_reserved;
 }
 
 /*
@@ -71,10 +71,10 @@
 - (NSRect) visibleFrame;
 #endif
 #if OS_API_VERSION(GS_API_NONE, GS_API_NONE)
-- (int) screenNumber;
+- (NSInteger) screenNumber;
 #endif
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)
-- (float) userSpaceScaleFactor;
+- (CGFloat) userSpaceScaleFactor;
 #endif
 
 @end
diff --git a/Headers/AppKit/NSScrollView.h b/Headers/AppKit/NSScrollView.h
index 50aaef6..85fa32d 100644
--- a/Headers/AppKit/NSScrollView.h
+++ b/Headers/AppKit/NSScrollView.h
@@ -49,10 +49,10 @@
   NSRulerView *_vertRuler;
   NSClipView *_headerClipView;
   NSView *_cornerView;
-  float _hLineScroll;
-  float _hPageScroll;
-  float _vLineScroll;
-  float _vPageScroll;
+  CGFloat _hLineScroll;
+  CGFloat _hPageScroll;
+  CGFloat _vLineScroll;
+  CGFloat _vPageScroll;
   NSBorderType _borderType;
   BOOL _hasHorizScroller;
   BOOL _hasVertScroller;
diff --git a/Headers/AppKit/NSScroller.h b/Headers/AppKit/NSScroller.h
index dcda44b..932667b 100644
--- a/Headers/AppKit/NSScroller.h
+++ b/Headers/AppKit/NSScroller.h
@@ -83,10 +83,10 @@ typedef NSUInteger NSScrollerArrow;
   NSUsableScrollerParts _usableParts;
   struct _scFlagsType { 
     // total 7 bits.  25 bits left.
-    unsigned isHorizontal: 1;
-    unsigned isEnabled: 1;
-    unsigned control_tint: 3;
-    unsigned control_size: 2;
+    uint32_t isHorizontal: 1;
+    uint32_t isEnabled: 1;
+    uint32_t control_tint: 3;
+    uint32_t control_size: 2;
   } _scFlags;
 }
 
diff --git a/Headers/AppKit/NSSpellChecker.h b/Headers/AppKit/NSSpellChecker.h
index 280fcef..7bf3ee2 100644
--- a/Headers/AppKit/NSSpellChecker.h
+++ b/Headers/AppKit/NSSpellChecker.h
@@ -53,8 +53,8 @@
   NSMutableDictionary *_ignoredWords;
 
   // Variables to keep state...
-  int _position; 
-  int _currentTag;
+  NSInteger _position; 
+  NSInteger _currentTag;
   BOOL _wrapFlag;
 
   // GUI ...
@@ -88,16 +88,16 @@
 //
 // Checking Spelling 
 //
-- (int)countWordsInString:(NSString *)aString
-		 language:(NSString *)language;
+- (NSInteger)countWordsInString:(NSString *)aString
+                       language:(NSString *)language;
 - (NSRange)checkSpellingOfString:(NSString *)stringToCheck
-		      startingAt:(int)startingOffset;
+		      startingAt:(NSInteger)startingOffset;
 - (NSRange)checkSpellingOfString:(NSString *)stringToCheck
-		      startingAt:(int)startingOffset
+		      startingAt:(NSInteger)startingOffset
 			language:(NSString *)language
 			    wrap:(BOOL)wrapFlag
-	  inSpellDocumentWithTag:(int)tag
-		       wordCount:(int *)wordCount;
+	  inSpellDocumentWithTag:(NSInteger)tag
+		       wordCount:(NSInteger *)wordCount;
 - (NSArray *)guessesForWord:(NSString *)word;
 
 //
@@ -109,16 +109,14 @@
 //
 // Managing the Spelling Process 
 //
-+ (int)uniqueSpellDocumentTag;
-- (void)closeSpellDocumentWithTag:(int)tag;
-- (void)ignoreWord:(NSString *)wordToIgnore
-  inSpellDocumentWithTag:(int)tag;
-- (NSArray *)ignoredWordsInSpellDocumentWithTag:(int)tag;
-- (void)setIgnoredWords:(NSArray *)someWords
-  inSpellDocumentWithTag:(int)tag;
++ (NSInteger)uniqueSpellDocumentTag;
+- (void)closeSpellDocumentWithTag:(NSInteger)tag;
+- (void)ignoreWord:(NSString *)wordToIgnore inSpellDocumentWithTag:(NSInteger)tag;
+- (NSArray *)ignoredWordsInSpellDocumentWithTag:(NSInteger)tag;
+- (void)setIgnoredWords:(NSArray *)someWords inSpellDocumentWithTag:(NSInteger)tag;
 - (void)setWordFieldStringValue:(NSString *)aString;
 - (void)updateSpellingPanelWithMisspelledWord:(NSString *)word;
 
 @end
-#endif // _GNUstep_H_NSSpellChecker
 
+#endif // _GNUstep_H_NSSpellChecker
\ No newline at end of file
diff --git a/Headers/AppKit/NSTableColumn.h b/Headers/AppKit/NSTableColumn.h
index 6b8139c..480a8dd 100644
--- a/Headers/AppKit/NSTableColumn.h
+++ b/Headers/AppKit/NSTableColumn.h
@@ -60,9 +60,9 @@ enum {
 {
   id _identifier;
   NSTableView *_tableView;
-  float _width;
-  float _min_width;
-  float _max_width;
+  CGFloat _width;
+  CGFloat _min_width;
+  CGFloat _max_width;
   NSUInteger _resizing_mask;
   BOOL _is_resizable;
   BOOL _is_editable;
diff --git a/Headers/AppKit/NSTableHeaderView.h b/Headers/AppKit/NSTableHeaderView.h
index f3c7dea..6e3ce53 100644
--- a/Headers/AppKit/NSTableHeaderView.h
+++ b/Headers/AppKit/NSTableHeaderView.h
@@ -39,7 +39,7 @@
 @interface NSTableHeaderView : NSView
 {
   NSTableView *_tableView;
-  int _resizedColumn;
+  NSInteger _resizedColumn;
 }
 /*
  * Setting the table view 
diff --git a/Headers/AppKit/NSTableView.h b/Headers/AppKit/NSTableView.h
index 7ffdd71..06185e5 100644
--- a/Headers/AppKit/NSTableView.h
+++ b/Headers/AppKit/NSTableView.h
@@ -79,7 +79,7 @@ typedef enum _NSTableViewColumnAutoresizingStyle
   BOOL               _drawsGrid;
   NSColor           *_gridColor;
   NSColor           *_backgroundColor;
-  float              _rowHeight;
+  CGFloat           _rowHeight;
   NSSize             _intercellSpacing;
   id                 _delegate;
   NSTableHeaderView *_headerView;
@@ -87,13 +87,13 @@ typedef enum _NSTableViewColumnAutoresizingStyle
   SEL                _action;
   SEL                _doubleAction;
   id                 _target;
-  int                _clickedRow;
-  int                _clickedColumn;
+  NSInteger                _clickedRow;
+  NSInteger                _clickedColumn;
   NSTableColumn     *_highlightedTableColumn;
   NSMutableIndexSet    *_selectedColumns;
   NSMutableIndexSet    *_selectedRows;
-  int                _selectedColumn;
-  int                _selectedRow;
+  NSInteger                _selectedColumn;
+  NSInteger                _selectedRow;
   BOOL               _allowsMultipleSelection;
   BOOL               _allowsEmptySelection;
   BOOL               _allowsColumnSelection;
@@ -102,8 +102,8 @@ typedef enum _NSTableViewColumnAutoresizingStyle
   BOOL               _autoresizesAllColumnsToFit;
   BOOL               _selectingColumns;
   NSText            *_textObject;
-  int                _editedRow;
-  int                _editedColumn;
+  NSInteger                _editedRow;
+  NSInteger                _editedColumn;
   NSCell            *_editedCell;
   BOOL               _autosaveTableColumns;
   NSString          *_autosaveName;
@@ -118,8 +118,8 @@ typedef enum _NSTableViewColumnAutoresizingStyle
   /*
    * Ivars Acting as Cache 
    */
-  int    _numberOfRows;
-  int    _numberOfColumns;
+  NSInteger    _numberOfRows;
+  NSInteger    _numberOfColumns;
   /* YES if _delegate responds to
      tableView:willDisplayCell:forTableColumn:row: */
   BOOL   _del_responds;
@@ -132,13 +132,13 @@ typedef enum _NSTableViewColumnAutoresizingStyle
    * origin of each column).  When a column width is changed through
    * [NSTableColumn setWidth:], then [NSTableView tile] gets called,
    * which updates the cache.  */
-  float *_columnOrigins;
+  CGFloat *_columnOrigins;
 
   /*
    *  We keep the superview's width in order to know when to
    *  size the last column to fit
    */
-  float _superview_width;
+  CGFloat _superview_width;
 
   /* if YES [which happens only during a sizeToFit], we are doing
      computations on sizes so we ignore tile (produced for example by
@@ -261,7 +261,7 @@ typedef enum _NSTableViewColumnAutoresizingStyle
 - (NSInteger) columnAtPoint: (NSPoint)aPoint;
 - (NSInteger) rowAtPoint: (NSPoint)aPoint;
 - (NSRect) frameOfCellAtColumn: (NSInteger)columnIndex 
-			   row: (NSInteger)rowIndex;
+                           row: (NSInteger)rowIndex;
 - (void) setAutoresizesAllColumnsToFit: (BOOL)flag;
 - (BOOL) autoresizesAllColumnsToFit;
 - (void) sizeLastColumnToFit;
@@ -306,7 +306,7 @@ typedef enum _NSTableViewColumnAutoresizingStyle
 /* NB: ALL TODOS */
 - (NSImage *) indicatorImageInTableColumn: (NSTableColumn *)aTableColumn;
 - (void) setIndicatorImage: (NSImage *)anImage
-	     inTableColumn: (NSTableColumn *)aTableColumn;
+             inTableColumn: (NSTableColumn *)aTableColumn;
 
 /* highlighting columns */
 /* NB: ALL TODOS */
@@ -344,7 +344,7 @@ typedef enum _NSTableViewColumnAutoresizingStyle
 @interface NSTableView (GNUPrivate)
 - (void) _sendDoubleActionForColumn: (NSInteger)columnIndex;
 - (void) _selectColumn: (NSInteger)columnIndex  
-	     modifiers: (unsigned int)modifiers;
+             modifiers: (NSUInteger)modifiers;
 @end
 
 /* 
@@ -357,13 +357,12 @@ typedef enum _NSTableViewColumnAutoresizingStyle
  * Returns the number of records that the data source manages for <em>aTableView</em>.
  */
 - (NSInteger) numberOfRowsInTableView: (NSTableView *)aTableView;
-- (id) tableView: (NSTableView *)aTableView 
-objectValueForTableColumn: (NSTableColumn *)aTableColumn 
-	     row: (NSInteger)rowIndex;
+- (id) tableView: (NSTableView *)aTableView objectValueForTableColumn: (NSTableColumn *)aTableColumn 
+             row: (NSInteger)rowIndex;
 - (void) tableView: (NSTableView *)aTableView 
     setObjectValue: (id)anObject 
     forTableColumn: (NSTableColumn *)aTableColumn
-	       row: (NSInteger)rowIndex;
+               row: (NSInteger)rowIndex;
 
 /* Dragging */
 - (BOOL) tableView: (NSTableView*)tableView
@@ -373,7 +372,7 @@ objectValueForTableColumn: (NSTableColumn *)aTableColumn
 - (NSDragOperation) tableView: (NSTableView*)tableView
                  validateDrop: (id <NSDraggingInfo>)info
                   proposedRow: (NSInteger)row
-	proposedDropOperation: (NSTableViewDropOperation)operation;
+        proposedDropOperation: (NSTableViewDropOperation)operation;
 - (BOOL) tableView: (NSTableView*)tableView
          writeRows: (NSArray*)rows
       toPasteboard: (NSPasteboard*)pboard;
@@ -384,12 +383,9 @@ objectValueForTableColumn: (NSTableColumn *)aTableColumn
 #endif
 
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)
-- (BOOL) tableView: (NSTableView*)tableView
-writeRowsWithIndexes: (NSIndexSet*)rows
+- (BOOL) tableView: (NSTableView*)tableView writeRowsWithIndexes: (NSIndexSet*)rows
       toPasteboard: (NSPasteboard*)pboard;
-- (NSArray *) tableView: (NSTableView *)aTableView
-namesOfPromisedFilesDroppedAtDestination: (NSURL *)dropDestination
-forDraggedRowsWithIndexes: (NSIndexSet *)indexSet;
+- (NSArray *) tableView: (NSTableView *)aTableView namesOfPromisedFilesDroppedAtDestination: (NSURL *)dropDestination forDraggedRowsWithIndexes: (NSIndexSet *)indexSet;
 #endif
 @end
 
@@ -406,36 +402,27 @@ APPKIT_EXPORT NSString *NSTableViewSelectionIsChangingNotification;
 
 - (BOOL) selectionShouldChangeInTableView: (NSTableView *)aTableView;
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_3, GS_API_LATEST)
-- (void) tableView: (NSTableView*)tableView
-didClickTableColumn: (NSTableColumn *)tableColumn;
-- (void) tableView: (NSTableView*)tableView
-didDragTableColumn: (NSTableColumn *)tableColumn;
-- (void) tableView: (NSTableView*)tableView
-mouseDownInHeaderOfTableColumn: (NSTableColumn *)tableColumn;
+- (void) tableView: (NSTableView*)tableView didClickTableColumn: (NSTableColumn *)tableColumn;
+- (void) tableView: (NSTableView*)tableView didDragTableColumn: (NSTableColumn *)tableColumn;
+- (void) tableView: (NSTableView*)tableView mouseDownInHeaderOfTableColumn: (NSTableColumn *)tableColumn;
 #endif
-- (BOOL)tableView: (NSTableView *)aTableView 
-shouldEditTableColumn: (NSTableColumn *)aTableColumn 
-	      row: (NSInteger)rowIndex;
-- (BOOL) tableView: (NSTableView *)aTableView 
-   shouldSelectRow: (NSInteger)rowIndex;
-- (BOOL) tableView: (NSTableView *)aTableView 
-shouldSelectTableColumn: (NSTableColumn *)aTableColumn;
-- (void) tableView: (NSTableView *)aTableView 
-   willDisplayCell: (id)aCell 
-    forTableColumn: (NSTableColumn *)aTableColumn
-	       row: (NSInteger)rowIndex;
+- (BOOL)tableView: (NSTableView *)aTableView shouldEditTableColumn: (NSTableColumn *)aTableColumn 
+              row: (NSInteger)rowIndex;
+- (BOOL) tableView: (NSTableView *)aTableView shouldSelectRow: (NSInteger)rowIndex;
+- (BOOL) tableView: (NSTableView *)aTableView shouldSelectTableColumn: (NSTableColumn *)aTableColumn;
+- (void) tableView: (NSTableView *)aTableView willDisplayCell: (id)aCell forTableColumn: (NSTableColumn *)aTableColumn
+               row: (NSInteger)rowIndex;
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_5, GS_API_LATEST)
-- (NSCell *) tableView: (NSTableView *)aTableView 
-dataCellForTableColumn: (NSTableColumn *)aTableColumn
-		   row: (NSInteger)rowIndex;
+- (NSCell *) tableView: (NSTableView *)aTableView dataCellForTableColumn: (NSTableColumn *)aTableColumn
+                   row: (NSInteger)rowIndex;
 #endif
 - (void) tableViewColumnDidMove: (NSNotification *)aNotification;
 - (void) tableViewColumnDidResize: (NSNotification *)aNotification;
 - (void) tableViewSelectionDidChange: (NSNotification *)aNotification;
 - (void) tableViewSelectionIsChanging: (NSNotification *)aNotification;
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_4, GS_API_LATEST)
-- (CGFloat) tableView: (NSTableView *)tableView
-          heightOfRow: (NSInteger)row;
+- (CGFloat) tableView: (NSTableView *)tableView heightOfRow: (NSInteger)row;
+
 - (NSString *) tableView: (NSTableView *)tableView
           toolTipForCell: (NSCell *)cell
                     rect: (NSRect *)rect
diff --git a/Headers/AppKit/NSTextAttachment.h b/Headers/AppKit/NSTextAttachment.h
index fad38d2..f03ee23 100644
--- a/Headers/AppKit/NSTextAttachment.h
+++ b/Headers/AppKit/NSTextAttachment.h
@@ -69,17 +69,18 @@ enum {
    functionality.
  */
 @protocol NSTextAttachmentCell <NSObject>
+
 - (void)drawWithFrame:(NSRect)cellFrame inView:(NSView *)controlView;
 - (void)drawWithFrame:(NSRect)cellFrame 
-	       inView:(NSView *)controlView 
-       characterIndex:(unsigned)charIndex;
+               inView:(NSView *)controlView 
+       characterIndex:(NSUInteger)charIndex;
 - (void)drawWithFrame:(NSRect)cellFrame 
-	       inView:(NSView *)controlView 
-       characterIndex:(unsigned)charIndex
-	layoutManager:(NSLayoutManager *)layoutManager;
+               inView:(NSView *)controlView 
+       characterIndex:(NSUInteger)charIndex
+        layoutManager:(NSLayoutManager *)layoutManager;
 - (void)highlight:(BOOL)flag 
-	withFrame:(NSRect)cellFrame 
-	   inView:(NSView *)controlView;
+        withFrame:(NSRect)cellFrame 
+           inView:(NSView *)controlView;
 
 
 /** The old way of placing the cell. The text system will never call
@@ -115,27 +116,30 @@ returned rectangle to prevent the typesetting process from getting stuck.
 The class uses -cellSize and -cellBaselineOffset to return a rect.
 */
 -(NSRect) cellFrameForTextContainer: (NSTextContainer *)textContainer
-	       proposedLineFragment: (NSRect)lineFrag
-		      glyphPosition: (NSPoint)position
-		     characterIndex: (unsigned int)charIndex;
+               proposedLineFragment: (NSRect)lineFrag
+                      glyphPosition: (NSPoint)position
+                     characterIndex: (NSUInteger)charIndex;
 
 
 - (BOOL)wantsToTrackMouse;
 - (BOOL)wantsToTrackMouseForEvent:(NSEvent *)theEvent 
-			   inRect:(NSRect)cellFrame 
-			   ofView:(NSView *)controlView
-		 atCharacterIndex:(unsigned)charIndex;
+                           inRect:(NSRect)cellFrame 
+                           ofView:(NSView *)controlView
+                 atCharacterIndex:(NSUInteger)charIndex;
+
 - (BOOL)trackMouse:(NSEvent *)theEvent 
-	    inRect:(NSRect)cellFrame 
-	    ofView:(NSView *)controlView 
+            inRect:(NSRect)cellFrame 
+            ofView:(NSView *)controlView 
       untilMouseUp:(BOOL)flag;
 - (BOOL)trackMouse:(NSEvent *)theEvent 
-	    inRect:(NSRect)cellFrame 
-	    ofView:(NSView *)controlView
-  atCharacterIndex:(unsigned)charIndex 
+            inRect:(NSRect)cellFrame 
+            ofView:(NSView *)controlView
+  atCharacterIndex:(NSUInteger)charIndex 
       untilMouseUp:(BOOL)flag;
+
 - (void)setAttachment:(NSTextAttachment *)anObject;
 - (NSTextAttachment *)attachment;
+
 @end
 
 
diff --git a/Headers/AppKit/NSTextFieldCell.h b/Headers/AppKit/NSTextFieldCell.h
index 8ce36a0..39e20ab 100644
--- a/Headers/AppKit/NSTextFieldCell.h
+++ b/Headers/AppKit/NSTextFieldCell.h
@@ -36,11 +36,11 @@
 @class NSColor;
 
 #if OS_API_VERSION(MAC_OS_X_VERSION_10_2, GS_API_LATEST)
-typedef enum _NSTextFieldBezelStyle
-{
-	NSTextFieldSquareBezel = 0,
-	NSTextFieldRoundedBezel
-} NSTextFieldBezelStyle;
+enum {
+    NSTextFieldSquareBezel = 0,
+    NSTextFieldRoundedBezel
+};
+typedef NSUInteger NSTextFieldBezelStyle;
 #endif 
 
 @interface NSTextFieldCell : NSActionCell <NSCoding>
diff --git a/Headers/AppKit/NSTextStorage.h b/Headers/AppKit/NSTextStorage.h
index 64ae61d..a42e18b 100644
--- a/Headers/AppKit/NSTextStorage.h
+++ b/Headers/AppKit/NSTextStorage.h
@@ -63,12 +63,12 @@ enum
  */
 @interface NSTextStorage : NSMutableAttributedString
 {
-  NSRange		_editedRange;
-  int			_editedDelta;
-  NSMutableArray	*_layoutManagers;
-  id			_delegate;
-  unsigned		_editedMask;
-  unsigned		_editCount;
+    NSRange		_editedRange;
+    NSInteger			_editedDelta;
+    NSMutableArray	*_layoutManagers;
+    id			_delegate;
+    NSUInteger		_editedMask;
+    NSUInteger		_editCount;
 }
 
 - (void) addLayoutManager: (GSLayoutManager*)obj;
@@ -97,7 +97,7 @@ enum
  *
  * the changeInLength is, well, positive if you added characters, negative
  * if you removed characters.  */
-- (void) edited: (unsigned)mask range: (NSRange)old changeInLength: (int)delta;
+- (void) edited: (NSUInteger)mask range: (NSRange)old changeInLength: (NSInteger)delta;
 
 /*
  * This method is called to process the editing once it's finished.
@@ -137,9 +137,9 @@ enum
  * The delegate can use the following methods when it receives a
  * notification that a change was made.  The methods tell him what
  * kind of change was made.  */
-- (unsigned) editedMask;
+- (NSUInteger) editedMask;
 - (NSRange) editedRange;
-- (int) changeInLength;
+- (NSInteger) changeInLength;
 
 - (void) setDelegate: (id)delegate;
 - (id) delegate;
@@ -161,6 +161,7 @@ enum
  * copy the object returned by this method rather than simply retaining it.
  */
 - (NSString*) string;
+
 @end
 
 
diff --git a/Headers/AppKit/NSView.h b/Headers/AppKit/NSView.h
index b9dc998..fb6c9a9 100644
--- a/Headers/AppKit/NSView.h
+++ b/Headers/AppKit/NSView.h
@@ -106,14 +106,10 @@ typedef enum _NSFocusRingType {
   id _matrixFromWindow;
 
   NSView* _super_view;
-PACKAGE_SCOPE
   NSMutableArray *_sub_views;
-@protected
   NSWindow *_window;
-PACKAGE_SCOPE
   NSMutableArray *_tracking_rects;
   NSMutableArray *_cursor_rects;
-@protected
   NSRect _invalidRect;
   NSRect _visibleRect;
   NSInteger _gstate;
@@ -531,8 +527,8 @@ PACKAGE_SCOPE
                       right: (CGFloat)oldRight
                       limit: (CGFloat)rightLimit;
 - (CGFloat) heightAdjustLimit;
-- (BOOL) knowsPagesFirst: (int*)firstPageNum
-                    last: (int*)lastPageNum;
+- (BOOL) knowsPagesFirst: (NSInteger*)firstPageNum
+                    last: (NSInteger*)lastPageNum;
 #if OS_API_VERSION(GS_API_MACOSX, GS_API_LATEST)
 - (BOOL) knowsPageRange: (NSRange*)range;
 #endif
@@ -544,7 +540,7 @@ PACKAGE_SCOPE
  * Writing Conforming PostScript
  */
 - (void) addToPageSetup;
-- (void) beginPage: (int)ordinalNum
+- (void) beginPage: (NSInteger)ordinalNum
 	     label: (NSString*)aString
 	      bBox: (NSRect)pageRect
 	     fonts: (NSString*)fontNames;
@@ -555,7 +551,7 @@ PACKAGE_SCOPE
 		 createdBy: (NSString*)anApplication
 		     fonts: (NSString*)fontNames
 		   forWhom: (NSString*)user
-		     pages: (int)numPages
+		     pages: (NSInteger)numPages
 		     title: (NSString*)aTitle;
 - (void) beginSetup;
 - (void) beginTrailer;
@@ -604,6 +600,8 @@ PACKAGE_SCOPE
 
 - (void) _setIgnoresBacking: (BOOL) flag;
 - (BOOL) _ignoresBacking;
+- (NSMutableArray *) _trackingRects;
+- (NSMutableArray *) _cursorRects;
 
 @end
 #endif
diff --git a/Headers/AppKit/NSWindow.h b/Headers/AppKit/NSWindow.h
index 5f9cb1e..f400c14 100644
--- a/Headers/AppKit/NSWindow.h
+++ b/Headers/AppKit/NSWindow.h
@@ -173,9 +173,7 @@ APPKIT_EXPORT NSSize NSTokenSize;
   id            _firstResponder;
   id            _futureFirstResponder;
   NSView        *_initialFirstResponder;
-PACKAGE_SCOPE
   id            _delegate;
-@protected
   id            _fieldEditor;
   id            _lastLeftMouseDownView;
   id            _lastRightMouseDownView;
diff --git a/Model/GMAppKit.m b/Model/GMAppKit.m
index 978c88f..3dd0c30 100644
--- a/Model/GMAppKit.m
+++ b/Model/GMAppKit.m
@@ -1222,7 +1222,7 @@ extern id _nibOwner;
 
 #ifdef GNU_GUI_LIBRARY
   _rFlags.flipped_view = [self isFlipped];
-  if ([_sub_views count])
+  if ([[self subviews] count])
     _rFlags.has_subviews = 1;
 #endif
 
diff --git a/Model/IMConnectors.m b/Model/IMConnectors.m
index 9c50fb3..fcc8667 100644
--- a/Model/IMConnectors.m
+++ b/Model/IMConnectors.m
@@ -77,8 +77,8 @@
   else
     {
       const char	*type;
-      unsigned int	size;
-      int		offset;
+      size_t    	size;
+      ptrdiff_t		offset;
 
       /*
        * Use the GNUstep additional function to set the instance
@@ -101,8 +101,8 @@
   else
     {
       const char	*type;
-      unsigned int	size;
-      int		offset;
+      size_t		size;
+      ptrdiff_t		offset;
 
       /*
        * Use the GNUstep additional function to set the instance
@@ -159,8 +159,8 @@
     {
       const char	*nam = [label cString];
       const char	*type;
-      unsigned int	size;
-      int		offset;
+      size_t		size;
+      ptrdiff_t		offset;
 
       /*
        * Use the GNUstep additional function to set the instance
diff --git a/Source/Functions.m b/Source/Functions.m
index f1d8c81..6ee0804 100644
--- a/Source/Functions.m
+++ b/Source/Functions.m
@@ -35,6 +35,7 @@
 #import "GSGuiPrivate.h"
 #import "AppKit/NSApplication.h"
 #import "AppKit/NSBitmapImageRep.h"
+#import "AppKit/NSDataLinkManager.h"
 #import "AppKit/NSNibLoading.h"
 #import "AppKit/NSEvent.h"
 #import "AppKit/NSGraphicsContext.h"
@@ -296,7 +297,7 @@ NSColor* NSReadPixel(NSPoint location)
   return nil;
 }
 
-void NSCopyBitmapFromGState(int srcGstate, NSRect srcRect, NSRect destRect)
+void NSCopyBitmapFromGState(NSInteger srcGstate, NSRect srcRect, NSRect destRect)
 {
   NSLog(@"NSCopyBitmapFromGState not implemented");
 }
@@ -1032,7 +1033,7 @@ void NSSetFocusRingStyle(NSFocusRingPlacement placement)
 }
 
 void 
-NSConvertGlobalToWindowNumber(int globalNum, unsigned int *winNum)
+NSConvertGlobalToWindowNumber(NSInteger globalNum, NSInteger *winNum)
 {
   NSArray *windows = GSAllWindows();
   NSUInteger count = [windows count];
@@ -1042,7 +1043,7 @@ NSConvertGlobalToWindowNumber(int globalNum, unsigned int *winNum)
     {
       NSWindow *win = [windows objectAtIndex: i];
 
-      if (((int)(intptr_t)[win windowRef]) == globalNum)
+      if (((NSInteger)(intptr_t)[win windowRef]) == globalNum)
         {
           *winNum = [win windowNumber];
           return;
@@ -1052,9 +1053,9 @@ NSConvertGlobalToWindowNumber(int globalNum, unsigned int *winNum)
 }
 
 void 
-NSConvertWindowNumberToGlobal(int winNum, unsigned int *globalNum)
+NSConvertWindowNumberToGlobal(NSInteger winNum, NSInteger *globalNum)
 {
-  *globalNum = (int)(intptr_t)[GSWindowWithNumber(winNum) windowRef];
+  *globalNum = (NSInteger)(intptr_t)[GSWindowWithNumber(winNum) windowRef];
 }
 
 void 
@@ -1071,14 +1072,14 @@ NSShowSystemInfoPanel(NSDictionary *options)
 }
 
 void 
-NSWindowListForContext(NSInteger context, NSInteger size, NSInteger **list)
+NSWindowListForContext(NSInteger context, NSInteger size, NSInteger list[])
 {
 // TODO
 }
 
 int 
-NSGetWindowServerMemory(int context, int *virtualMemory, 
-			int *windowBackingMemory, NSString **windowDumpStream)
+NSGetWindowServerMemory(NSInteger context, NSInteger *virtualMemory, 
+			NSInteger *windowBackingMemory, NSString **windowDumpStream)
 {
 // TODO
   return -1;
diff --git a/Source/GSAnimator.m b/Source/GSAnimator.m
index 437effb..a72ea07 100644
--- a/Source/GSAnimator.m
+++ b/Source/GSAnimator.m
@@ -230,7 +230,7 @@ static int _GSTimerBasedAnimator_animator_count = 0;
 
   if (newTimer != nil)
     {
-      unsigned i,c;
+      NSUInteger i,c;
 
       for (i = 0, c = [_runLoopModes count]; i < c; i++)
         {
@@ -238,7 +238,7 @@ static int _GSTimerBasedAnimator_animator_count = 0;
               addTimer: newTimer
               forMode: [_runLoopModes objectAtIndex:i]];
         }
-      NSDebugMLLog(@"GSAnimator",@"addTimer in %d mode(s)", c);
+      NSDebugMLLog(@"GSAnimator",@"addTimer in %lu mode(s)", (unsigned long)c);
     }
 }
 
diff --git a/Source/GSCharacterPanel.m b/Source/GSCharacterPanel.m
index 45d4f44..405f954 100644
--- a/Source/GSCharacterPanel.m
+++ b/Source/GSCharacterPanel.m
@@ -273,7 +273,7 @@ static NSIndexSet *CodepointsWithNameContainingSubstring(NSString *str)
 {
   if (row >= 0 && row < [visibleCodepoints count])
     {
-      UChar32 utf32 = [self codepointAtVisibleRow: row];
+      UChar32 utf32 = (UChar32)[self codepointAtVisibleRow: row];
       UChar utf16buf[2];
       int32_t utf16bufLength = 0;
       UErrorCode error = U_ZERO_ERROR;
@@ -308,7 +308,7 @@ static NSIndexSet *CodepointsWithNameContainingSubstring(NSString *str)
 
 - (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row
 {
-  UChar32 utf32 = [self codepointAtVisibleRow: row];
+  UChar32 utf32 = (UChar32)[self codepointAtVisibleRow: row];
   
   if ([[tableColumn identifier] isEqualToString: @"char"])
     {
diff --git a/Source/GSDisplayServer.m b/Source/GSDisplayServer.m
index 98b8c6c..e3097ed 100644
--- a/Source/GSDisplayServer.m
+++ b/Source/GSDisplayServer.m
@@ -72,7 +72,7 @@ static NSString *NSCurrentServerThreadKey;
 GSDisplayServer *
 GSServerForWindow(NSWindow *window)
 {
-  int num;
+  NSInteger num;
 
   if (windowmaps == NULL)
     {
@@ -331,7 +331,7 @@ GSCurrentServer(void)
   NSCountedSet	*old = (NSCountedSet*)NSMapGet(drag_types, (void*)win);
   NSEnumerator *drag_enum = [types objectEnumerator];
   id            type;
-  unsigned	originalCount;
+  NSUInteger	originalCount;
 
   /*
    * Make sure the set exists.
@@ -379,7 +379,7 @@ GSCurrentServer(void)
     }
   else
     {
-      unsigned	originalCount = [old count];
+      NSUInteger	originalCount = [old count];
       id o;
 
       while ((o = [drag_enum nextObject]))
@@ -410,14 +410,14 @@ GSCurrentServer(void)
   return [GSSlideView _slideImage: image from: from to: to];
 }
 
-- (void) restrictWindow: (int)win toImage: (NSImage*)image
+- (void) restrictWindow: (NSInteger)win toImage: (NSImage*)image
 {
   [self subclassResponsibility: _cmd];
 }
 
-- (int) findWindowAt: (NSPoint)screenLocation 
-           windowRef: (int*)windowRef 
-           excluding: (int)win
+- (NSInteger) findWindowAt: (NSPoint)screenLocation 
+           windowRef: (NSInteger*)windowRef 
+           excluding: (NSInteger)win
 {
   [self subclassResponsibility: _cmd];
   return 0;
@@ -426,7 +426,7 @@ GSCurrentServer(void)
 /* Screen information */
 /** Returns the resolution, in points, for the indicated screen of the
     display. */
-- (NSSize) resolutionForScreen: (int)screen
+- (NSSize) resolutionForScreen: (NSInteger)screen
 {
   /*[self subclassResponsibility: _cmd];*/
   return NSMakeSize(72, 72);
@@ -434,14 +434,14 @@ GSCurrentServer(void)
 
 /** Returns the bounds, in pixels, for the indicated screen of the
     display. */
-- (NSRect) boundsForScreen: (int)screen
+- (NSRect) boundsForScreen: (NSInteger)screen
 {
   [self subclassResponsibility: _cmd];
   return NSZeroRect;
 }
 
 /** Returns the default depth of windows that are created on screen. */
-- (NSWindowDepth) windowDepthForScreen: (int)screen
+- (NSWindowDepth) windowDepthForScreen: (NSInteger)screen
 {
   [self subclassResponsibility: _cmd];
   return 0;
@@ -449,7 +449,7 @@ GSCurrentServer(void)
 
 /** Returns a null terminated list of possible window depths for
     screen. */
-- (const NSWindowDepth *) availableDepthsForScreen: (int)screen
+- (const NSWindowDepth *) availableDepthsForScreen: (NSInteger)screen
 {
   [self subclassResponsibility: _cmd];
   return NULL;
@@ -479,7 +479,7 @@ GSCurrentServer(void)
    Returns a display dependant pointer that describes the internal
    window representation for win. On X-Windows, for example, this is a
    pointer to the <code>Window</code> variable. */
-- (void *) windowDevice: (int)win
+- (void *) windowDevice: (NSInteger)win
 {
   [self subclassResponsibility: _cmd];
   return NULL;
@@ -511,7 +511,7 @@ GSCurrentServer(void)
  * Returns a screenshot of the specified rectangle of the specified screen.
  * The mouse cursor should be ommitted from the returned image.
  */
-- (NSImage *) contentsOfScreen: (int)screen inRect: (NSRect)rect
+- (NSImage *) contentsOfScreen: (NSInteger)screen inRect: (NSRect)rect
 {
   return nil;
 }
@@ -527,7 +527,7 @@ GSCurrentServer(void)
     win. Concrete subclasses must call this function when creating a
     window. Do not call this method in any other case, particularly
     for a window that has already been created */
-- (void) _setWindowOwnedByServer: (int)win
+- (void) _setWindowOwnedByServer: (NSInteger)win
 {
   if (windowmaps != NULL)
     {
@@ -547,7 +547,7 @@ GSCurrentServer(void)
     Use -styleoffsets::::: to determine the extent of the decorations
     and determine the size of the drawable area inside them.
 */
-- (int) window: (NSRect)frame : (NSBackingStoreType)type : (unsigned int)style
+- (NSInteger) window: (NSRect)frame : (NSBackingStoreType)type : (NSUInteger)style
 {
   int sn = [[server_info objectForKey: GSScreenNumber] intValue];
 
@@ -556,8 +556,8 @@ GSCurrentServer(void)
 
 /** Like -window::: only there is an additional argument to specify which
     screen the window will display on */
-- (int) window: (NSRect)frame : (NSBackingStoreType)type : (unsigned int)style
-	      : (int)screen
+- (NSInteger) window: (NSRect)frame : (NSBackingStoreType)type : (NSUInteger)style
+                    : (NSInteger)screen
 {
   [self subclassResponsibility: _cmd];
   return 0;
@@ -565,18 +565,18 @@ GSCurrentServer(void)
 
 /** Destroys the representation of the window and frees and memory
     associated with it. */
-- (void) termwindow: (int) win
+- (void) termwindow: (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Create all the backend structures for a reference to a native window and 
     return the extend, backing type, style and screen for that window. */ 
-- (int) nativeWindow: (void *)winref
-		    : (NSRect*)frame
-		    : (NSBackingStoreType*)type 
-		    : (unsigned int*)style
-		    : (int*)screen
+- (NSInteger) nativeWindow: (void *)winref
+                          : (NSRect*)frame
+                          : (NSBackingStoreType*)type 
+                          : (NSUInteger*)style
+                          : (NSInteger*)screen
 {
   [self subclassResponsibility: _cmd];
   return 0;
@@ -584,25 +584,25 @@ GSCurrentServer(void)
 
 /** Sets the style of the window. See [NSWindow-styleMask] for a
     description of the available styles */
-- (void) stylewindow: (unsigned int) style : (int) win
+- (void) stylewindow: (NSUInteger) style : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Changes window's the backing store to type */
-- (void) windowbacking: (NSBackingStoreType)type : (int) win
+- (void) windowbacking: (NSBackingStoreType)type : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Sets the window title */
-- (void) titlewindow: (NSString *) window_title : (int) win
+- (void) titlewindow: (NSString *) window_title : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Miniaturizes the window */
-- (void) miniwindow: (int) win
+- (void) miniwindow: (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
@@ -621,7 +621,7 @@ GSCurrentServer(void)
     typically by calling [NSGraphicsContext-GSSetDevice:::],
     although depending on the concrete implmentation, more information
     than this may need to be exchanged. */
-- (void) windowdevice: (int)winNum
+- (void) windowdevice: (NSInteger)winNum
 {
   [self setWindowdevice: winNum forContext: GSCurrentContext()];
 }
@@ -630,7 +630,7 @@ GSCurrentServer(void)
     typically by calling [NSGraphicsContext-GSSetDevice:::],
     although depending on the concrete implmentation, more information
     than this may need to be exchanged. */
-- (void) setWindowdevice: (int)win forContext: (NSGraphicsContext *)ctxt
+- (void) setWindowdevice: (NSInteger)win forContext: (NSGraphicsContext *)ctxt
 {
   [self subclassResponsibility: _cmd];
 }
@@ -675,7 +675,7 @@ GSCurrentServer(void)
  *   </desc>
  * </deflist>
  */
-- (void) orderwindow: (int) op : (int) otherWin : (int) win
+- (void) orderwindow: (NSInteger) op : (NSInteger) otherWin : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
@@ -685,7 +685,7 @@ GSCurrentServer(void)
  * The position is expressed as an offset from the bottom left
  * corner of the screen.
  */ 
-- (void) movewindow: (NSPoint)loc : (int) win
+- (void) movewindow: (NSPoint)loc : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
@@ -695,7 +695,7 @@ GSCurrentServer(void)
  * any border/decorations.  Its position is expressed as an offset from
  * the bottom left corner of the screen.
  */
-- (void) placewindow: (NSRect)frame : (int) win
+- (void) placewindow: (NSRect)frame : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
@@ -705,7 +705,7 @@ GSCurrentServer(void)
  * any border/decorations.  Its position is expressed as an offset from
  * the bottom left corner of the screen.
  */
-- (NSRect) windowbounds: (int) win
+- (NSRect) windowbounds: (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
   return NSZeroRect;
@@ -717,13 +717,13 @@ GSCurrentServer(void)
  * -orderwindow::: method in the case where the position is 'above' or
  * 'below' and the other window number is zero.
  */
-- (void) setwindowlevel: (int) level : (int) win
+- (void) setwindowlevel: (NSInteger) level : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Returns the window level as in [NSWindow -level] */
-- (int) windowlevel: (int) win
+- (NSInteger) windowlevel: (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
   return 0;
@@ -738,7 +738,7 @@ GSCurrentServer(void)
 - (NSArray *) windowlist
 {
   NSMutableArray *list = [NSMutableArray arrayWithArray:[NSApp windows]];
-  int c = [list count];
+  NSInteger c = [list count];
 
   while (c-- > 0)
     {
@@ -751,26 +751,26 @@ GSCurrentServer(void)
 }
 
 /** Returns the depth of the window */
-- (int) windowdepth: (int) win
+- (NSInteger) windowdepth: (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
   return 0;
 }
 
 /** Set the maximum size (pixels) of the window */
-- (void) setmaxsize: (NSSize)size : (int) win
+- (void) setmaxsize: (NSSize)size : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Set the minimum size (pixels) of the window */
-- (void) setminsize: (NSSize)size : (int) win
+- (void) setminsize: (NSSize)size : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Set the resize incremenet of the window */
-- (void) setresizeincrements: (NSSize)size : (int) win
+- (void) setresizeincrements: (NSSize)size : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
@@ -778,7 +778,7 @@ GSCurrentServer(void)
 /** Causes buffered graphics to be flushed to the screen.
  * The value of rect is expressed in OpenStep window coordinates.
  */
-- (void) flushwindowrect: (NSRect)rect : (int) win
+- (void) flushwindowrect: (NSRect)rect : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
@@ -791,14 +791,14 @@ GSCurrentServer(void)
  * are no decorations outside the drawable window frame and this method
  * shouldn't be called.
  * */
-- (void) styleoffsets: (float*) l : (float*) r : (float*) t : (float*) b 
-		     : (unsigned int) style
+- (void) styleoffsets: (CGFloat*) l : (CGFloat*) r : (CGFloat*) t : (CGFloat*) b 
+                     : (NSUInteger) style
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Sets the document edited flag for the window */
-- (void) docedited: (int) edited : (int) win
+- (void) docedited: (NSInteger) edited : (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
@@ -806,26 +806,26 @@ GSCurrentServer(void)
 /** Sets the input state for the window given by the
     GSWindowInputState constant.  Instructs the window manager that the
     specified window is 'key', 'main', or just a normal window.  */
-- (void) setinputstate: (int)state : (int)win
+- (void) setinputstate: (NSInteger)state : (NSInteger)win
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Forces focus to the window so that all key events are sent to this
     window */
-- (void) setinputfocus: (int) win
+- (void) setinputfocus: (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
 }
 
 /** Sets the transparancy value for the whole window */
-- (void) setalpha: (float)alpha : (int) win
+- (void) setalpha: (CGFloat)alpha : (NSInteger) win
 {
   //[self subclassResponsibility: _cmd];
 }
 
 /** Sets the window shadow */
-- (void) setShadow: (BOOL)hasShadow : (int)win
+- (void) setShadow: (BOOL)hasShadow : (NSInteger)win
 {
   //[self subclassResponsibility: _cmd];
 }
@@ -850,7 +850,7 @@ GSCurrentServer(void)
  * The location is expressed as an offset from the bottom left corner
  * of the screen.
  */
-- (NSPoint) mouseLocationOnScreen: (int)aScreen window: (int *)win
+- (NSPoint) mouseLocationOnScreen: (NSInteger)aScreen window: (NSInteger *)win
 {
   [self subclassResponsibility: _cmd];
   return NSZeroPoint;
@@ -860,7 +860,7 @@ GSCurrentServer(void)
     directed only to the window win. If successful, the return value
     is YES and this message must be balanced by a -releasemouse
     message.  */
-- (BOOL) capturemouse: (int) win
+- (BOOL) capturemouse: (NSInteger) win
 {
   [self subclassResponsibility: _cmd];
   return NO;
@@ -873,7 +873,7 @@ GSCurrentServer(void)
 }
 
 /** Set mouse cursor position. */
-- (void) setMouseLocation: (NSPoint)mouseLocation onScreen: (int)aScreen
+- (void) setMouseLocation: (NSPoint)mouseLocation onScreen: (NSInteger)aScreen
 {
   [self subclassResponsibility: _cmd];
 }
@@ -894,7 +894,7 @@ GSCurrentServer(void)
     pointer to the internal device representation that can be used
     later to make this cursor the current one
 */
-- (void) standardcursor: (int) style : (void**) cid
+- (void) standardcursor: (NSInteger) style : (void**) cid
 {
   [self subclassResponsibility: _cmd];
 }
@@ -938,8 +938,8 @@ GSCurrentServer(void)
   [self subclassResponsibility: _cmd];
 }
 
-- (void) setParentWindow: (int)parentWin 
-          forChildWindow: (int)childWin
+- (void) setParentWindow: (NSInteger)parentWin 
+          forChildWindow: (NSInteger)childWin
 {
   [self subclassResponsibility: _cmd];
 }
@@ -960,19 +960,19 @@ GSCurrentServer(void)
  * If no matching event is found and the limit date is reached, this method
  * returns nil.
  */
-- (NSEvent*) getEventMatchingMask: (unsigned)mask
-		       beforeDate: (NSDate*)limit
-			   inMode: (NSString*)mode
-			  dequeue: (BOOL)flag
+- (NSEvent*) getEventMatchingMask: (NSUInteger)mask
+                       beforeDate: (NSDate*)limit
+                           inMode: (NSString*)mode
+                          dequeue: (BOOL)flag
 {
-  unsigned	pos = 0;	/* Position in queue scanned so far	*/
+  NSUInteger	pos = 0;	/* Position in queue scanned so far	*/
   NSRunLoop	*loop = nil;
 
   do
     {
-      unsigned	count = [event_queue count];
+      NSUInteger	count = [event_queue count];
       NSEvent	*event;
-      unsigned	i = 0;
+      NSUInteger	i = 0;
 
       if (count == 0)
 	{
@@ -994,7 +994,7 @@ GSCurrentServer(void)
 	   */
 	  if (count > pos)
 	    {
-	      unsigned	end = count - pos;
+	      NSUInteger	end = count - pos;
 	      NSRange	r = NSMakeRange(pos, end);
 	      NSEvent	*events[end];
 
@@ -1047,10 +1047,10 @@ GSCurrentServer(void)
  * is earlier than that of limit wand which match the supplied mask
  * of event types.
  */
-- (void) discardEventsMatchingMask: (unsigned)mask
-		       beforeEvent: (NSEvent*)limit
+- (void) discardEventsMatchingMask: (NSUInteger)mask
+                       beforeEvent: (NSEvent*)limit
 {
-  unsigned		index = [event_queue count];
+  NSUInteger		index = [event_queue count];
 
   /*
    *	If there is a range to use - remove all the matching events in it
diff --git a/Source/GSDragView.m b/Source/GSDragView.m
index a26d742..61cd4e2 100644
--- a/Source/GSDragView.m
+++ b/Source/GSDragView.m
@@ -347,7 +347,7 @@ static	GSDragView *sharedDragView = nil;
                     action: (NSDragOperation)action
                   position: (NSPoint)eventLocation
                  timestamp: (NSTimeInterval)time
-                  toWindow: (int)dWindowNumber
+                  toWindow: (NSInteger)dWindowNumber
 {
 }
 
@@ -357,7 +357,7 @@ static	GSDragView *sharedDragView = nil;
   set, if there is a native window, but no GNUstep window at this location.
  */
 - (NSWindow*) windowAcceptingDnDunder: (NSPoint)mouseLocation
-                            windowRef: (int*)mouseWindowRef
+                            windowRef: (NSInteger*)mouseWindowRef
 {
   NSInteger win;
 
@@ -688,7 +688,7 @@ static	GSDragView *sharedDragView = nil;
   [NSEvent stopPeriodicEvents];
   [self _updateAndMoveImageToCorrectPosition];
 
-  NSDebugLLog(@"NSDragging", @"dnd ending %d\n", targetWindowRef);
+  NSDebugLLog(@"NSDragging", @"dnd ending %ld\n", (long)targetWindowRef);
 
   // --- Deposit the drop ----------------------------------------------
   if ((targetWindowRef != 0)
@@ -890,7 +890,7 @@ static	GSDragView *sharedDragView = nil;
   //--- Store old values -----------------------------------------------------
   NSWindow *oldDestWindow = destWindow;
   BOOL oldDestExternal = destExternal;
-  int mouseWindowRef; 
+  NSInteger mouseWindowRef; 
   BOOL changeCursor = NO;
  
   //--- Move drag image to the new position -----------------------------------
@@ -915,8 +915,8 @@ static	GSDragView *sharedDragView = nil;
       dragPoint = [destWindow convertScreenToBase: dragPosition];
     }
             
-  NSDebugLLog(@"NSDragging", @"mouse window %d (%@) at %@\n",
-    mouseWindowRef, destWindow, NSStringFromPoint(dragPosition));
+  NSDebugLLog(@"NSDragging", @"mouse window %ld (%@) at %@\n",
+    (long)mouseWindowRef, destWindow, NSStringFromPoint(dragPosition));
             
   //--- send exit message if necessary -------------------------------------
   if ((mouseWindowRef != targetWindowRef) && targetWindowRef)
diff --git a/Source/GSFontInfo.m b/Source/GSFontInfo.m
index 036e698..a123e94 100644
--- a/Source/GSFontInfo.m
+++ b/Source/GSFontInfo.m
@@ -739,7 +739,7 @@ static GSFontEnumerator *sharedEnumerator = nil;
 }
 
 -(void) appendBezierPathWithGlyphs: (NSGlyph *)glyphs
-			     count: (int)count
+			     count: (NSInteger)count
 		      toBezierPath: (NSBezierPath *)path
 {
   [self subclassResponsibility: _cmd];
diff --git a/Source/GSGormLoading.m b/Source/GSGormLoading.m
index 2ddde58..50620ce 100644
--- a/Source/GSGormLoading.m
+++ b/Source/GSGormLoading.m
@@ -287,7 +287,7 @@ static NSString *GSInternalNibItemAddedNotification = @"_GSInternalNibItemAddedN
        */
       if (visibleWindows != nil)
 	{
-	  unsigned	pos = [visibleWindows count];
+	  NSUInteger	pos = [visibleWindows count];
 	  while (pos-- > 0)
 	    {
 	      NSWindow *win = [visibleWindows objectAtIndex: pos];
@@ -332,7 +332,7 @@ static NSString *GSInternalNibItemAddedNotification = @"_GSInternalNibItemAddedN
 
 - (void) encodeWithCoder: (NSCoder*)aCoder
 {
-  int version = [GSNibContainer version];
+  NSInteger version = [GSNibContainer version];
   if (version == GNUSTEP_NIB_VERSION)
     {
       [aCoder encodeObject: topLevelObjects];
@@ -370,13 +370,13 @@ static NSString *GSInternalNibItemAddedNotification = @"_GSInternalNibItemAddedN
   else
     {
       [NSException raise: NSInternalInconsistencyException
-		   format: @"Unable to write GSNibContainer version #%d.  GSNibContainer version for the installed gui lib is %d.", version, GNUSTEP_NIB_VERSION];
+		   format: @"Unable to write GSNibContainer version #%ld.  GSNibContainer version for the installed gui lib is %d.", (long)version, GNUSTEP_NIB_VERSION];
     }
 }
 
 - (id) initWithCoder: (NSCoder*)aCoder
 {
-  int version = [aCoder versionForClassName: @"GSNibContainer"]; 
+  NSInteger version = [aCoder versionForClassName: @"GSNibContainer"]; 
 
   // save the version to the ivar, we need it later.
   if (version == GNUSTEP_NIB_VERSION)
@@ -451,7 +451,7 @@ static NSString *GSInternalNibItemAddedNotification = @"_GSInternalNibItemAddedN
   else
     {
       [NSException raise: NSInternalInconsistencyException
-		   format: @"Unable to read GSNibContainer version #%d.  GSNibContainer version for the installed gui lib is %d.  Please upgrade to a more recent version of the gui library.", version, GNUSTEP_NIB_VERSION];
+		   format: @"Unable to read GSNibContainer version #%ld.  GSNibContainer version for the installed gui lib is %d.  Please upgrade to a more recent version of the gui library.", (long)version, GNUSTEP_NIB_VERSION];
     }
 
   return self;
@@ -515,7 +515,7 @@ static NSString *GSInternalNibItemAddedNotification = @"_GSInternalNibItemAddedN
 
 - (id) initWithCoder: (NSCoder*)aCoder
 {
-  int version = [aCoder versionForClassName: 
+  NSInteger version = [aCoder versionForClassName: 
 			  NSStringFromClass([self class])];
   id obj = nil;
 
@@ -705,7 +705,7 @@ static NSString *GSInternalNibItemAddedNotification = @"_GSInternalNibItemAddedN
 - (id) initWithCoder: (NSCoder *)coder
 {
   id obj = nil;
-  int version = [coder versionForClassName: @"GSClassSwapper"];
+  NSInteger version = [coder versionForClassName: @"GSClassSwapper"];
   if (version == 0)
     {
       if ((self = [super init]) != nil)
@@ -878,7 +878,7 @@ static NSString *GSInternalNibItemAddedNotification = @"_GSInternalNibItemAddedN
   id obj = [super initWithCoder: coder];
   if (obj != nil)
     {
-      int version = [coder versionForClassName: @"GSWindowTemplate"];
+      NSInteger version = [coder versionForClassName: @"GSWindowTemplate"];
 
       if (version == GSWINDOWT_VERSION)
 	{
@@ -916,7 +916,7 @@ static NSString *GSInternalNibItemAddedNotification = @"_GSInternalNibItemAddedN
 
 - (void) encodeWithCoder: (NSCoder *)coder
 {
-  int version = [[self class] version];
+  NSInteger version = [[self class] version];
 
   [super encodeWithCoder: coder];
 
diff --git a/Source/GSHorizontalTypesetter.m b/Source/GSHorizontalTypesetter.m
index e3ea4ea..8fea4d9 100644
--- a/Source/GSHorizontalTypesetter.m
+++ b/Source/GSHorizontalTypesetter.m
@@ -103,7 +103,7 @@ struct GSHorizontalTypesetter_glyph_cache_s
 {
   /* These fields are filled in by the caching: */
   NSGlyph g;
-  unsigned int char_index;
+  NSUInteger char_index;
 
   NSFont *font;
   struct
@@ -155,13 +155,13 @@ the last time or not, we wouldn't need to clear the cache every time */
     attributes.superscript = 0;
 }
 
--(void) _cacheMoveTo: (unsigned int)glyph
+-(void) _cacheMoveTo: (NSUInteger)glyph
 {
   BOOL valid;
 
   if (cache_base <= glyph && cache_base + cache_length > glyph)
     {
-      int delta = glyph - cache_base;
+      NSInteger delta = glyph - cache_base;
       cache_length -= delta;
       memmove(cache, &cache[delta], sizeof(glyph_cache_t) * cache_length);
       cache_base = glyph;
@@ -176,7 +176,7 @@ the last time or not, we wouldn't need to clear the cache every time */
 
   if (valid)
     {
-      unsigned int i;
+      NSUInteger i;
 
       at_end = NO;
       i = [curLayoutManager characterIndexForGlyphAtIndex: glyph];
@@ -201,7 +201,7 @@ the last time or not, we wouldn't need to clear the cache every time */
     at_end = YES;
 }
 
--(void) _cacheGlyphs: (unsigned int)new_length
+-(void) _cacheGlyphs: (NSUInteger)new_length
 {
   glyph_cache_t *g;
   BOOL valid;
@@ -263,7 +263,7 @@ Should return the first glyph on the next line, which must be <=gi and
 logic below will fall back to char wrapping if necessary). Glyphs up to and
 including gi will have been cached.
 */
--(unsigned int) breakLineByWordWrappingBefore: (unsigned int)gi
+-(NSUInteger) breakLineByWordWrappingBefore: (NSUInteger)gi
 {
   glyph_cache_t *g;
   unichar ch;
@@ -316,7 +316,7 @@ struct GSHorizontalTypesetter_line_frag_s
 {
   NSRect rect;
   CGFloat last_used;
-  unsigned int last_glyph; /* last_glyph+1, actually */
+  NSUInteger last_glyph; /* last_glyph+1, actually */
 };
 typedef struct GSHorizontalTypesetter_line_frag_s line_frag_t;
 
@@ -326,11 +326,11 @@ For bigger values the width gets ignored.
 */
 #define LARGE_SIZE 1e7
 
--(void) fullJustifyLine: (line_frag_t *)lf : (int)num_line_frags
+-(void) fullJustifyLine: (line_frag_t *)lf : (NSInteger)num_line_frags
 {
-  unsigned int i, start;
+  NSUInteger i, start;
   CGFloat extra_space, delta;
-  unsigned int num_spaces;
+  NSUInteger num_spaces;
   NSString *str = [curTextStorage string];
   glyph_cache_t *g;
   unichar ch;
@@ -420,8 +420,8 @@ For bigger values the width gets ignored.
   */
   NSRect r0, r;
   NSSize shift;
-  int i;
-  unsigned int g, g2, first;
+  NSInteger i;
+  NSUInteger g, g2, first;
   CGFloat container_height;
   /*
   Ask the layout manager for soft-invalidated layout for the current
@@ -699,7 +699,7 @@ restart: ;
 
 
   {
-    unsigned int i = 0;
+    NSUInteger i = 0;
     glyph_cache_t *g;
 
     NSPoint p;
@@ -711,9 +711,9 @@ restart: ;
     NSGlyph last_glyph = NSNullGlyph;
     NSPoint last_p;
 
-    unsigned int first_glyph;
+    NSUInteger first_glyph;
     line_frag_t *lf = line_frags;
-    int lfi = 0;
+    NSInteger lfi = 0;
 
     BOOL prev_had_non_nominal_width;
 
@@ -829,7 +829,7 @@ restart: ;
 		*/
 		NSArray *tabs = [curParagraphStyle tabStops];
 		NSTextTab *tab = nil;
-		int i, c = [tabs count];
+		NSUInteger i, c = [tabs count];
 		/* Find first tab beyond our current position. */
 		for (i = 0; i < c; i++)
 		  {
@@ -1200,11 +1200,11 @@ restart: ;
 
 
 -(int) layoutGlyphsInLayoutManager: (GSLayoutManager *)layoutManager
-		   inTextContainer: (NSTextContainer *)textContainer
-	      startingAtGlyphIndex: (unsigned int)glyphIndex
-	  previousLineFragmentRect: (NSRect)previousLineFragRect
-		    nextGlyphIndex: (unsigned int *)nextGlyphIndex
-	     numberOfLineFragments: (unsigned int)howMany
+                   inTextContainer: (NSTextContainer *)textContainer
+              startingAtGlyphIndex: (NSUInteger)glyphIndex
+          previousLineFragmentRect: (NSRect)previousLineFragRect
+                    nextGlyphIndex: (NSUInteger *)nextGlyphIndex
+             numberOfLineFragments: (NSUInteger)howMany
 {
   int ret, real_ret;
   BOOL newParagraph;
@@ -1257,7 +1257,7 @@ NS_DURING
 	    }
 	  else
 	    {
-	      unsigned int chi;
+	      NSUInteger chi;
 	      unichar ch;
 	      chi = [curLayoutManager characterRangeForGlyphRange: NSMakeRange(curGlyph - 1, 1)
 						 actualGlyphRange: NULL].location;
diff --git a/Source/GSIconManager.m b/Source/GSIconManager.m
index 478d2f9..7aaecb5 100644
--- a/Source/GSIconManager.m
+++ b/Source/GSIconManager.m
@@ -31,8 +31,8 @@
 #import "GSIconManager.h"
 
 @protocol GSIconManager
- - (NSRect) setWindow: (unsigned int)aWindowNumber appProcessId: (int)aProcessId;
- - (void) removeWindow: (unsigned int)aWindowNumber;
+ - (NSRect) setWindow: (NSInteger)aWindowNumber appProcessId: (int)aProcessId;
+ - (void) removeWindow: (NSInteger)aWindowNumber;
  - (NSSize) getSizeWindow;
  - (id) retain;
  - (void) release; 
@@ -98,7 +98,7 @@ GSRemoveIcon(NSWindow *window)
 
   if (gsim != nil)
     {
-      unsigned int winNum = 0;
+      NSInteger winNum = 0;
 
       NSConvertWindowNumberToGlobal([window windowNumber], &winNum);
       [gsim removeWindow: winNum];
@@ -122,7 +122,7 @@ GSGetIconFrame(NSWindow *window)
 
   if (gsim != nil)
     {
-      unsigned int winNum = 0;
+      NSInteger winNum = 0;
 
       NSConvertWindowNumberToGlobal([window windowNumber], &winNum);
       iconRect = [gsim setWindow: winNum
diff --git a/Source/GSInfoPanel.m b/Source/GSInfoPanel.m
index 7e79115..58ef63e 100644
--- a/Source/GSInfoPanel.m
+++ b/Source/GSInfoPanel.m
@@ -111,10 +111,10 @@ new_label (NSString *value)
   self = [super init];
   if (self != nil)
     {
-      unsigned int	count;
+      NSUInteger	count;
       NSTextField	*field;
-      float		height = 2;
-      float		width = 0;
+      CGFloat		height = 2;
+      CGFloat		width = 0;
       NSRect		r;
 
       count = [array count];
diff --git a/Source/GSKeyBindingAction.h b/Source/GSKeyBindingAction.h
index 2b9e940..ac290d5 100644
--- a/Source/GSKeyBindingAction.h
+++ b/Source/GSKeyBindingAction.h
@@ -78,7 +78,7 @@
   SEL *_selectors;
 
   /* Lenght of the array of selectors.  */
-  int _selectorsCount;
+  NSInteger _selectorsCount;
 }
 - (id) initWithSelectorNames: (NSArray *)sels;
 @end
diff --git a/Source/GSKeyBindingAction.m b/Source/GSKeyBindingAction.m
index 42c824d..74e8609 100644
--- a/Source/GSKeyBindingAction.m
+++ b/Source/GSKeyBindingAction.m
@@ -59,7 +59,7 @@
 @implementation GSKeyBindingActionSelectorArray
 - (id) initWithSelectorNames: (NSArray *)sels
 {
-  int i;
+  NSUInteger i;
   
   _selectorsCount = [sels count];
 
diff --git a/Source/GSKeyBindingTable.h b/Source/GSKeyBindingTable.h
index ba7c1a2..61f4391 100644
--- a/Source/GSKeyBindingTable.h
+++ b/Source/GSKeyBindingTable.h
@@ -51,7 +51,7 @@ struct _GSKeyBinding
    * NSShiftKeyMask, NSControlKeyMask, NSAlternateKeyMask,
    * NSNumericPadKeyMask.
    */
-  int modifiers;  
+  NSUInteger modifiers;  
 
   /* The action, or NULL if there's no action associated.  NB - the action
    * is retained here.  */
@@ -103,7 +103,7 @@ struct _GSKeyBinding
  * action (or nil if none), and the further keybinding table (or nil
  * if none) to use for interpreting the next keystrokes.  */
 - (BOOL) lookupKeyStroke: (unichar)character
-	       modifiers: (int)flags
+	       modifiers: (NSUInteger)flags
        returningActionIn: (GSKeyBindingAction **)action
 		 tableIn: (GSKeyBindingTable **)table;
 
diff --git a/Source/GSKeyBindingTable.m b/Source/GSKeyBindingTable.m
index 9039091..99033d6 100644
--- a/Source/GSKeyBindingTable.m
+++ b/Source/GSKeyBindingTable.m
@@ -46,11 +46,11 @@
 - (void) bindKey: (id)key  toAction: (id)action
 {
   unichar character;
-  unsigned int modifiers;
+  NSUInteger modifiers;
   GSKeyBindingAction *a = nil;
   GSKeyBindingTable *t = nil;
   BOOL isTable = NO;
-  int i;
+  NSInteger i;
 
   /* First, try to determine what exactly is key :-) ... it might
      either be a simple string, "Control-f", or an array,
@@ -78,7 +78,7 @@
 	  /* Now start from the end of the array, and start building
 	     the temporary dictionary structure going backwards.  */
 	  id value = action;
-	  int j;
+	  NSInteger j;
 
 	  for (j = [key count] - 1; j > 0; j--)
 	    {
@@ -99,8 +99,8 @@
     }
   
   if (![NSInputManager parseKey: (NSString *)key 
-		       intoCharacter: &character
-		       andModifiers: &modifiers])
+                  intoCharacter: &character
+                   andModifiers: &modifiers])
     {
       NSLog (@"GSKeyBindingTable - Could not bind key %@", key);
       return;
@@ -228,7 +228,7 @@
 }
 
 - (BOOL) lookupKeyStroke: (unichar)character
-	       modifiers: (int)flags
+	       modifiers: (NSUInteger)flags
        returningActionIn: (GSKeyBindingAction **)action
 		 tableIn: (GSKeyBindingTable **)table
 {
diff --git a/Source/GSLayoutManager.m b/Source/GSLayoutManager.m
index a90ec29..8915ae6 100644
--- a/Source/GSLayoutManager.m
+++ b/Source/GSLayoutManager.m
@@ -60,7 +60,7 @@ static glyph_run_t *run_insert(glyph_run_head_t **context, int level)
 {
   glyph_run_head_t *h;
   glyph_run_t *r;
-  int i, size;
+  NSInteger i, size;
 
   size = sizeof(glyph_run_head_t) * level + sizeof(glyph_run_t);
   h = malloc(size);
@@ -151,19 +151,19 @@ static void run_fix_head(glyph_run_head_t *h)
 Private method used internally by GSLayoutManager for sanity checking.
 */
 @interface NSTextStorage (GSLayoutManagerSanityChecking)
--(unsigned int) _editCount;
+-(NSUInteger) _editCount;
 @end
 @implementation NSTextStorage (GSLayoutManagerSanityChecking)
--(unsigned int) _editCount;
+-(NSUInteger) _editCount;
 {
   return _editCount;
 }
 @end
 
 @interface GSLayoutManager (backend)
--(unsigned int) _findSafeBreakMovingBackwardFrom: (unsigned int)ch;
--(unsigned int) _findSafeBreakMovingForwardFrom: (unsigned int)ch;
--(void) _generateGlyphsForRun: (glyph_run_t *)run  at: (unsigned int)cpos;
+-(NSUInteger) _findSafeBreakMovingBackwardFrom: (NSUInteger)ch;
+-(NSUInteger) _findSafeBreakMovingForwardFrom: (NSUInteger)ch;
+-(void) _generateGlyphsForRun: (glyph_run_t *)run  at: (NSUInteger)cpos;
 @end
 
 /***** Glyph handling *****/
@@ -276,8 +276,8 @@ Private method used internally by GSLayoutManager for sanity checking.
     h = (glyph_run_t *)(glyphs + SKIP_LIST_DEPTH - 1)->next;
     for (; h; h = (glyph_run_t *)h->head.next)
       {
-        printf("%8p %i chars, %i glyphs, %i complete, prev %8p next %8p\n",
-               h, h->head.char_length, h->head.glyph_length, h->head.complete,
+        printf("%8p %ld chars, %ld glyphs, %i complete, prev %8p next %8p\n",
+               h, (long)h->head.char_length, (long)h->head.glyph_length, h->head.complete,
                h->prev, h->head.next);
         printf("         level %i, continued %i\n", h->level, h->continued);
         if (h->head.complete)
@@ -300,14 +300,14 @@ Private method used internally by GSLayoutManager for sanity checking.
 
     printf("    head: ");
     for (i = 0, h = glyphs + SKIP_LIST_DEPTH - 1; i < SKIP_LIST_DEPTH; i++, h--)
-      printf("%8p %i %3i %3i|", h->next, h->complete, h->char_length, h->glyph_length);
+      printf("%8p %i %3ld %3ld|", h->next, h->complete, (long)h->char_length, (long)h->glyph_length);
     printf("\n");
     h = (glyphs + SKIP_LIST_DEPTH - 1)->next;
     for (; h; h = h->next)
       {
         printf("%8p: ", h);
         for (g = h, i = ((glyph_run_t *)h)->level; i >= 0; i--, g--)
-          printf("%8p %i %3i %3i|", g->next, g->complete, g->char_length, g->glyph_length);
+          printf("%8p %i %3ld %3ld|", g->next, g->complete, (long)g->char_length, (long)g->glyph_length);
         printf("\n");
       }
   }
@@ -334,9 +334,9 @@ Private method used internally by GSLayoutManager for sanity checking.
  * glyph_pos and char_pos, when supplied, will contain the starting 
  * glyph/character index for this run.
  */
-- (glyph_run_t *)run_for_glyph_index: (unsigned int)glyphIndex
-				    : (unsigned int *)glyph_pos
-				    : (unsigned int *)char_pos
+- (glyph_run_t *)run_for_glyph_index: (NSUInteger)glyphIndex
+				    : (NSUInteger *)glyph_pos
+				    : (NSUInteger *)char_pos
 {
   int level;
   glyph_run_head_t *h;
@@ -344,7 +344,7 @@ Private method used internally by GSLayoutManager for sanity checking.
 
   if (glyphs->glyph_length <= glyphIndex)
     {
-      NSLog(@"run_for_glyph_index failed for %d", glyphIndex);
+      NSLog(@"run_for_glyph_index failed for %ld", (long)glyphIndex);
       return NULL;
     }
 
@@ -373,7 +373,7 @@ Private method used internally by GSLayoutManager for sanity checking.
           level--;
           if (!level)
             {
-              NSLog(@"run_for_glyph_index failed for %d", glyphIndex);
+              NSLog(@"run_for_glyph_index failed for %ld", (long)glyphIndex);
               return NULL;
             }
           continue;
@@ -386,7 +386,7 @@ Private method used internally by GSLayoutManager for sanity checking.
           h = h->next;
           if (!h)
             {
-              NSLog(@"run_for_glyph_index failed for %d", glyphIndex);
+              NSLog(@"run_for_glyph_index failed for %ld", (long)glyphIndex);
               return NULL;
             }
           continue;
@@ -418,9 +418,9 @@ Private method used internally by GSLayoutManager for sanity checking.
  * glyph_pos and char_pos, when supplied, will contain the starting 
  * glyph/character index for this run.
  */
-- (glyph_run_t *)run_for_character_index: (unsigned int)charIndex
-					: (unsigned int *)glyph_pos
-					: (unsigned int *)char_pos
+- (glyph_run_t *)run_for_character_index: (NSUInteger)charIndex
+					: (NSUInteger *)glyph_pos
+					: (NSUInteger *)char_pos
 {
   int level;
   glyph_run_head_t *h;
@@ -429,7 +429,7 @@ Private method used internally by GSLayoutManager for sanity checking.
 
   if (glyphs->char_length <= charIndex)
     {
-      NSLog(@"run_for_character_index failed for %d", charIndex);
+      NSLog(@"run_for_character_index failed for %ld", (long)charIndex);
       return NULL;
     }
 
@@ -461,7 +461,7 @@ Private method used internally by GSLayoutManager for sanity checking.
           h = h->next;
           if (!h)
             {
-              NSLog(@"run_for_character_index failed for %d", charIndex);
+              NSLog(@"run_for_character_index failed for %ld", (long)charIndex);
               return NULL;
             }
         }
@@ -493,12 +493,12 @@ Private method used internally by GSLayoutManager for sanity checking.
  * Only appends to the end of the skip list.
  * Only called after setting up a complete new layout.
  */
--(void) _generateRunsToCharacter: (unsigned int)last
+-(void) _generateRunsToCharacter: (NSUInteger)last
 {
   glyph_run_head_t *context[SKIP_LIST_DEPTH];
   glyph_run_head_t *h;
-  unsigned int pos;
-  unsigned int length;
+  NSUInteger pos;
+  NSUInteger length;
   int level;
 
   length = [_textStorage length];
@@ -579,7 +579,7 @@ Private method used internally by GSLayoutManager for sanity checking.
       */
       if (curRange.length > MAX_RUN_LENGTH)
         {
-          unsigned int safe_break = curRange.location + MAX_RUN_LENGTH;
+          NSUInteger safe_break = curRange.location + MAX_RUN_LENGTH;
           safe_break = [self _findSafeBreakMovingForwardFrom: safe_break];
           if (safe_break < NSMaxRange(curRange))
             curRange.length = safe_break - curRange.location;
@@ -630,8 +630,8 @@ Returns number of valid glyphs under h after generating up to last (sortof,
 not completely accurate).
 Fills in all glyph holes up to last. only looking at levels below level
 */
--(unsigned int) _generateGlyphs_char_r: (unsigned int)last : (unsigned int)cpos
-                                      : (unsigned int)gpos : (int)level
+-(unsigned int) _generateGlyphs_char_r: (NSUInteger)last : (NSUInteger)cpos
+                                      : (NSUInteger)gpos : (NSInteger)level
                                       : (glyph_run_head_t *)h : (glyph_run_head_t *)stop
                                       : (BOOL *)all_complete
 {
@@ -696,9 +696,9 @@ Fills in all glyph holes up to last. only looking at levels below level
 /*
  * Generate all glyphs up to the character index last.
  */
--(void) _generateGlyphsUpToCharacter: (unsigned int)last
+-(void) _generateGlyphsUpToCharacter: (NSUInteger)last
 {
-  unsigned int length;
+  NSUInteger length;
   BOOL dummy;
 
   if (!_textStorage)
@@ -734,9 +734,9 @@ Fills in all glyph holes up to last. only looking at levels below level
   // [self _glyphDumpRuns];
 }
 
--(void) _generateGlyphsUpToGlyph: (unsigned int)last
+-(void) _generateGlyphsUpToGlyph: (NSUInteger)last
 {
-  unsigned int length;
+  NSUInteger length;
 
   if (!_textStorage)
     return;
@@ -745,7 +745,7 @@ Fills in all glyph holes up to last. only looking at levels below level
   while (glyphs->glyph_length <= last && (glyphs->char_length < length || !glyphs->complete))
     {
       // Make an estimate for the character position
-      unsigned int char_last;
+      NSUInteger char_last;
 
       if (glyphs->glyph_length == 0)
         char_last = last;
@@ -760,20 +760,20 @@ Fills in all glyph holes up to last. only looking at levels below level
 /*
  * Find the glyph run that contains target and the glyph that matches to that char index.
  */
-- (glyph_run_t *) _glyphForCharacter: (unsigned int)target
-                               index: (unsigned int *)rindex
-                           positions: (unsigned int *)rpos 
-                                    : (unsigned int *)rcpos
+- (glyph_run_t *) _glyphForCharacter: (NSUInteger)target
+                               index: (NSUInteger *)rindex
+                           positions: (NSUInteger *)rpos 
+                                    : (NSUInteger *)rcpos
 {
   glyph_run_t *r;
-  unsigned int pos, cpos;
-  int lo, hi, mid, i;
+  NSUInteger pos, cpos;
+  NSInteger lo, hi, mid, i;
 
   r = [self run_for_character_index: target : &pos : &cpos];
   if (!r)
     {
       [NSException raise: NSRangeException
-                   format: @"%s character index %d out of range", __PRETTY_FUNCTION__, target];
+                   format: @"%s character index %lu out of range", __PRETTY_FUNCTION__, (unsigned long)target];
       return NULL;
     }
 
@@ -820,13 +820,13 @@ Fills in all glyph holes up to last. only looking at levels below level
 
 @implementation GSLayoutManager (glyphs)
 
-- (unsigned int) numberOfGlyphs
+- (NSUInteger) numberOfGlyphs
 {
   [self _generateGlyphsUpToCharacter: -1];
   return glyphs->glyph_length;
 }
 
-- (NSGlyph) glyphAtIndex: (unsigned int)glyphIndex
+- (NSGlyph) glyphAtIndex: (NSUInteger)glyphIndex
 {
   BOOL valid;
   NSGlyph g;
@@ -839,11 +839,11 @@ Fills in all glyph holes up to last. only looking at levels below level
   return g;
 }
 
-- (NSGlyph) glyphAtIndex: (unsigned int)glyphIndex
+- (NSGlyph) glyphAtIndex: (NSUInteger)glyphIndex
             isValidIndex: (BOOL *)isValidIndex
 {
   glyph_run_t *r;
-  unsigned int pos;
+  NSUInteger pos;
 
   if (isValidIndex != NULL)
     *isValidIndex = NO;
@@ -873,9 +873,9 @@ Fills in all glyph holes up to last. only looking at levels below level
   return r->glyphs[glyphIndex - pos].g;
 }
 
-- (BOOL) isValidGlyphIndex: (unsigned int)glyphIndex
+- (BOOL) isValidGlyphIndex: (NSUInteger)glyphIndex
 {
- if (glyphIndex == (unsigned int)-1)
+ if (glyphIndex == (NSUInteger)-1)
     return NO;
 
   if (glyphs->glyph_length <= glyphIndex)
@@ -888,14 +888,14 @@ Fills in all glyph holes up to last. only looking at levels below level
     }
 }
 
-- (unsigned int) getGlyphs: (NSGlyph *)glyphArray
-                     range: (NSRange)glyphRange
+- (NSUInteger) getGlyphs: (NSGlyph *)glyphArray
+                   range: (NSRange)glyphRange
 {
   glyph_run_t *r;
   NSGlyph *g;
-  unsigned int pos;
-  unsigned int num;
-  unsigned int i, j, k;
+  NSUInteger pos;
+  NSUInteger num;
+  NSUInteger i, j, k;
 
   if (glyphRange.length == 0)
     {
@@ -954,10 +954,10 @@ Fills in all glyph holes up to last. only looking at levels below level
   return num;
 }
 
-- (unsigned int) characterIndexForGlyphAtIndex: (unsigned int)glyphIndex
+- (NSUInteger) characterIndexForGlyphAtIndex: (NSUInteger)glyphIndex
 {
   glyph_run_t *r;
-  unsigned int pos, cpos;
+  NSUInteger pos, cpos;
 
   if (glyphs->glyph_length <= glyphIndex)
     {
@@ -989,10 +989,10 @@ Fills in all glyph holes up to last. only looking at levels below level
 /**
  * GNUstep extension
  */
-- (NSSize) advancementForGlyphAtIndex: (unsigned int)glyphIndex
+- (NSSize) advancementForGlyphAtIndex: (NSUInteger)glyphIndex
 {
   glyph_run_t *r;
-  unsigned int pos, cpos;
+  NSUInteger pos, cpos;
 
   if (glyphs->glyph_length <= glyphIndex)
     {
@@ -1028,8 +1028,8 @@ Fills in all glyph holes up to last. only looking at levels below level
 {
   glyph_run_t *r;
   NSRange real_range, char_range;
-  unsigned int cpos, pos;
-  unsigned j;
+  NSUInteger cpos, pos;
+  NSUInteger j;
 
   if (NSMaxRange(glyphRange) == 0)
     {
@@ -1071,8 +1071,8 @@ Fills in all glyph holes up to last. only looking at levels below level
   /* scan backwards to find the real first glyph */
   {
     glyph_run_t *r2;
-    unsigned int adj, cadj;
-    int i;
+    NSUInteger adj, cadj;
+    NSInteger i;
 
     i = glyphRange.location - pos;
     r2 = r;
@@ -1120,9 +1120,9 @@ Fills in all glyph holes up to last. only looking at levels below level
   /* scan forwards to find the real last glyph */
   {
     glyph_run_t *r2;
-    unsigned int adj, cadj;
-    unsigned int last = 0;
-    unsigned int i;
+    NSUInteger adj, cadj;
+    NSUInteger last = 0;
+    NSUInteger i;
 
     i = glyphRange.location + glyphRange.length - 1 - pos;
     r2 = r;
@@ -1161,8 +1161,8 @@ Fills in all glyph holes up to last. only looking at levels below level
 {
   NSRange char_range, glyph_range;
   glyph_run_t *r;
-  unsigned int cpos, pos;
-  unsigned int i, target;
+  NSUInteger cpos, pos;
+  NSUInteger i, target;
 
   /* TODO: should this really be valid?
 
@@ -1243,18 +1243,18 @@ Internally, we switch between before- and after-indices. Comments mark the
 places where we switch.
 */
 - (void) invalidateGlyphsForCharacterRange: (NSRange)range
-                            changeInLength: (int)lengthChange
+                            changeInLength: (NSInteger)lengthChange
                       actualCharacterRange: (NSRange *)actualRange
 {
   glyph_run_head_t *context[SKIP_LIST_DEPTH];
   glyph_run_head_t *h;
   glyph_run_t *r;
   NSRange rng;
-  int position[SKIP_LIST_DEPTH];
-  unsigned int cpos;
-  int level;
-  unsigned int ch;
-  unsigned int max;
+  NSInteger position[SKIP_LIST_DEPTH];
+  NSUInteger cpos;
+  NSInteger level;
+  NSUInteger ch;
+  NSUInteger max;
 
   /*
   We always clear out the cached run information to be safe. This is only needed 
@@ -1408,7 +1408,7 @@ places where we switch.
       This run begins before the invalidated range. Resize it so it ends
       just before it.
       */
-      int len = r->head.char_length;
+      NSUInteger len = r->head.char_length;
 
       r->head.char_length = ch - cpos;
       cpos += len;
@@ -1493,7 +1493,7 @@ places where we switch.
   { /* OPT: this is creating more runs than it needs to */
     NSDictionary *attributes;
     glyph_run_t *new;
-    unsigned int max = range.location + range.length;
+    NSUInteger max = range.location + range.length;
     int i;
 
     ch = range.location;
@@ -1573,7 +1573,7 @@ places where we switch.
         /* See comment in -_generateRunsToCharacter:. */
         if (rng.length > MAX_RUN_LENGTH)
           {
-            unsigned int safe_break = rng.location + MAX_RUN_LENGTH;
+            NSUInteger safe_break = rng.location + MAX_RUN_LENGTH;
             safe_break = [self _findSafeBreakMovingForwardFrom: safe_break];
             if (safe_break < NSMaxRange(rng))
               rng.length = safe_break - rng.location;
@@ -1625,7 +1625,7 @@ places where we switch.
 
 #define GET_GLYPH \
 	glyph_run_t *r; \
-	unsigned int pos, cpos; \
+	NSUInteger pos, cpos; \
 \
 	if (glyphs->glyph_length <= idx) \
 	{ \
@@ -1646,31 +1646,31 @@ places where we switch.
 	idx -= pos;
 
 - (void) setDrawsOutsideLineFragment: (BOOL)flag 
-                     forGlyphAtIndex: (unsigned int)idx
+                     forGlyphAtIndex: (NSUInteger)idx
 {
   GET_GLYPH
   r->glyphs[idx].drawsOutsideLineFragment = !!flag;
 }
-- (BOOL) drawsOutsideLineFragmentForGlyphAtIndex: (unsigned int)idx
+- (BOOL) drawsOutsideLineFragmentForGlyphAtIndex: (NSUInteger)idx
 {
   GET_GLYPH
   return r->glyphs[idx].drawsOutsideLineFragment;
 }
 
 - (void) setNotShownAttribute: (BOOL)flag 
-              forGlyphAtIndex: (unsigned int)idx
+              forGlyphAtIndex: (NSUInteger)idx
 {
   GET_GLYPH
   r->glyphs[idx].isNotShown = !!flag;
 }
-- (BOOL) notShownAttributeForGlyphAtIndex: (unsigned int)idx
+- (BOOL) notShownAttributeForGlyphAtIndex: (NSUInteger)idx
 {
   GET_GLYPH
   return r->glyphs[idx].isNotShown;
 }
 
 // GNUstep extension
-- (NSFont *) effectiveFontForGlyphAtIndex: (unsigned int)idx
+- (NSFont *) effectiveFontForGlyphAtIndex: (NSUInteger)idx
                                     range: (NSRange *)range
 {
   GET_GLYPH
@@ -1680,8 +1680,8 @@ places where we switch.
 }
 
 - (void) insertGlyph: (NSGlyph)aGlyph
-        atGlyphIndex: (unsigned int)glyphIndex
-      characterIndex: (unsigned int)charIndex
+        atGlyphIndex: (NSUInteger)glyphIndex
+      characterIndex: (NSUInteger)charIndex
 {
   [self insertGlyphs: &aGlyph
         length: 1
@@ -1689,11 +1689,11 @@ places where we switch.
         characterIndex: charIndex];
 }
 
-- (void) replaceGlyphAtIndex: (unsigned int)glyphIndex
+- (void) replaceGlyphAtIndex: (NSUInteger)glyphIndex
                    withGlyph: (NSGlyph)newGlyph
 {
   glyph_run_t *r;
-  unsigned int pos, cpos;
+  NSUInteger pos, cpos;
 
   if (glyphs->glyph_length <= glyphIndex)
     {
@@ -1762,11 +1762,11 @@ places where we switch.
   NSLog(@"Internal method %s called", __PRETTY_FUNCTION__);
 }
 
-- (void) setCharacterIndex: (unsigned int)charIndex
-           forGlyphAtIndex: (unsigned int)glyphIndex
+- (void) setCharacterIndex: (NSUInteger)charIndex
+           forGlyphAtIndex: (NSUInteger)glyphIndex
 {
   glyph_run_t *r;
-  unsigned int pos, cpos;
+  NSUInteger pos, cpos;
 
   if (glyphs->glyph_length <= glyphIndex)
     {
@@ -1794,12 +1794,12 @@ places where we switch.
   // What should happen to the following glyphs?
 }
 
-- (int) intAttribute: (int)attributeTag
-     forGlyphAtIndex: (unsigned int)glyphIndex
+- (NSInteger) intAttribute: (NSInteger)attributeTag
+     forGlyphAtIndex: (NSUInteger)glyphIndex
 {
   glyph_run_t *run;
   glyph_t *g;
-  unsigned int pos;
+  NSUInteger pos;
 
   run = run_for_glyph_index(glyphIndex, glyphs, &pos, NULL);
   if (run && run->glyphs && (run->head.glyph_length < glyphIndex - pos))
@@ -1827,9 +1827,9 @@ places where we switch.
 
 @implementation GSLayoutManager (LayoutHelpers)
 
--(void) _invalidateLayoutFromContainer: (int)idx
+-(void) _invalidateLayoutFromContainer: (NSInteger)idx
 {
-  int i, j;
+  NSInteger i, j;
   textcontainer_t *tc;
   linefrag_t *lf;
 
@@ -1888,11 +1888,11 @@ places where we switch.
   [self _doLayoutToContainer: num_textcontainers - 1];
 }
 
--(void) _doLayoutToGlyph: (unsigned int)glyphIndex
+-(void) _doLayoutToGlyph: (NSUInteger)glyphIndex
 {
-  int i, j;
+  NSInteger i, j;
   textcontainer_t *tc;
-  unsigned int next;
+  NSUInteger next;
   NSRect prev;
   BOOL delegate_responds;
 
@@ -1934,7 +1934,7 @@ places where we switch.
             If there is any soft invalidated layout information left, remove
             it.
           */
-          int k;
+          NSInteger k;
           linefrag_t *lf;
           for (k = tc->num_linefrags, lf = tc->linefrags + k; 
                k < tc->num_linefrags + tc->num_soft; k++, lf++)
@@ -1974,11 +1974,11 @@ places where we switch.
     }
 }
 
--(void) _doLayoutToContainer: (int)cindex
+-(void) _doLayoutToContainer: (NSInteger)cindex
 {
-  int i, j;
+  NSInteger i, j;
   textcontainer_t *tc;
-  unsigned int next;
+  NSUInteger next;
   NSRect prev;
   BOOL delegate_responds;
 
@@ -2014,7 +2014,7 @@ places where we switch.
             If there is any soft invalidated layout information left, remove
             it.
           */
-          int k;
+          NSInteger k;
           linefrag_t *lf;
           for (k = tc->num_linefrags, lf = tc->linefrags + k; 
                k < tc->num_linefrags + tc->num_soft; k++, lf++)
@@ -2093,7 +2093,7 @@ by calling this incorrectly.
 
 
 #define SETUP_STUFF \
-  unsigned int max = glyphRange.location + glyphRange.length; \
+  NSUInteger max = glyphRange.location + glyphRange.length; \
   \
   [self _generateGlyphsUpToGlyph: max - 1]; \
   if (glyphs->glyph_length < max) \
@@ -2157,8 +2157,8 @@ by calling this incorrectly.
     }
 
   {
-    unsigned int gpos;
-    unsigned int g;
+    NSUInteger gpos;
+    NSUInteger g;
     glyph_t *glyph;
     glyph_run_t *run = run_for_glyph_index(glyphRange.location, glyphs, &gpos, NULL);
 
@@ -2256,7 +2256,7 @@ by calling this incorrectly.
     }
   else
     {
-      int i;
+      NSInteger i;
       for (i = tc->num_linefrags, lf = tc->linefrags + i; i < tc->num_linefrags + tc->num_soft; i++, lf++)
 	{
 	  if (lf->pos >= NSMaxRange(glyphRange))
@@ -2315,7 +2315,7 @@ by calling this incorrectly.
 forStartOfGlyphRange: (NSRange)glyphRange
 {
   textcontainer_t *tc;
-  int i;
+  NSInteger i;
   linefrag_t *lf;
   linefrag_point_t *lp;
 
@@ -2557,7 +2557,7 @@ forStartOfGlyphRange: (NSRange)glyphRange
   return lf->used_rect;
 }
 
-- (NSRange) rangeOfNominallySpacedGlyphsContainingIndex: (unsigned int)glyphIndex
+- (NSRange) rangeOfNominallySpacedGlyphsContainingIndex: (NSUInteger)glyphIndex
 					  startLocation: (NSPoint *)p
 {
   int i;
@@ -2599,7 +2599,7 @@ forStartOfGlyphRange: (NSRange)glyphRange
 }
 
 
-- (NSRange) rangeOfNominallySpacedGlyphsContainingIndex:(unsigned int)glyphIndex
+- (NSRange) rangeOfNominallySpacedGlyphsContainingIndex:(NSUInteger)glyphIndex
 {
   return [self rangeOfNominallySpacedGlyphsContainingIndex: glyphIndex
 	       startLocation: NULL];
@@ -2699,7 +2699,7 @@ forStartOfGlyphRange: (NSRange)glyphRange
 }
 
 - (void) insertTextContainer: (NSTextContainer *)aTextContainer
-		     atIndex: (unsigned int)index
+		     atIndex: (NSUInteger)index
 {
   unsigned int i;
 
@@ -2721,9 +2721,9 @@ forStartOfGlyphRange: (NSRange)glyphRange
   [self _didInvalidateLayout];
 }
 
-- (void) removeTextContainerAtIndex: (unsigned int)index
+- (void) removeTextContainerAtIndex: (NSUInteger)index
 {
-  int i;
+  NSInteger i;
   textcontainer_t *tc = &textcontainers[index];
 
   [self _invalidateLayoutFromContainer: index];
@@ -2761,18 +2761,18 @@ forStartOfGlyphRange: (NSRange)glyphRange
   [self _didInvalidateLayout];
 }
 
-- (unsigned int) firstUnlaidCharacterIndex
+- (NSUInteger) firstUnlaidCharacterIndex
 {
   return layout_char;
 }
 
-- (unsigned int) firstUnlaidGlyphIndex
+- (NSUInteger) firstUnlaidGlyphIndex
 {
   return layout_glyph;
 }
 
--(void) getFirstUnlaidCharacterIndex: (unsigned int *)cindex
-			  glyphIndex: (unsigned int *)gindex
+-(void) getFirstUnlaidCharacterIndex: (NSUInteger *)cindex
+			  glyphIndex: (NSUInteger *)gindex
 {
   if (cindex)
     *cindex = [self firstUnlaidCharacterIndex];
@@ -2805,11 +2805,11 @@ forStartOfGlyphRange: (NSRange)glyphRange
 }
 
 
--(void) _softInvalidateUseLineFrags: (int)num
+-(void) _softInvalidateUseLineFrags: (NSInteger)num
 			  withShift: (NSSize)shift
 		    inTextContainer: (NSTextContainer *)textContainer
 {
-  int i;
+  NSInteger i;
   textcontainer_t *tc;
   linefrag_t *lf;
   for (i = 0, tc = textcontainers; i < num_textcontainers; i++, tc++)
@@ -2847,12 +2847,12 @@ forStartOfGlyphRange: (NSRange)glyphRange
     layout_char = [self characterIndexForGlyphAtIndex: layout_glyph]; /* TODO? */
 }
 
--(NSRect) _softInvalidateLineFragRect: (int)index
-			   firstGlyph: (unsigned int *)first_glyph
-			    nextGlyph: (unsigned int *)next_glyph
+-(NSRect) _softInvalidateLineFragRect: (NSInteger)index
+			   firstGlyph: (NSUInteger *)first_glyph
+			    nextGlyph: (NSUInteger *)next_glyph
 		      inTextContainer: (NSTextContainer *)textContainer
 {
-  int i;
+  NSInteger i;
   textcontainer_t *tc;
   linefrag_t *lf;
   for (i = 0, tc = textcontainers; i < num_textcontainers; i++, tc++)
@@ -2873,9 +2873,9 @@ forStartOfGlyphRange: (NSRange)glyphRange
   return lf->rect;
 }
 
--(unsigned int) _softInvalidateFirstGlyphInTextContainer: (NSTextContainer *)textContainer
+-(NSUInteger) _softInvalidateFirstGlyphInTextContainer: (NSTextContainer *)textContainer
 {
-  int i;
+  NSInteger i;
   textcontainer_t *tc;
   for (i = 0, tc = textcontainers; i < num_textcontainers; i++, tc++)
     if (tc->textContainer == textContainer)
@@ -2891,9 +2891,9 @@ forStartOfGlyphRange: (NSRange)glyphRange
     return (unsigned int)-1;
 }
 
--(unsigned int) _softInvalidateNumberOfLineFragsInTextContainer: (NSTextContainer *)textContainer
+-(NSUInteger) _softInvalidateNumberOfLineFragsInTextContainer: (NSTextContainer *)textContainer
 {
-  int i;
+  NSInteger i;
   textcontainer_t *tc;
   for (i = 0, tc = textcontainers; i < num_textcontainers; i++, tc++)
     if (tc->textContainer == textContainer)
@@ -2929,7 +2929,7 @@ forStartOfGlyphRange: (NSRange)glyphRange
 
 -(void) dealloc
 {
-  int i;
+  NSInteger i;
   textcontainer_t *tc;
 
   free(rect_array);
@@ -3124,9 +3124,9 @@ intelligent invalidation of layout using the constraints on layout it
 has).
 */
 - (void) textStorage: (NSTextStorage *)aTextStorage
-              edited: (unsigned int)mask
+              edited: (NSUInteger)mask
                range: (NSRange)range
-      changeInLength: (int)lengthChange
+      changeInLength: (NSInteger)lengthChange
     invalidatedRange: (NSRange)invalidatedRange
 {
   NSRange r;
@@ -3147,7 +3147,7 @@ has).
   [self _didInvalidateLayout];
 }
 
--(unsigned int) _findSafeBreakMovingBackwardFrom: (unsigned int)ch
+-(NSUInteger) _findSafeBreakMovingBackwardFrom: (NSUInteger)ch
 {
   NSString *str = [_textStorage string];
 
@@ -3157,9 +3157,9 @@ has).
   return ch;
 }
 
--(unsigned int) _findSafeBreakMovingForwardFrom: (unsigned int)ch
+-(NSUInteger) _findSafeBreakMovingForwardFrom: (NSUInteger)ch
 {
-  unsigned int len = [_textStorage length];
+  NSUInteger len = [_textStorage length];
   NSString *str = [_textStorage string];
 
   // FIXME: Better check for ligature
@@ -3189,11 +3189,11 @@ forStartingGlyphAtIndex: (NSUInteger)glyph
        characterIndex: (NSUInteger)index
 {
   glyph_run_t *run;
-  int i;
+  NSInteger i;
   glyph_t *g;
-  int len;
-  unsigned int gpos = 0;
-  unsigned int cpos = 0;
+  NSInteger len;
+  NSUInteger gpos = 0;
+  NSUInteger cpos = 0;
 
   //NSLog(@"Insert %d glyphs at %d for index %d", length, glyph, index);
 
@@ -3208,8 +3208,8 @@ forStartingGlyphAtIndex: (NSUInteger)glyph
   len = glyph - gpos + length;
   if (len < 0)
     {
-      NSLog(@"Insert %d glyphs at %d for index %d", (int)length, (int)glyph, (int)index);
-      NSLog(@"Found gpos %d cpos %d len %d", gpos, cpos, len);
+      NSLog(@"Insert %ld glyphs at %ld for index %ld", (long)length, (long)glyph, (long)index);
+      NSLog(@"Found gpos %ld cpos %ld len %ld", (long)gpos, (long)cpos, (long)len);
       [NSException raise: NSRangeException
                    format: @"%s glyph index out of range", __PRETTY_FUNCTION__];
       return;
@@ -3245,8 +3245,8 @@ forStartingGlyphAtIndex: (NSUInteger)glyph
        characterIndex: (NSUInteger)index
 {
   glyph_run_t *run;
-  int i;
-  unsigned int gpos, cpos;
+  NSInteger i;
+  NSUInteger gpos, cpos;
   NSSize advances[length];
 
   run = [self run_for_character_index: index : &gpos : &cpos];
@@ -3287,7 +3287,7 @@ forStartingGlyphAtIndex: (NSUInteger)glyph
 {
   glyph_run_t *run;
   glyph_t *g;
-  unsigned int pos;
+  NSUInteger pos;
 
   run = run_for_glyph_index(glyphIndex, glyphs, &pos, NULL);
   if (run && run->glyphs && (run->head.glyph_length < glyphIndex - pos))
diff --git a/Source/GSMemoryPanel.m b/Source/GSMemoryPanel.m
index 0366154..afad737 100644
--- a/Source/GSMemoryPanel.m
+++ b/Source/GSMemoryPanel.m
@@ -394,7 +394,7 @@ static GSMemoryPanel *sharedGSMemoryPanel = nil;
 
 - (void) reorder: (id)sender
 {
-  int selectedColumn = [table clickedColumn];
+  NSInteger selectedColumn = [table clickedColumn];
   NSArray *tableColumns = [table tableColumns];
   id identifier;
   SEL newOrderingBy = @selector(compareByCount:); 
diff --git a/Source/GSNibLoading.m b/Source/GSNibLoading.m
index e1c85a6..17707d2 100644
--- a/Source/GSNibLoading.m
+++ b/Source/GSNibLoading.m
@@ -49,15 +49,6 @@
 #import <Foundation/NSSet.h>
 #import <Foundation/NSString.h>
 
-// FIXME: Used for NSKeyedArchiver access. All this should be moved into base.
-/*
- *      Setup for inline operation of arrays.
- */
-#define GSI_ARRAY_RETAIN(A, X)	RETAIN((X).obj)
-#define GSI_ARRAY_RELEASE(A, X)	RELEASE((X).obj)
-#define GSI_ARRAY_TYPES GSUNION_OBJ
-#include <GNUstepBase/GSIArray.h>
-
 #import "GNUstepGUI/GSNibLoading.h"
 #import "AppKit/NSApplication.h"
 #import "AppKit/NSImage.h"
@@ -73,8 +64,6 @@
 static BOOL _isInInterfaceBuilder = NO;
 
 @interface NSKeyedUnarchiver (NSClassSwapperPrivate)
-- (BOOL) replaceObject: (id)oldObj withObject: (id)newObj;
-- (NSDictionary *)keyMap;
 - (Class) replacementClassForClassName: (NSString *)className;
 @end
 
@@ -306,7 +295,7 @@ static BOOL _isInInterfaceBuilder = NO;
             isOneShot: (BOOL) oneShot
             isVisible: (BOOL) visible
        wantsToBeColor: (BOOL) wantsToBeColor
-     autoPositionMask: (int) autoPositionMask
+     autoPositionMask: (NSInteger) autoPositionMask
 {
   if ((self = [super init]) != nil)
     {
@@ -335,7 +324,7 @@ static BOOL _isInInterfaceBuilder = NO;
           _flags.isVisible = visible;
           _flags.wantsToBeColor = wantsToBeColor;
           _flags.dynamicDepthLimit = [window hasDynamicDepthLimit];
-          _flags.autoPositionMask = autoPositionMask;
+          _flags.autoPositionMask = (unsigned)autoPositionMask;
           _flags.savePosition = YES; // not yet implemented.
         }
     }
@@ -419,10 +408,10 @@ static BOOL _isInInterfaceBuilder = NO;
 
       [aCoder encodeObject: _viewClass forKey: @"NSViewClass"];
       [aCoder encodeObject: _windowClass forKey: @"NSWindowClass"];
-      [aCoder encodeInt: _windowStyle forKey: @"NSWindowStyleMask"];
-      [aCoder encodeInt: _backingStoreType forKey: @"NSWindowBacking"];
+      [aCoder encodeInteger: _windowStyle forKey: @"NSWindowStyleMask"];
+      [aCoder encodeInteger: _backingStoreType forKey: @"NSWindowBacking"];
       [aCoder encodeObject: _view forKey: @"NSWindowView"];
-      [aCoder encodeInt: flags forKey: @"NSWTFlags"];
+      [aCoder encodeInteger: flags forKey: @"NSWTFlags"];
       [aCoder encodeSize: _minSize forKey: @"NSMinSize"];
       [aCoder encodeSize: _maxSize forKey: @"NSMaxSize"];
       [aCoder encodeRect: rect forKey: @"NSWindowRect"];
@@ -567,7 +556,7 @@ static BOOL _isInInterfaceBuilder = NO;
 /**
  * Sets the window style.
  */
-- (void) setWindowStyle: (unsigned)style
+- (void) setWindowStyle: (NSUInteger)style
 {
   _windowStyle = style;
 }
@@ -575,7 +564,7 @@ static BOOL _isInInterfaceBuilder = NO;
 /** 
  * Returns the window style.
  */
-- (unsigned) windowStyle
+- (NSUInteger) windowStyle
 {
   return _windowStyle;
 }
@@ -1291,38 +1280,6 @@ static BOOL _isInInterfaceBuilder = NO;
  */
 @implementation NSKeyedUnarchiver (NSClassSwapperPrivate)
 /**
- * This method is used to replace oldObj with newObj
- * in the map that is maintained in NSKeyedUnarchiver.
- */
-- (BOOL) replaceObject: (id)oldObj withObject: (id)newObj
-{
-  unsigned int i = 0;
-  unsigned int count = GSIArrayCount(_objMap);
-  for (i = 0; i < count; i++)
-    {
-      id obj = GSIArrayItemAtIndex(_objMap, i).obj;
-      if (obj == oldObj)
-        break;
-    }
-
-  if (i < count)
-    {
-      GSIArraySetItemAtIndex(_objMap, (GSIArrayItem)newObj, i);
-      return YES;
-    }
-
-  return NO;
-}
-
-/**
- * This method is private and is purely for debugging purposes.
- */
-- (NSDictionary *)keyMap
-{
-  return _keyMap;
-}
-
-/**
  * This method returns the class which replaces the class named
  * by className.   It uses the classes map to do this.
  */
@@ -1712,7 +1669,7 @@ static BOOL _isInInterfaceBuilder = NO;
       [coder encodeObject: (id) _fontManager forKey: @"NSFontManager"];
       [coder encodeObject: (id) _framework forKey: @"NSFramework"];
       [coder encodeObject: (id) _visibleWindows forKey: @"NSVisibleWindows"];
-      [coder encodeInt: _nextOid forKey: @"NSNextOid"];
+      [coder encodeInteger: _nextOid forKey: @"NSNextOid"];
       [coder encodeConditionalObject: (id) _root forKey: @"NSRoot"];
     }
   else
@@ -2050,7 +2007,7 @@ static BOOL _isInInterfaceBuilder = NO;
 {
   NSArray *nameKeys = (NSArray *)NSAllMapTableKeys(_names);
   NSArray *nameValues = (NSArray *)NSAllMapTableValues(_names);
-  int i = [nameKeys indexOfObject: obj];
+  NSUInteger i = [nameKeys indexOfObject: obj];
   NSString *result = [nameValues objectAtIndex: i];
   return result;
 }
@@ -2074,7 +2031,7 @@ static BOOL _isInInterfaceBuilder = NO;
 /**
  * Set the value of the next available oid.
  */
-- (void) setNextOid: (int)noid
+- (void) setNextOid: (NSInteger)noid
 {
   _nextOid = noid;
 }
@@ -2082,7 +2039,7 @@ static BOOL _isInInterfaceBuilder = NO;
 /**
  * Get the value of the next available oid.
  */
-- (int) nextOid
+- (NSInteger) nextOid
 {
   return _nextOid;
 }
diff --git a/Source/GSServicesManager.m b/Source/GSServicesManager.m
index b83d37f..1856c0b 100644
--- a/Source/GSServicesManager.m
+++ b/Source/GSServicesManager.m
@@ -705,9 +705,9 @@ static NSString         *disabledName = @".GNUstepDisabled";
   NSDictionary  *info = [_title2info objectForKey: title];
   NSArray       *sendTypes = [info objectForKey: @"NSSendTypes"];
   NSArray       *returnTypes = [info objectForKey: @"NSReturnTypes"];
-  unsigned      i, j;
-  unsigned      es = [sendTypes count];
-  unsigned      er = [returnTypes count];
+  NSUInteger    i, j;
+  NSUInteger    es = [sendTypes count];
+  NSUInteger    er = [returnTypes count];
   NSResponder   *resp = [[_application keyWindow] firstResponder];
   id            obj = nil;
 
@@ -828,7 +828,7 @@ static NSString         *disabledName = @".GNUstepDisabled";
  */
 - (NSString*) item2title: (id<NSMenuItem>)item
 {
-  unsigned      pos;
+  NSUInteger      pos;
 
   if ([item target] != self)
     return nil;
@@ -1019,9 +1019,9 @@ static NSString         *disabledName = @".GNUstepDisabled";
   if (_servicesMenu != nil)
     {
       NSMutableSet      *keyEquivalents;
-      unsigned          pos;
-      unsigned          loc0;
-      unsigned          loc1 = 0;
+      NSUInteger        pos;
+      NSUInteger        loc0;
+      NSUInteger        loc1 = 0;
       SEL               sel = @selector(doService:);
       NSMenu            *submenu = nil;
 
@@ -1041,7 +1041,7 @@ static NSString         *disabledName = @".GNUstepDisabled";
           NSDictionary  *titles;
           NSDictionary  *equivs;
           NSRange       r;
-          unsigned      lang;
+          NSUInteger    lang;
           id<NSMenuItem>        item;
 
           if (NSShowsServicesMenuItem(title) == NO)
@@ -1209,7 +1209,7 @@ static NSString         *disabledName = @".GNUstepDisabled";
 	    }
 	  if (registered == NO)
 	    {
-	      int	result;
+	      NSInteger result;
 
 	      /*
 	       * Something is seriously wrong - we can't talk to the
@@ -1247,7 +1247,7 @@ static NSString         *disabledName = @".GNUstepDisabled";
                returnTypes: (NSArray *)returnTypes
 {
   BOOL          didChange = NO;
-  unsigned      i;
+  NSUInteger    i;
 
   for (i = 0; i < [sendTypes count]; i++)
     {
@@ -1263,7 +1263,7 @@ static NSString         *disabledName = @".GNUstepDisabled";
         }
       else
         {
-          unsigned      count = [returnSet count];
+          NSUInteger count = [returnSet count];
 
           [returnSet addObjectsFromArray: returnTypes];
           if ([returnSet count] != count)
@@ -1349,9 +1349,9 @@ static NSString         *disabledName = @".GNUstepDisabled";
   NSDictionary  *info = [_title2info objectForKey: title];
   NSArray       *sendTypes = [info objectForKey: @"NSSendTypes"];
   NSArray       *returnTypes = [info objectForKey: @"NSReturnTypes"];
-  unsigned      i, j;
-  unsigned      es = [sendTypes count];
-  unsigned      er = [returnTypes count];
+  NSUInteger    i, j;
+  NSUInteger    es = [sendTypes count];
+  NSUInteger    er = [returnTypes count];
   NSResponder	*resp = [[_application keyWindow] firstResponder];
 
   /*
diff --git a/Source/GSSlideView.m b/Source/GSSlideView.m
index 3ac4a7d..9f35b6d 100644
--- a/Source/GSSlideView.m
+++ b/Source/GSSlideView.m
@@ -69,15 +69,15 @@
 
 - (void) _slideFrom: (NSPoint)fromPoint to: (NSPoint)toPoint
 {
-  float distx = toPoint.x - fromPoint.x;
-  float disty = toPoint.y - fromPoint.y;
-  float dist = sqrt((distx * distx) + (disty * disty));
+  CGFloat distx = toPoint.x - fromPoint.x;
+  CGFloat disty = toPoint.y - fromPoint.y;
+  CGFloat dist = sqrt((distx * distx) + (disty * disty));
 //  int steps = (int)(dist / MINDIST);
   NSSize imgSize = [[slideCell image] size];
-  float imgDist = sqrt((imgSize.width * imgSize.width) + 
-		       (imgSize.height * imgSize.height));
-  int steps = (int)(dist/imgDist);
-  int windowNumber = [_window windowNumber];
+  CGFloat imgDist = sqrt((imgSize.width * imgSize.width) + 
+                         (imgSize.height * imgSize.height));
+  NSInteger steps = (NSInteger)(dist/imgDist);
+  NSInteger windowNumber = [_window windowNumber];
   GSDisplayServer *server = GSServerForWindow(_window);
 
 
diff --git a/Source/GSStandardWindowDecorationView.m b/Source/GSStandardWindowDecorationView.m
index 709c91a..837adea 100644
--- a/Source/GSStandardWindowDecorationView.m
+++ b/Source/GSStandardWindowDecorationView.m
@@ -48,7 +48,7 @@
 
 @implementation GSStandardWindowDecorationView
 
-+ (void) offsets: (float *)l : (float *)r : (float *)t : (float *)b
++ (void) offsets: (CGFloat *)l : (CGFloat *)r : (CGFloat *)t : (CGFloat *)b
     forStyleMask: (NSUInteger)style
 {
   GSTheme *theme = [GSTheme theme];
@@ -78,7 +78,7 @@
 + (CGFloat) minFrameWidthWithTitle: (NSString *)aTitle
 		       styleMask: (NSUInteger)aStyle
 {
-  float l, r, t, b, width;
+  CGFloat l, r, t, b, width;
 
   [self offsets: &l : &r : &t : &b forStyleMask: aStyle];
 
@@ -195,7 +195,7 @@
   [super setTitle: newTitle];
 }
 
-- (void) setInputState: (int)state
+- (void) setInputState: (NSInteger)state
 {
   NSAssert(state >= 0 && state <= 2, @"Invalid state!");
   [super setInputState: state];
@@ -222,7 +222,7 @@
 
 - (NSPoint) mouseLocationOnScreenOutsideOfEventStream
 {
-  int screen = [[window screen] screenNumber];
+  NSInteger screen = [[window screen] screenNumber];
   return [GSServerForWindow(window) mouseLocationOnScreen: screen
 						   window: NULL];
 }
diff --git a/Source/GSTextFinder.m b/Source/GSTextFinder.m
index 085d8ed..61da18a 100644
--- a/Source/GSTextFinder.m
+++ b/Source/GSTextFinder.m
@@ -264,7 +264,7 @@ static GSTextFinder *sharedTextFinder;
       NSRange range = [aTextView selectedRange];
       if (range.length)
 	{
-	  NSString *string = [[aTextView string] substringFromRange: range];
+	  NSString *string = [[aTextView string] substringWithRange: range];
 	  ASSIGNCOPY(findString, string);
 	  [findText setStringValue: string];
 	  [findText selectText: self];
diff --git a/Source/GSTextStorage.m b/Source/GSTextStorage.m
index b94990d..661b31c 100644
--- a/Source/GSTextStorage.m
+++ b/Source/GSTextStorage.m
@@ -234,8 +234,8 @@ unCacheAttributes(NSDictionary *attrs)
 @interface	GSTextInfo : NSObject
 {
 @public
-  unsigned	loc;
-  NSDictionary	*attrs;
+    NSUInteger	loc;
+    NSDictionary	*attrs;
 }
 
 + (GSTextInfo*) newWithZone: (NSZone*)z value: (NSDictionary*)a at: (unsigned)l;
@@ -271,8 +271,7 @@ unCacheAttributes(NSDictionary *attrs)
 
 - (NSString*) description
 {
-  return [NSString stringWithFormat: @"Attributes at %u are - %@",
-    loc, attrs];
+  return [NSString stringWithFormat: @"Attributes at %lu are - %@", (unsigned long)loc, attrs];
 }
 
 - (void) encodeWithCoder: (NSCoder*)aCoder
@@ -383,7 +382,7 @@ _setAttributesFrom(
   NSRange	range;
   NSDictionary	*attr;
   GSTextInfo	*info;
-  unsigned	loc;
+  NSUInteger	loc;
 
   /*
    * remove any old attributes of the string.
@@ -417,14 +416,13 @@ _setAttributesFrom(
 }
 
 inline static NSDictionary*
-_attributesAtIndexEffectiveRange(
-  unsigned int index,
-  NSRange *aRange,
-  unsigned int tmpLength,
-  NSMutableArray *_infoArray,
-  unsigned int *foundIndex)
-{
-  unsigned	low, high, used, cnt, nextLoc;
+_attributesAtIndexEffectiveRange(NSUInteger index,
+                                 NSRange *aRange,
+                                 NSUInteger tmpLength,
+                                 NSMutableArray *_infoArray,
+                                 NSUInteger *foundIndex)
+{
+  NSUInteger	low, high, used, cnt, nextLoc;
   GSTextInfo	*found = nil;
 
   used = (*cntImp)(_infoArray, cntSel);
@@ -514,10 +512,10 @@ _attributesAtIndexEffectiveRange(
 - (void) _sanity
 {
   GSTextInfo	*info;
-  unsigned	i;
-  unsigned	l = 0;
-  unsigned	len = [_textChars length];
-  unsigned	c = (*cntImp)(_infoArray, cntSel);
+  NSUInteger	i;
+  NSUInteger	l = 0;
+  NSUInteger	len = [_textChars length];
+  NSUInteger	c = (*cntImp)(_infoArray, cntSel);
 
   NSAssert(c > 0, NSInternalInconsistencyException);
   info = OBJECTAT(0);
@@ -625,7 +623,7 @@ _attributesAtIndexEffectiveRange(
 - (NSDictionary*) attributesAtIndex: (NSUInteger)index
 		     effectiveRange: (NSRange*)aRange
 {
-  unsigned dummy;
+  NSUInteger dummy;
 
   return _attributesAtIndexEffectiveRange(
     index, aRange, [_textChars length], _infoArray, &dummy);
@@ -643,21 +641,21 @@ _attributesAtIndexEffectiveRange(
  *	See also: - addAtributes: range: , - removeAttributes: range:
  */
 - (void) setAttributes: (NSDictionary*)attributes
-		 range: (NSRange)range
+                 range: (NSRange)range
 {
-  unsigned	tmpLength;
-  unsigned      arrayIndex = 0;
-  unsigned      arraySize;
+  NSUInteger	tmpLength;
+  NSUInteger      arrayIndex = 0;
+  NSUInteger      arraySize;
   NSRange	effectiveRange = NSMakeRange(0, NSNotFound);
   NSRange	originalRange = range;
-  unsigned	afterRangeLoc, beginRangeLoc;
+  NSUInteger	afterRangeLoc, beginRangeLoc;
   NSDictionary	*attrs;
   NSZone	*z = [self zone];
   GSTextInfo	*info;
 
   if (range.length == 0)
     {
-      NSWarnMLog(@"Attempt to set attribute for zero-length range", 0);
+      NSWarnMLog(@"Attempt to set attribute for zero-length range");
       return;
     }
   if (attributes == nil)
@@ -776,13 +774,13 @@ changeInLength: 0];
 - (void) replaceCharactersInRange: (NSRange)range
 		       withString: (NSString*)aString
 {
-  unsigned	tmpLength;
-  unsigned      arrayIndex = 0;
-  unsigned      arraySize;
+  NSUInteger	tmpLength;
+  NSUInteger      arrayIndex = 0;
+  NSUInteger      arraySize;
   NSRange	effectiveRange = NSMakeRange(0, NSNotFound);
   GSTextInfo	*info;
-  int		moveLocations;
-  unsigned	start;
+  NSInteger		moveLocations;
+  NSUInteger	start;
 
 SANITY();
   if (aString == nil)
@@ -838,7 +836,7 @@ SANITY();
       info = OBJECTAT(arrayIndex);
       if (info->loc < NSMaxRange(range))
 	{
-	  unsigned int	next = arrayIndex + 1;
+	  NSUInteger	next = arrayIndex + 1;
 
 	  while (next < arraySize)
 	    {
diff --git a/Source/GSThemeDrawing.m b/Source/GSThemeDrawing.m
index c096e96..36f1150 100644
--- a/Source/GSThemeDrawing.m
+++ b/Source/GSThemeDrawing.m
@@ -66,10 +66,10 @@
 #define COLOR_WELL_BORDER_WIDTH 7.0
 
 @interface NSTableView (Private)
-- (float *)_columnOrigins;
+- (CGFloat *)_columnOrigins;
 - (void) _willDisplayCell: (NSCell*)cell
-	   forTableColumn: (NSTableColumn *)tb
-		      row: (int)index;
+           forTableColumn: (NSTableColumn *)tb
+                      row: (NSInteger)index;
 @end
 
 @interface NSCell (Private)
@@ -102,7 +102,7 @@
 - (void) drawButton: (NSRect)frame 
                  in: (NSCell*)cell 
                view: (NSView*)view 
-              style: (int)style 
+              style: (NSInteger)style 
               state: (GSThemeControlState)state
 {
   GSDrawTiles	*tiles = nil;
@@ -227,7 +227,7 @@
 }
 
 - (GSThemeMargins) buttonMarginsForCell: (NSCell*)cell
-				  style: (int)style 
+				  style: (NSInteger)style 
 				  state: (GSThemeControlState)state
 {
   GSDrawTiles	*tiles = nil;
@@ -529,7 +529,7 @@
   return cell;
 }
 
-- (float) defaultScrollerWidth
+- (CGFloat) defaultScrollerWidth
 {
   return 18.0;
 }
@@ -562,7 +562,7 @@
 
 - (void) drawToolbarRect: (NSRect)aRect
                    frame: (NSRect)viewFrame
-              borderMask: (unsigned int)borderMask
+              borderMask: (NSUInteger)borderMask
 {
   // We draw the background
   [[self toolbarBackgroundColor] set];
@@ -1166,7 +1166,7 @@ static NSImage *spinningImages[MaxCount];
 - (void) drawProgressIndicator: (NSProgressIndicator*)progress
                     withBounds: (NSRect)bounds
                       withClip: (NSRect)rect
-                       atCount: (int)count
+                       atCount: (NSInteger)count
                       forValue: (double)val
 {
    NSRect r;
@@ -1340,12 +1340,12 @@ static NSImage *spinningImages[MaxCount];
 #define TITLE_HEIGHT 23.0
 #define RESIZE_HEIGHT 9.0
 
-- (float) titlebarHeight
+- (CGFloat) titlebarHeight
 {
   return TITLE_HEIGHT;
 }
 
-- (float) resizebarHeight
+- (CGFloat) resizebarHeight
 {
   return RESIZE_HEIGHT;
 }
@@ -1353,8 +1353,8 @@ static NSImage *spinningImages[MaxCount];
 static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
 
 - (void) drawTitleBarRect: (NSRect)titleBarRect 
-             forStyleMask: (unsigned int)styleMask
-                    state: (int)inputState 
+             forStyleMask: (NSUInteger)styleMask
+                    state: (NSInteger)inputState 
                  andTitle: (NSString*)title
 {
   static const NSRectEdge edges[4] = {NSMinXEdge, NSMaxYEdge,
@@ -1559,8 +1559,8 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
 
 - (void) drawWindowBorder: (NSRect)rect 
                 withFrame: (NSRect)frame 
-             forStyleMask: (unsigned int)styleMask
-                    state: (int)inputState 
+             forStyleMask: (NSUInteger)styleMask
+                    state: (NSInteger)inputState 
                  andTitle: (NSString*)title
 {
   if (styleMask & (NSTitledWindowMask | NSClosableWindowMask 
@@ -1572,9 +1572,9 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
                                 frame.size.width, TITLE_HEIGHT);
       if (NSIntersectsRect(rect, titleBarRect))
         [self drawTitleBarRect: titleBarRect 
-              forStyleMask: styleMask
-              state: inputState 
-              andTitle: title];
+                  forStyleMask: styleMask
+                         state: inputState 
+                      andTitle: title];
     }
 
   if (styleMask & NSResizableWindowMask)
@@ -1669,9 +1669,9 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
 	    selectedItem: (NSTabViewItem *)selected
 {
   NSGraphicsContext *ctxt = GSCurrentContext();
-  int howMany = [items count];
-  int i;
-  int previousState = 0;
+  NSInteger howMany = [items count];
+  NSInteger i;
+  NSInteger previousState = 0;
   NSRect bounds = [view bounds];
   NSRect aRect = bounds;
   NSColor *lineColour = [NSColor highlightColor];
@@ -2017,7 +2017,7 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
   // Draws titles
   if ([browser isTitled])
     {
-      int i;
+      NSInteger i;
 
       for (i = [browser firstVisibleColumn]; 
 	   i <= [browser lastVisibleColumn]; 
@@ -2053,8 +2053,8 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
   if (![browser separatesColumns])
     {
       NSPoint p1,p2;
-      int     i, visibleColumns;
-      float   hScrollerWidth = [browser hasHorizontalScroller] ? 
+      NSInteger i, visibleColumns;
+      CGFloat   hScrollerWidth = [browser hasHorizontalScroller] ? 
 	[NSScroller scrollerWidth] : 0;
       
       // Columns borders
@@ -2086,8 +2086,8 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
 	 isHorizontal: (BOOL)horizontal
 	    itemCells: (NSArray *)itemCells
 {
-  int         i = 0;
-  int         howMany = [itemCells count];
+  NSUInteger         i = 0;
+  NSUInteger         howMany = [itemCells count];
   NSMenuView *menuView = (NSMenuView *)view;
   NSRect      bounds = [view bounds];
 
@@ -2242,13 +2242,13 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
   NSTableHeaderView *tableHeaderView = (NSTableHeaderView *)view;
   NSTableView *tableView = [tableHeaderView tableView];
   NSArray *columns;
-  int firstColumnToDraw;
-  int lastColumnToDraw;
+  NSInteger firstColumnToDraw;
+  NSInteger lastColumnToDraw;
   NSRect drawingRect;
   NSTableColumn *column;
   NSTableColumn *highlightedTableColumn;
-  float width;
-  int i;
+  CGFloat width;
+  NSInteger i;
   NSCell *cell;
 
   if (tableView == nil)
@@ -2349,26 +2349,24 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
 {
   NSTableView *tableView = (NSTableView *)view;
   NSRect bounds = [view bounds];
-  float minX = NSMinX (aRect);
-  float maxX = NSMaxX (aRect);
-  float minY = NSMinY (aRect);
-  float maxY = NSMaxY (aRect);
-  int i;
-  float x_pos;
-  int startingColumn; 
-  int endingColumn;
-  int numberOfColumns = [tableView numberOfColumns];
+  CGFloat minX = NSMinX (aRect);
+  CGFloat maxX = NSMaxX (aRect);
+  CGFloat minY = NSMinY (aRect);
+  CGFloat maxY = NSMaxY (aRect);
+  NSInteger i;
+  CGFloat x_pos;
+  NSInteger startingColumn; 
+  NSInteger endingColumn;
+  NSInteger numberOfColumns = [tableView numberOfColumns];
   NSArray *tableColumns = [tableView tableColumns];
   NSGraphicsContext *ctxt = GSCurrentContext ();
-  float position = 0.0;
-  float *columnOrigins = [tableView _columnOrigins];
-  int startingRow    = [tableView rowAtPoint: 
-			       NSMakePoint (bounds.origin.x, minY)];
-  int endingRow      = [tableView rowAtPoint: 
-			       NSMakePoint (bounds.origin.x, maxY)];
+  CGFloat position = 0.0;
+  CGFloat *columnOrigins = [tableView _columnOrigins];
+  NSInteger startingRow    = [tableView rowAtPoint: NSMakePoint (bounds.origin.x, minY)];
+  NSInteger endingRow      = [tableView rowAtPoint: NSMakePoint (bounds.origin.x, maxY)];
   NSColor *gridColor = [tableView gridColor];
-  int rowHeight = [tableView rowHeight];
-  int numberOfRows = [tableView numberOfRows];
+  NSInteger rowHeight = [tableView rowHeight];
+  NSInteger numberOfRows = [tableView numberOfRows];
 
   /* Using columnAtPoint:, rowAtPoint: here calls them only twice 
      per drawn rect */
@@ -2451,12 +2449,12 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
 - (void) drawTableViewRect: (NSRect)aRect
 		    inView: (NSView *)view
 {
-  int startingRow;
-  int endingRow;
-  int i;
+  NSInteger startingRow;
+  NSInteger endingRow;
+  NSInteger i;
   NSTableView *tableView = (NSTableView *)view;
-  int numberOfRows = [tableView numberOfRows];
-  int numberOfColumns = [tableView numberOfColumns];
+  NSInteger numberOfRows = [tableView numberOfRows];
+  NSInteger numberOfColumns = [tableView numberOfColumns];
   BOOL drawsGrid = [tableView drawsGrid];
 
   /* Draw background */
@@ -2506,8 +2504,8 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
 			      selectingColumns: (BOOL)selectingColumns
 {
   NSTableView *tableView = (NSTableView *)view;
-  int numberOfRows = [tableView numberOfRows];
-  int numberOfColumns = [tableView numberOfColumns];
+  NSInteger numberOfRows = [tableView numberOfRows];
+  NSInteger numberOfColumns = [tableView numberOfColumns];
   NSIndexSet *selectedRows = [tableView selectedRowIndexes];
   NSIndexSet *selectedColumns = [tableView selectedColumnIndexes];
   NSColor *backgroundColor = [tableView backgroundColor];
@@ -2586,27 +2584,27 @@ static NSDictionary *titleTextAttributes[3] = {nil, nil, nil};
     }
 }
 
-- (void) drawTableViewRow: (int)rowIndex 
+- (void) drawTableViewRow: (NSInteger)rowIndex 
 		 clipRect: (NSRect)clipRect
 		   inView: (NSView *)view
 {
   NSTableView *tableView = (NSTableView *)view;
   // int numberOfRows = [tableView numberOfRows];
-  int numberOfColumns = [tableView numberOfColumns];
+  NSInteger numberOfColumns = [tableView numberOfColumns];
   // NSIndexSet *selectedRows = [tableView selectedRowIndexes];
   // NSColor *backgroundColor = [tableView backgroundColor];
   id dataSource = [tableView dataSource];
-  float *columnOrigins = [tableView _columnOrigins];
-  int editedRow = [tableView editedRow];
-  int editedColumn = [tableView editedColumn];
+  CGFloat *columnOrigins = [tableView _columnOrigins];
+  NSInteger editedRow = [tableView editedRow];
+  NSInteger editedColumn = [tableView editedColumn];
   NSArray *tableColumns = [tableView tableColumns];
-  int startingColumn; 
-  int endingColumn;
+  NSInteger startingColumn; 
+  NSInteger endingColumn;
   NSTableColumn *tb;
   NSRect drawingRect;
   NSCell *cell;
-  int i;
-  float x_pos;
+  NSInteger i;
+  CGFloat x_pos;
 
   if (dataSource == nil)
     {
diff --git a/Source/GSThemeMenu.m b/Source/GSThemeMenu.m
index b0da05e..1592f16 100644
--- a/Source/GSThemeMenu.m
+++ b/Source/GSThemeMenu.m
@@ -102,7 +102,7 @@
 	    withCellFrame: (NSRect)cellFrame
 	controlViewWindow: (NSWindow *)cvWin
 	    preferredEdge: (NSRectEdge)edge
-	     selectedItem: (int)selectedItem
+	     selectedItem: (NSInteger)selectedItem
 { 
   // Ask the MenuView to attach the menu to this rect
   [mr setWindowFrameForAttachingToRect: cellFrame
diff --git a/Source/GSThemePanel.m b/Source/GSThemePanel.m
index 5c5fa79..893a0dc 100644
--- a/Source/GSThemePanel.m
+++ b/Source/GSThemePanel.m
@@ -255,13 +255,13 @@ static GSThemePanel	*sharedPanel = nil;
   NSMutableSet		*set = AUTORELEASE([NSMutableSet new]);
 
   NSString		*selected = RETAIN([[matrix selectedCell] title]);
-  unsigned		existing = [[matrix cells] count];
+  NSUInteger		existing = [[matrix cells] count];
   NSFileManager		*mgr = [NSFileManager defaultManager];
   NSEnumerator		*enumerator;
   NSString		*path;
   NSString		*name;
   NSButtonCell		*cell;
-  unsigned		count = 0;
+  NSUInteger		count = 0;
 
   /* Ensure the first cell contains the default theme.
    */
diff --git a/Source/GSToolTips.m b/Source/GSToolTips.m
index 07398ca..e091f13 100644
--- a/Source/GSToolTips.m
+++ b/Source/GSToolTips.m
@@ -304,7 +304,7 @@ static BOOL		restoreMouseMoved;
   GSTrackingRect	*rect;
   unsigned		count = 0;
 
-  enumerator = [((NSViewPtr)view)->_tracking_rects objectEnumerator];
+  enumerator = [[view _trackingRects] objectEnumerator];
   while ((rect = [enumerator nextObject]) != nil)
     {
       if (rect->owner == self)
@@ -414,7 +414,7 @@ static BOOL		restoreMouseMoved;
 
   [self _endDisplay];
 
-  enumerator = [((NSViewPtr)view)->_tracking_rects objectEnumerator];
+  enumerator = [[view _trackingRects] objectEnumerator];
   while ((rect = [enumerator nextObject]) != nil)
     {
       if (rect->owner == self)
@@ -431,7 +431,7 @@ static BOOL		restoreMouseMoved;
 {
   NSUInteger idx = 0;
   NSMutableIndexSet *indexes = [NSMutableIndexSet new];
-  id tracking_rects = ((NSViewPtr)view)->_tracking_rects;
+  id tracking_rects = [view _trackingRects];
   FOR_IN(GSTrackingRect*, rect, tracking_rects)
     if ((rect->owner == self) && NSContainsRect(aRect, rect->rectangle))
       {
@@ -442,8 +442,8 @@ static BOOL		restoreMouseMoved;
       }
       idx++;
   END_FOR_IN(tracking_rects)
-  [((NSViewPtr)view)->_tracking_rects removeObjectsAtIndexes: indexes];
-  if ([((NSViewPtr)view)->_tracking_rects count] == 0)
+  [[view _trackingRects] removeObjectsAtIndexes: indexes];
+  if ([[view _trackingRects] count] == 0)
     {
       ((NSViewPtr)view)->_rFlags.has_trkrects = 0;
     }
@@ -455,7 +455,7 @@ static BOOL		restoreMouseMoved;
   NSEnumerator   	*enumerator;
   GSTrackingRect	*rect;
 
-  enumerator = [((NSViewPtr)view)->_tracking_rects objectEnumerator];
+  enumerator = [[view _trackingRects] objectEnumerator];
   while ((rect = [enumerator nextObject]) != nil)
     {
       if (rect->tag == tag && rect->owner == self)
@@ -500,7 +500,7 @@ static BOOL		restoreMouseMoved;
 	  NSEnumerator   	*enumerator;
 	  GSTrackingRect	*rect;
 
-	  enumerator = [((NSViewPtr)view)->_tracking_rects objectEnumerator];
+	  enumerator = [[view _trackingRects] objectEnumerator];
 	  while ((rect = [enumerator nextObject]) != nil)
 	    {
 	      if (rect->tag == toolTipTag && rect->owner == self)
@@ -517,7 +517,7 @@ static BOOL		restoreMouseMoved;
   NSEnumerator		*enumerator;
   GSTrackingRect	*rect;
 
-  enumerator = [((NSViewPtr)view)->_tracking_rects objectEnumerator];
+  enumerator = [[view _trackingRects] objectEnumerator];
   while ((rect = [enumerator nextObject]) != nil)
     {
       if (rect->tag == toolTipTag)
diff --git a/Source/GSToolbarView.m b/Source/GSToolbarView.m
index 8148ad7..11cad73 100644
--- a/Source/GSToolbarView.m
+++ b/Source/GSToolbarView.m
@@ -251,19 +251,19 @@ static NSInteger draggedItemIndex = NSNotFound;
 
 // Dragging related methods
 
-+ (int) draggedItemIndex
++ (NSInteger) draggedItemIndex
 {
   return draggedItemIndex;
 }
 
-+ (void) setDraggedItemIndex:(int)sourceIndex
++ (void) setDraggedItemIndex:(NSInteger)sourceIndex
 {
   draggedItemIndex = sourceIndex;
 }
 
-- (int) _insertionIndexAtPoint: (NSPoint)location
+- (NSInteger) _insertionIndexAtPoint: (NSPoint)location
 {
-  int index;
+  NSInteger index;
   NSArray *visibleBackViews = [self _visibleBackViews];
 
   location = [_clipView convertPoint:location fromView:nil];
@@ -275,7 +275,7 @@ static NSInteger draggedItemIndex = NSNotFound;
           NSRect itemRect = [[visibleBackViews objectAtIndex:index] frame];
           if (location.x < (itemRect.origin.x + (itemRect.size.width/2)))
             {
-              NSLog(@"AT location %d", index);
+              NSLog(@"AT location %ld", (long)index);
               return index;
             }
         }
@@ -299,7 +299,7 @@ static NSInteger draggedItemIndex = NSNotFound;
               itemRect = [[visibleBackViews objectAtIndex:index] frame];
               if (location.x < (itemRect.origin.x + (itemRect.size.width/2)))
                 {
-                  NSLog(@"To the LEFT of %d", index);
+                  NSLog(@"To the LEFT of %ld", (long)index);
                   return index;
                 }
             }
@@ -312,7 +312,7 @@ static NSInteger draggedItemIndex = NSNotFound;
               itemRect = [[visibleBackViews objectAtIndex:index] frame];
               if (location.x > (itemRect.origin.x + (itemRect.size.width/2)))
                 {
-                  NSLog(@"To the RIGHT of %d", index);
+                  NSLog(@"To the RIGHT of %ld", (long)index);
                   return index;
                 }
             }
@@ -327,7 +327,7 @@ static NSInteger draggedItemIndex = NSNotFound;
   NSString *identifier = [item itemIdentifier];
   NSToolbar *toolbar = [self toolbar];
   NSArray *allowedItemIdentifiers = [toolbar _allowedItemIdentifiers];
-  int newIndex; 
+  NSInteger newIndex; 
     
   // don't accept any dragging if the customization palette isn't running for this toolbar
   if (![toolbar customizationPaletteIsRunning] || ![allowedItemIdentifiers containsObject: identifier])
@@ -486,7 +486,7 @@ static NSInteger draggedItemIndex = NSNotFound;
 
 // Accessors
 
-- (unsigned int) borderMask
+- (NSUInteger) borderMask
 {
   return _borderMask;
 }
@@ -496,7 +496,7 @@ static NSInteger draggedItemIndex = NSNotFound;
   return _toolbar;
 }
 
-- (void) setBorderMask: (unsigned int)borderMask
+- (void) setBorderMask: (NSUInteger)borderMask
 {
   NSRect toolbarViewFrame = [self frame];
   NSRect rect = NSMakeRect(0, 0, toolbarViewFrame.size.width, 
@@ -597,7 +597,7 @@ static NSInteger draggedItemIndex = NSNotFound;
   int flexibleItemsCount = 0, maxWidthItemsCount = 0;
   CGFloat spacePerFlexItem, extraSpace = 0;
   CGFloat toolbarWidth = [self frame].size.width;
-  int i, n = [items count];
+  NSInteger i, n = [items count];
   NSMutableArray *visibleItems = [NSMutableArray array];
   static const int FlexItemWeight = 4; // non-space flexible item counts as much as 4 flexible spaces
   
@@ -762,7 +762,7 @@ static NSInteger draggedItemIndex = NSNotFound;
 - (void) _manageClipView
 {
   NSRect clipViewFrame = [_clipView frame];
-  int count = [[_toolbar items] count];
+  NSInteger count = [[_toolbar items] count];
   // Retrieve the back views which should be visible now that the resize
   // process has been taken in account
   NSArray *visibleBackViews = [self _visibleBackViews];
@@ -846,8 +846,8 @@ static NSInteger draggedItemIndex = NSNotFound;
 {
   NSArray *items = [_toolbar items];
   NSView *backView, *view;
-  int i, n = [items count];
-  float backViewsWidth = 0, toolbarWidth = [self frame].size.width;
+  NSInteger i, n = [items count];
+  CGFloat backViewsWidth = 0, toolbarWidth = [self frame].size.width;
 
   NSMutableArray *visibleBackViews = [NSMutableArray array];
   
diff --git a/Source/GSTypesetter.m b/Source/GSTypesetter.m
index f3afcea..4188371 100644
--- a/Source/GSTypesetter.m
+++ b/Source/GSTypesetter.m
@@ -36,7 +36,7 @@
 + (NSSize) printingAdjustmentsInLayoutManager: (GSLayoutManager *)layoutManager
 		 forNominallySpacedGlyphRange: (NSRange)glyphRange
 				 packedGlyphs: (const unsigned char *)glyphs
-					count: (unsigned)packedGlyphCount
+					count: (NSUInteger)packedGlyphCount
 {
   return NSMakeSize(0,0);
 }
@@ -58,10 +58,10 @@
 
 -(int) layoutGlyphsInLayoutManager: (GSLayoutManager *)layoutManager
 		   inTextContainer: (NSTextContainer *)textContainer
-	      startingAtGlyphIndex: (unsigned int)glyphIndex
+	      startingAtGlyphIndex: (NSUInteger)glyphIndex
 	  previousLineFragmentRect: (NSRect)previousLineFragRect
-		    nextGlyphIndex: (unsigned int *)nextGlyphIndex
-	     numberOfLineFragments: (unsigned int)howMany
+		    nextGlyphIndex: (NSUInteger *)nextGlyphIndex
+	     numberOfLineFragments: (NSUInteger)howMany
 {
   [self subclassResponsibility: _cmd];
   return 0;
diff --git a/Source/GSWindowDecorationView.m b/Source/GSWindowDecorationView.m
index 63c3754..897df1e 100644
--- a/Source/GSWindowDecorationView.m
+++ b/Source/GSWindowDecorationView.m
@@ -79,7 +79,7 @@ static inline NSRect RectWithSizeScaledByFactor(NSRect aRect, CGFloat factor)
 }
 
 
-+ (void) offsets: (float *)l : (float *)r : (float *)t : (float *)b
++ (void) offsets: (CGFloat *)l : (CGFloat *)r : (CGFloat *)t : (CGFloat *)b
     forStyleMask: (NSUInteger)style
 {
   [self subclassResponsibility: _cmd];
@@ -88,7 +88,7 @@ static inline NSRect RectWithSizeScaledByFactor(NSRect aRect, CGFloat factor)
 + (NSRect) contentRectForFrameRect: (NSRect)aRect
 			 styleMask: (NSUInteger)aStyle
 {
-  float t = 0.0, b = 0.0, l = 0.0, r = 0.0;
+  CGFloat t = 0.0, b = 0.0, l = 0.0, r = 0.0;
 
   [self offsets: &l : &r : &t : &b forStyleMask: aStyle];
   aRect.size.width -= l + r;
@@ -110,7 +110,7 @@ static inline NSRect RectWithSizeScaledByFactor(NSRect aRect, CGFloat factor)
 + (NSRect) frameRectForContentRect: (NSRect)aRect
 			 styleMask: (NSUInteger)aStyle
 {
-  float t = 0.0, b = 0.0, l = 0.0, r = 0.0;
+  CGFloat t = 0.0, b = 0.0, l = 0.0, r = 0.0;
 
   [self offsets: &l : &r : &t : &b forStyleMask: aStyle];
   if (0 == (aStyle & NSUnscaledWindowMask))
@@ -399,7 +399,7 @@ static inline NSRect RectWithSizeScaledByFactor(NSRect aRect, CGFloat factor)
   [self layout];
 }
 
-- (void) setInputState: (int)state
+- (void) setInputState: (NSInteger)state
 {
   inputState = state;
   if (windowNumber)
@@ -412,7 +412,7 @@ static inline NSRect RectWithSizeScaledByFactor(NSRect aRect, CGFloat factor)
     [GSServerForWindow(window) titlewindow: title : windowNumber];
 }
 
-- (void) setWindowNumber: (int)theWindowNumber
+- (void) setWindowNumber: (NSInteger)theWindowNumber
 {
   windowNumber = theWindowNumber;
   if (!windowNumber)
@@ -568,7 +568,7 @@ static inline NSRect RectWithSizeScaledByFactor(NSRect aRect, CGFloat factor)
 
 @implementation GSBackendWindowDecorationView
 
-+ (void) offsets: (float *)l : (float *)r : (float *)t : (float *)b
++ (void) offsets: (CGFloat *)l : (CGFloat *)r : (CGFloat *)t : (CGFloat *)b
     forStyleMask: (NSUInteger)style
 {
   [GSCurrentServer() styleoffsets: l : r : t : b : style];
diff --git a/Source/GSXibLoader.m b/Source/GSXibLoader.m
index 7926496..846f2ab 100644
--- a/Source/GSXibLoader.m
+++ b/Source/GSXibLoader.m
@@ -328,8 +328,8 @@
             { 	 
               const char *nam = [label cString]; 	 
               const char *type; 	 
-              unsigned int size; 	 
-              int offset; 	 
+              size_t	 size; 	 
+              ptrdiff_t offset; 	 
               
               /* 	 
                * Use the GNUstep additional function to set the instance 	 
@@ -698,15 +698,15 @@
   return [[objectRecords orderedObjects] objectEnumerator];
 }
 
-- (NSDictionary*) propertiesForObjectID: (int)objectID
+- (NSDictionary*) propertiesForObjectID: (NSInteger)objectID
 {
   NSEnumerator *en;
   NSString *idString;
   NSString *key;
   NSMutableDictionary *properties;
-  int idLength;
+  NSUInteger idLength;
 
-  idString = [NSString stringWithFormat: @"%d.", objectID];
+  idString = [NSString stringWithFormat: @"%ld.", (long)objectID];
   idLength = [idString length];
   properties = [[NSMutableDictionary alloc] init];
   en = [flattenedProperties keyEnumerator];
@@ -1093,8 +1093,8 @@
               NSArray *xmlObjs = [[flatProps objectAtIndex:0] nodesForXPath:@"//object[@key=\"flattenedProperties\"]/object[@key=\"dict.values\"]/*" error:NULL];
               if ([xmlKeys count] != [xmlObjs count])
                 {
-                  NSLog(@"%s:keys to objs count mismatch - keys: %d objs: %d\n", __PRETTY_FUNCTION__,
-                        (int)[xmlKeys count], (int)[xmlObjs count]);
+                  NSLog(@"%s:keys to objs count mismatch - keys: %ld objs: %ld\n", __PRETTY_FUNCTION__,
+                        (long)[xmlKeys count], (long)[xmlObjs count]);
                 }
               else
                 {
@@ -1693,15 +1693,15 @@ didStartElement: (NSString*)elementName
 - (id) _decodeArrayOfObjectsForElement: (GSXibElement*)element
 {
   NSArray *values = [element values];
-  int max = [values count];
+  NSUInteger max = [values count];
   id list[max];
-  int i;
+  NSUInteger i;
 
   for (i = 0; i < max; i++)
     {
       list[i] = [self objectForXib: [values objectAtIndex: i]];
       if (list[i] == nil)
-        NSLog(@"No object for %@ at index %d", [values objectAtIndex: i], i);
+        NSLog(@"No object for %@ at index %ld", [values objectAtIndex: i], (long)i);
     }
 
   return [NSArray arrayWithObjects: list count: max];
@@ -1868,7 +1868,7 @@ didStartElement: (NSString*)elementName
 	{
 	  long long l = [o longLongValue];
 
-	  return l;
+	  return (int)l;
 	}
       else
 	{
@@ -1891,7 +1891,7 @@ didStartElement: (NSString*)elementName
 	{
 	  long long l = [o longLongValue];
 
-	  return l;
+	  return (int32_t)l;
 	}
       else
 	{
diff --git a/Source/NSAnimation.m b/Source/NSAnimation.m
index 2d43193..30f52d4 100644
--- a/Source/NSAnimation.m
+++ b/Source/NSAnimation.m
@@ -164,7 +164,7 @@ _gs_animationValueForCurve(_NSAnimationCurveDesc *c, float t, float t0)
 - (NSAnimationProgress) _gs_curveShift;
 @end
 
-NSComparisonResult
+static NSComparisonResult
 nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress second)
 {
   float diff = first - second;
@@ -232,13 +232,13 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
     { // First mark
       GSIArrayAddItem (_progressMarks,progress);
       NSDebugMLLog (@"NSAnimationMark",
-                    @"Insert 1st mark for %f (next:#%d)",
-                    progress, _nextMark);
+                    @"Insert 1st mark for %f (next:#%lu)",
+                    progress, (unsigned long)_nextMark);
       _nextMark = (progress >= [self currentProgress])? 0 : 1;
     }
   else 
     {
-      unsigned index;
+      NSUInteger index;
       index = GSIArrayInsertionPosition (_progressMarks,
                                          progress,
                                          &nsanimation_progressMarkSorter);
@@ -248,8 +248,8 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
           _nextMark++;
       GSIArrayInsertItem (_progressMarks,progress,index);
       NSDebugMLLog (@"NSAnimationMark",
-                    @"Insert mark #%d/%d for %f (next:#%d)",
-                    index,GSIArrayCount(_progressMarks),progress,_nextMark);
+                    @"Insert mark #%lu/%lu for %f (next:#%lu)",
+                    (unsigned long)index, (unsigned long)GSIArrayCount(_progressMarks), progress, (unsigned long)_nextMark);
     }
   _isCachedProgressMarkNumbersValid = NO;
 
@@ -492,7 +492,7 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
 - (NSArray*) progressMarks
 {
   NSNumber **cpmn;
-  unsigned count;
+  NSUInteger count;
   _NSANIMATION_LOCKING_SETUP;
 
   _NSANIMATION_LOCK;
@@ -534,7 +534,7 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
 
 - (void) removeProgressMark: (NSAnimationProgress)progress
 {
-  unsigned index;
+  NSUInteger index;
   _NSANIMATION_LOCKING_SETUP;
 
   _NSANIMATION_LOCK;
@@ -547,8 +547,8 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
       GSIArrayRemoveItemAtIndex(_progressMarks,index);
       _isCachedProgressMarkNumbersValid = NO;
       if (_nextMark > index) _nextMark--;
-      NSDebugMLLog(@"NSAnimationMark",@"Remove mark #%d for (next:#%d)",
-                   index, progress, _nextMark);
+      NSDebugMLLog(@"NSAnimationMark",@"Remove mark #%lu for %f (next:#%lu)",
+                   (unsigned long)index, progress, (unsigned long)_nextMark);
     }
   else
     NSWarnMLog(@"Unexistent progress mark");
@@ -671,8 +671,8 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
       _nextMark = GSIArrayInsertionPosition (_progressMarks,progress,&nsanimation_progressMarkSorter);
 
       if (_nextMark < GSIArrayCount(_progressMarks))
-        NSDebugMLLog(@"NSAnimationMark",@"Next mark #%d for %f",
-                     _nextMark, GSIArrayItemAtIndex(_progressMarks,_nextMark));
+        NSDebugMLLog(@"NSAnimationMark",@"Next mark #%lu for %f",
+                     (unsigned long)_nextMark, GSIArrayItemAtIndex(_progressMarks,_nextMark));
     }
 
   NSDebugMLLog(@"NSAnimation",@"Progress = %f", progress);
@@ -733,7 +733,7 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
   _nextMark = 0;
   if (marks != nil)
     {
-      unsigned i, count = [marks count];
+      NSUInteger i, count = [marks count];
 
       for (i = 0; i < count; i++)
         [self addProgressMark: [(NSNumber*)[marks objectAtIndex:i] floatValue]];
@@ -797,12 +797,12 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
         [delegate methodForSelector: @selector (animationShouldStart:)]
         : NULL;
       NSDebugMLLog(@"NSAnimationDelegate",
-                   @"Delegation methods : %x %x %x %x %x",
-                   _delegate_animationDidReachProgressMark,
-                   _delegate_animationValueForProgress,
-                   _delegate_animationDidEnd,
-                   _delegate_animationDidStop,
-                   _delegate_animationShouldStart);
+                   @"Delegation methods : %lx %lx %lx %lx %lx",
+                   (unsigned long)_delegate_animationDidReachProgressMark,
+                   (unsigned long)_delegate_animationValueForProgress,
+                   (unsigned long)_delegate_animationDidEnd,
+                   (unsigned long)_delegate_animationDidStop,
+                   (unsigned long)_delegate_animationShouldStart);
       _currentDelegate = _delegate;
     }
   else
@@ -1026,7 +1026,7 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
   { // have some marks been passed ?
     // NOTE: the case where progress == markedProgress is
     //       treated in [-setCurrentProgress]
-    unsigned count = GSIArrayCount (_progressMarks);
+    NSUInteger count = GSIArrayCount (_progressMarks);
     NSAnimationProgress markedProgress;
     while ( _nextMark < count
             && progress > (markedProgress = GSIArrayItemAtIndex (_progressMarks,_nextMark)) ) // is a mark reached ?
@@ -1143,8 +1143,8 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
   _NSANIMATION_UNLOCK;
 
   NSDebugMLLog(@"NSAnimationMark",
-               @"Next mark #%d for %f",
-               _nextMark, GSIArrayItemAtIndex(_progressMarks, _nextMark - 1));
+               @"Next mark #%lu for %f",
+               (unsigned long)_nextMark, GSIArrayItemAtIndex(_progressMarks, _nextMark - 1));
 }
 
 - (void) _gs_startThreadedAnimation
@@ -1479,7 +1479,7 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
   _NSANIMATION_LOCK;
   if (_viewAnimationDesc == nil)
     {
-      unsigned int i, c;
+      NSUInteger i, c;
 
       c = [_viewAnimations count];
       _viewAnimationDesc = [[NSMutableArray alloc] initWithCapacity: c];
@@ -1510,7 +1510,7 @@ nsanimation_progressMarkSorter(NSAnimationProgress first, NSAnimationProgress se
 - (void) _gs_updateViewsWithValue: (NSNumber*) value
 {
   // Runs in main thread : must not call any NSAnimation method to avoid a deadlock
-  unsigned int i, c;
+  NSUInteger i, c;
   float v;
 
   v = [value floatValue];
diff --git a/Source/NSApplication.m b/Source/NSApplication.m
index 5cb5c8b..26e8a39 100644
--- a/Source/NSApplication.m
+++ b/Source/NSApplication.m
@@ -263,7 +263,7 @@ gnustep_backend_bundle(NSString *bundleName)
   return path;
 }
 
-BOOL
+static BOOL
 initialize_gnustep_backend(void)
 {
   static int first = 1;
@@ -334,7 +334,7 @@ initialize_gnustep_backend(void)
   return YES;
 }
 
-void
+static void
 gsapp_user_bundles(void)
 {
   NSUserDefaults *defs=[NSUserDefaults standardUserDefaults];
@@ -343,7 +343,7 @@ gsapp_user_bundles(void)
   c = [a count];
   if (a == nil || c == 0)
     return;
-  NSLog(@"Loading %d user defined AppKit bundles", (int)c);
+  NSLog(@"Loading %ld user defined AppKit bundles", (long)c);
   for (i = 0; i < c; i++)
     {
       NSBundle *b = [NSBundle bundleWithPath: [a objectAtIndex: i]];
@@ -1976,8 +1976,8 @@ See -runModalForWindow:
                relativeToWindow: (NSWindow *)docWindow
 {
   // FIXME
-  [theWindow orderWindow: NSWindowAbove
-	     relativeTo: [docWindow windowNumber]];
+    [theWindow orderWindow: NSWindowAbove
+                relativeTo: [docWindow windowNumber]];
   return [self runModalForWindow: theWindow];
 }
 
@@ -2130,7 +2130,7 @@ See -runModalForWindow:
  * up to lastEvent.
  */
 - (void) discardEventsMatchingMask: (NSUInteger)mask
-		       beforeEvent: (NSEvent *)lastEvent
+                       beforeEvent: (NSEvent *)lastEvent
 {
   DPSDiscardEvents(GSCurrentServer(), mask, lastEvent);
 }
@@ -2142,9 +2142,9 @@ See -runModalForWindow:
  * See (EventType) for the list of masks.
  */
 - (NSEvent*) nextEventMatchingMask: (NSUInteger)mask
-			 untilDate: (NSDate*)expiration
-			    inMode: (NSString*)mode
-			   dequeue: (BOOL)flag
+                         untilDate: (NSDate *)expiration
+                            inMode: (NSString *)mode
+                           dequeue: (BOOL)flag
 {
   NSEvent	*event;
 
diff --git a/Source/NSBezierPath.m b/Source/NSBezierPath.m
index 5b9d8dc..eb4ec4f 100644
--- a/Source/NSBezierPath.m
+++ b/Source/NSBezierPath.m
@@ -1791,32 +1791,32 @@ static int winding_curve(double_point from, double_point to, double_point c1,
     }
   else
     {
-      int i, count;
-      float f;
+      NSInteger i, count;
+      CGFloat f;
       
       f = [self lineWidth];
-      [aCoder encodeValueOfObjCType: @encode(float) at: &f];
+      [aCoder encodeValueOfObjCType: @encode(CGFloat) at: &f];
       i = [self lineCapStyle];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &i];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &i];
       i = [self lineJoinStyle];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &i];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &i];
       i = [self windingRule];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &i];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &i];
       [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_cachesBezierPath];
 
       // version 2
       f = [self flatness];
-      [aCoder encodeValueOfObjCType: @encode(float) at: &f];
+      [aCoder encodeValueOfObjCType: @encode(CGFloat) at: &f];
       f = [self miterLimit];
-      [aCoder encodeValueOfObjCType: @encode(float) at: &f];
+      [aCoder encodeValueOfObjCType: @encode(CGFloat) at: &f];
       
       count = [self elementCount];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &count];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &count];
       
       for (i = 0; i < count; i++) 
         {
           type = [self elementAtIndex: i associatedPoints: pts];
-          [aCoder encodeValueOfObjCType: @encode(int) at: &type];
+          [aCoder encodeValueOfObjCType: @encode(NSBezierPathElement) at: &type];
           switch(type) 
             {
             case NSMoveToBezierPathElement:
@@ -1885,7 +1885,7 @@ static int winding_curve(double_point from, double_point to, double_point c1,
 	  NSUInteger length;
 	  const uint8_t *data;
           NSData *d;
-          unsigned int cursor = 0;
+          NSUInteger cursor = 0;
 
           data = [aCoder decodeBytesForKey: @"NSSegments"
                               returnedLength: &length]; 
@@ -2008,33 +2008,33 @@ static int winding_curve(double_point from, double_point to, double_point c1,
     {
       NSBezierPathElement type;
       NSPoint pts[3];
-      int i, count;
-      float f;
-      int version = [aCoder versionForClassName: @"NSBezierPath"];
+      NSInteger i, count;
+      CGFloat f;
+      NSInteger version = [aCoder versionForClassName: @"NSBezierPath"];
       
-      [aCoder decodeValueOfObjCType: @encode(float) at: &f];
+      [aCoder decodeValueOfObjCType: @encode(CGFloat) at: &f];
       [self setLineWidth: f];
-      [aCoder decodeValueOfObjCType: @encode(int) at: &i];
-      [self setLineCapStyle: i];
-      [aCoder decodeValueOfObjCType: @encode(int) at: &i];
-      [self setLineJoinStyle: i];
-      [aCoder decodeValueOfObjCType: @encode(int) at: &i];
-      [self setWindingRule: i];
+      [aCoder decodeValueOfObjCType: @encode(NSInteger) at: &i];
+      [self setLineCapStyle: (NSLineCapStyle)i];
+      [aCoder decodeValueOfObjCType: @encode(NSInteger) at: &i];
+      [self setLineJoinStyle: (NSLineJoinStyle)i];
+      [aCoder decodeValueOfObjCType: @encode(NSInteger) at: &i];
+      [self setWindingRule: (NSWindingRule)i];
       [aCoder decodeValueOfObjCType: @encode(BOOL) at: &_cachesBezierPath];
 
       if (version >= 2)
         {
-          [aCoder decodeValueOfObjCType: @encode(float) at: &f];
+          [aCoder decodeValueOfObjCType: @encode(CGFloat) at: &f];
           [self setFlatness: f];
-          [aCoder decodeValueOfObjCType: @encode(float) at: &f];
+          [aCoder decodeValueOfObjCType: @encode(CGFloat) at: &f];
           [self setMiterLimit: f];
         }
 
-      [aCoder decodeValueOfObjCType: @encode(int) at: &count];
+      [aCoder decodeValueOfObjCType: @encode(NSInteger) at: &count];
       
       for (i = 0; i < count; i++) 
         {
-          [aCoder decodeValueOfObjCType: @encode(int) at: &type];
+          [aCoder decodeValueOfObjCType: @encode(NSBezierPathElement) at: &type];
           switch(type) 
             {
             case NSMoveToBezierPathElement:
@@ -2116,7 +2116,7 @@ static NSPoint point_on_curve(double t, NSPoint a, NSPoint b, NSPoint c,
   NSPoint pts[3];
   NSPoint min, max;   /* Path bounding box. */
   NSPoint cmin, cmax; /* Control-point bounding box. */
-  int i, count, num_curves;
+  NSInteger i, count, num_curves;
   
   count = [self elementCount];
   if (!count)
diff --git a/Source/NSBitmapImageRep+GIF.m b/Source/NSBitmapImageRep+GIF.m
index a4eaa2c..f0597b2 100644
--- a/Source/NSBitmapImageRep+GIF.m
+++ b/Source/NSBitmapImageRep+GIF.m
@@ -105,8 +105,9 @@ static int gs_gif_input(GifFileType *file, GifByteType *buffer, int len)
    allocated outside this function. */
 static void gs_gif_init_input_source(gs_gif_input_src *src, NSData *data)
 {
+  NSCParameterAssert([data length] < UINT_MAX);
   src->data   = [data bytes];
-  src->length = [data length];
+  src->length = (unsigned)[data length];
   src->pos    = 0;
 }
 
diff --git a/Source/NSBitmapImageRep+ICNS.m b/Source/NSBitmapImageRep+ICNS.m
index e972e79..e48bfdd 100644
--- a/Source/NSBitmapImageRep+ICNS.m
+++ b/Source/NSBitmapImageRep+ICNS.m
@@ -226,12 +226,12 @@ static int icns_get_element_from_family(icns_family_t *iconFamily,
   return 1;
 }
 
-static int icns_import_family_data(int size, icns_byte_t *bytes, 
+static int icns_import_family_data(NSUInteger size, icns_byte_t *bytes, 
                                    icns_family_t **iconFamily)
 {
   icns_element_t *element = NULL;
   icns_family_t *family;
-  unsigned long el_size;
+  icns_size_t el_size;
   icns_byte_t *data;
   icns_byte_t *end;
 
@@ -544,14 +544,14 @@ typedef struct pixel_t
 
 - (id) _initBitmapFromICNS: (NSData *)imageData
 {
-  int                     error = 0;
-  int                     size = [imageData length];
-  icns_byte_t            *bytes = (icns_byte_t *)[imageData bytes];
-  icns_family_t          *iconFamily = NULL;
-  unsigned long           dataOffset = 0;
-  icns_byte_t            *data = NULL;
-  icns_type_t             typeStr = ICNS_NULL_TYPE;
-  icns_image_t            iconImage;
+  NSInteger         error = 0;
+  NSUInteger        size = [imageData length];
+  icns_byte_t       *bytes = (icns_byte_t *)[imageData bytes];
+  icns_family_t     *iconFamily = NULL;
+  unsigned long     dataOffset = 0;
+  icns_byte_t       *data = NULL;
+  icns_type_t       typeStr = ICNS_NULL_TYPE;
+  icns_image_t      iconImage;
 
   error = icns_import_family_data(size, bytes, &iconFamily);
   if (error != ICNS_STATUS_OK)
@@ -609,11 +609,11 @@ typedef struct pixel_t
 + (NSArray*) _imageRepsWithICNSData: (NSData *)imageData
 {
   NSMutableArray *array = [NSMutableArray array];
-  int             error = 0;
-  int             size = [imageData length];
+  NSInteger      error = 0;
+  NSUInteger     size = [imageData length];
   icns_byte_t    *bytes = (icns_byte_t *)[imageData bytes];
   icns_family_t  *iconFamily = NULL;
-  unsigned long   dataOffset = 0;
+  unsigned long  dataOffset = 0;
   icns_byte_t    *data = NULL;
 
   error = icns_import_family_data(size, bytes, &iconFamily);
diff --git a/Source/NSBitmapImageRep+JPEG.m b/Source/NSBitmapImageRep+JPEG.m
index 0a4e1b7..f7b3467 100644
--- a/Source/NSBitmapImageRep+JPEG.m
+++ b/Source/NSBitmapImageRep+JPEG.m
@@ -182,6 +182,7 @@ static void gs_term_source(j_decompress_ptr cinfo)
  * has to be called.  */
 static void gs_jpeg_memory_src_create(j_decompress_ptr cinfo, NSData *data)
 {
+  NSCParameterAssert([data length] < UINT_MAX);
   gs_jpeg_source_ptr src;
   
   cinfo->src = (struct jpeg_source_mgr *)malloc(sizeof(gs_jpeg_source_mgr));
@@ -196,7 +197,7 @@ static void gs_jpeg_memory_src_create(j_decompress_ptr cinfo, NSData *data)
   src->parent.next_input_byte = NULL; /* until buffer loaded */
 
   src->data = (const unsigned char *)[data bytes];
-  src->length = [data length];
+  src->length = (unsigned)[data length];
 }
 
 
@@ -555,7 +556,7 @@ static void gs_jpeg_memory_dest_destroy (j_compress_ptr cinfo)
   memset((void*)&cinfo, 0, sizeof(struct jpeg_compress_struct));
 
   imageSource = [self bitmapData];
-  sPP = [self samplesPerPixel];
+  sPP = (int)[self samplesPerPixel];
   width = [self size].width;
   height = [self size].height;
   row_stride = width * sPP;
diff --git a/Source/NSBitmapImageRep+PNG.m b/Source/NSBitmapImageRep+PNG.m
index a194ec3..f66d375 100644
--- a/Source/NSBitmapImageRep+PNG.m
+++ b/Source/NSBitmapImageRep+PNG.m
@@ -97,10 +97,10 @@ static void reader_func(png_structp png_struct, png_bytep data,
   png_structp png_struct;
   png_infop png_info, png_end_info;
 
-  int width,height;
+  png_uint_32 width,height;
   unsigned char *buf;
-  int bytes_per_row;
-  int type,channels,depth;
+  png_size_t bytes_per_row;
+  png_byte type,channels,depth;
 
   BOOL alpha;
   int bpp;
@@ -301,9 +301,9 @@ static void writer_func(png_structp png_struct, png_bytep data,
   png_structp png_struct;
   png_infop png_info;
 
-  int width, height, depth;
+  NSInteger width, height, depth;
   unsigned char * bitmapData;
-  int bytes_per_row;
+  NSInteger bytes_per_row;
   NSString * colorspace;
   NSMutableData * PNGRep = nil;
   int type = -1;	// illegal value
@@ -365,9 +365,8 @@ static void writer_func(png_structp png_struct, png_bytep data,
   png_info_init_3(&png_info, png_sizeof(png_info));
 #endif
   png_set_write_fn(png_struct, PNGRep, writer_func, NULL);
-  png_set_IHDR(png_struct, png_info, width, height, depth,
-   type, interlace, PNG_COMPRESSION_TYPE_BASE,
-   PNG_FILTER_TYPE_BASE);
+  png_set_IHDR(png_struct, png_info, (png_uint_32)width, (png_uint_32)height,
+               (int)depth, type, interlace, PNG_COMPRESSION_TYPE_BASE, PNG_FILTER_TYPE_BASE);
 
   if (gammaNumber)
   {
diff --git a/Source/NSBitmapImageRep+PNM.m b/Source/NSBitmapImageRep+PNM.m
index 9e4708f..2d1b889 100644
--- a/Source/NSBitmapImageRep+PNM.m
+++ b/Source/NSBitmapImageRep+PNM.m
@@ -79,7 +79,7 @@
   char ptype;
   char buffer[256];
   unsigned char *pchar;
-  unsigned length;
+  NSUInteger length;
   id colorspace;
   const char *ptr;
   const char *bytes = [imageData bytes];
diff --git a/Source/NSBitmapImageRep.m b/Source/NSBitmapImageRep.m
index ade9039..f4e9337 100644
--- a/Source/NSBitmapImageRep.m
+++ b/Source/NSBitmapImageRep.m
@@ -351,14 +351,14 @@
       RELEASE(self);
       return nil;
     }
-  bps = [[dict objectForKey: @"BitsPerSample"] intValue];
+  bps = [[dict objectForKey: @"BitsPerSample"] integerValue];
   if (bps == 0)
     bps = 8;
-  spp = [[dict objectForKey: @"SamplesPerPixel"] intValue];
-  alpha = [[dict objectForKey: @"HasAlpha"] intValue];
+  spp = [[dict objectForKey: @"SamplesPerPixel"] integerValue];
+  alpha = [[dict objectForKey: @"HasAlpha"] integerValue];
   size = [[dict objectForKey: @"Size"] sizeValue];
   space = [dict objectForKey: @"ColorSpace"];
-  format = [[dict objectForKey: @"BitmapFormat"] intValue];
+  format = [[dict objectForKey: @"BitmapFormat"] integerValue];
   planes[0] = (unsigned char *)[_imageData bytes];
   self = [self initWithBitmapDataPlanes: planes
                pixelsWide: size.width
@@ -523,7 +523,7 @@
     {
       unsigned char *bits;
       NSUInteger length;
-      unsigned int i;
+      NSUInteger i;
 
       // No image data was given, allocate it.
       length = (NSUInteger)((_isPlanar) ? _numColors : 1) * _bytesPerRow * 
@@ -548,11 +548,11 @@
 
   if (alpha)
     {
-      unsigned char	*bData = (unsigned char*)[self bitmapData];
-      BOOL		allOpaque = YES;
-      unsigned		offset = _numColors - 1;
-      unsigned		limit = _size.height * _size.width;
-      unsigned		i;
+      unsigned char     *bData = (unsigned char*)[self bitmapData];
+      BOOL              allOpaque = YES;
+      NSUInteger        offset = _numColors - 1;
+      NSUInteger        limit = _size.height * _size.width;
+      NSUInteger        i;
 
       for (i = 0; i < limit; i++)
 	{
@@ -578,9 +578,9 @@
 }
 
 - (void)colorizeByMappingGray:(CGFloat)midPoint 
-		      toColor:(NSColor *)midPointColor 
-		 blackMapping:(NSColor *)shadowColor
-		 whiteMapping:(NSColor *)lightColor
+                      toColor:(NSColor *)midPointColor 
+                 blackMapping:(NSColor *)shadowColor
+                 whiteMapping:(NSColor *)lightColor
 {
   // TODO
 }
@@ -715,11 +715,11 @@
  * the value to cross a byte boundary, though it is unclear as to whether
  * this is strictly necessary for OpenStep tiffs.
  */
-static unsigned int
-_get_bit_value(unsigned char *base, long msb_off, int bit_width)
+static NSUInteger
+_get_bit_value(unsigned char *base, long msb_off, NSInteger bit_width)
 {
-  long lsb_off, byte1, byte2;
-  int shift, value;
+  long lsb_off, byte1, byte2, shift;
+  NSUInteger value;
 
   /*
    * Firstly we calculate the position of the msb and lsb in terms
@@ -806,12 +806,12 @@ _get_bit_value(unsigned char *base, long msb_off, int bit_width)
 }
 
 static void
-_set_bit_value(unsigned char *base, long msb_off, int bit_width, 
-               unsigned int value)
+_set_bit_value(unsigned char *base, long msb_off, NSInteger bit_width, 
+               NSUInteger value)
 {
   long lsb_off, byte1, byte2;
-  int shift;
-  int all;
+  long shift;
+  NSInteger all;
 
   /*
    * Firstly we calculate the position of the msb and lsb in terms
@@ -1455,15 +1455,16 @@ _set_bit_value(unsigned char *base, long msb_off, int bit_width,
 - (NSData*) TIFFRepresentationUsingCompression: (NSTIFFCompression)type
 					factor: (float)factor
 {
+  NSAssert(_pixelsWide < UINT32_MAX && _pixelsHigh < UINT32_MAX, @"Image to large");
   NSTiffInfo	info;
   TIFF		*image;
   char		*bytes = 0;
-  long		length = 0;
+  NSUInteger    length = 0;
 
   info.imageNumber = 0;
   info.subfileType = 255;
-  info.width = _pixelsWide;
-  info.height = _pixelsHigh;
+  info.width = (uint32_t)_pixelsWide;
+  info.height = (uint32_t)_pixelsHigh;
   info.bitsPerSample = _bitsPerSample;
   info.samplesPerPixel = _numColors;
 
@@ -1770,7 +1771,7 @@ _set_bit_value(unsigned char *base, long msb_off, int bit_width,
   else
     {
       unsigned char *bits;
-      unsigned int i;
+      NSUInteger i;
 
       bits = (unsigned char *)[copy->_imageData bytes];
       copy->_imagePlanes[0] = bits;
diff --git a/Source/NSBox.m b/Source/NSBox.m
index f0eec21..6daf57f 100644
--- a/Source/NSBox.m
+++ b/Source/NSBox.m
@@ -586,8 +586,8 @@
     {
       [aCoder encodeObject: [self contentView] forKey: @"NSContentView"];
       [aCoder encodeObject: _cell forKey: @"NSTitleCell"];
-      [aCoder encodeInt: [self borderType] forKey: @"NSBorderType"];
-      [aCoder encodeInt: [self boxType] forKey: @"NSBoxType"];
+      [aCoder encodeInteger: [self borderType] forKey: @"NSBorderType"];
+      [aCoder encodeInteger: [self boxType] forKey: @"NSBoxType"];
       [aCoder encodeInt: [self titlePosition] forKey: @"NSTitlePosition"];
       [aCoder encodeBool: _transparent forKey: @"NSFullyTransparent"];
       [aCoder encodeSize: [self contentViewMargins] forKey: @"NSOffsets"];
@@ -596,7 +596,7 @@
     {
       [aCoder encodeObject: _cell];
       [aCoder encodeSize: _offsets];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &_border_type];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &_border_type];
       [aCoder encodeValueOfObjCType: @encode(int) at: &_title_position];
       // NB: the content view is our (only) subview, so it is already 
       // encoded by NSView.
@@ -611,13 +611,13 @@
     {
       if ([aDecoder containsValueForKey: @"NSBoxType"])
         {
-          int boxType = [aDecoder decodeIntForKey: @"NSBoxType"];
+          NSUInteger boxType = [aDecoder decodeIntegerForKey: @"NSBoxType"];
           
           [self setBoxType: boxType];
         }
       if ([aDecoder containsValueForKey: @"NSBorderType"])
         {
-          NSBorderType borderType = [aDecoder decodeIntForKey: @"NSBorderType"];
+          NSBorderType borderType = [aDecoder decodeIntegerForKey: @"NSBorderType"];
 
           [self setBorderType: borderType];
         }
diff --git a/Source/NSBrowser.m b/Source/NSBrowser.m
index 29894be..1c19530 100644
--- a/Source/NSBrowser.m
+++ b/Source/NSBrowser.m
@@ -2588,7 +2588,7 @@ static NSTextFieldCell *titleCell;
   [super encodeWithCoder: aCoder];
   if ([aCoder allowsKeyedCoding])
     {
-      long flags = 0;
+      int32_t flags = 0;
 
       //
       // NOTE: The browserview under GS uses an NSMatrix subview, the one under
@@ -2609,12 +2609,12 @@ static NSTextFieldCell *titleCell;
       flags |= [self reusesColumns] ? 0x20000000 : 0;
       flags |= [self allowsBranchSelection] ? 0x40000000 : 0;
       flags |= [self allowsMultipleSelection] ? 0x80000000 : 0;
-      [aCoder encodeInt: flags forKey: @"NSBrFlags"];
+      [aCoder encodeInt32: flags forKey: @"NSBrFlags"];
 
-      [aCoder encodeInt: _maxVisibleColumns forKey: @"NSNumberOfVisibleColumns"];
-      [aCoder encodeInt: _minColumnWidth forKey: @"NSMinColumnWidth"];
+      [aCoder encodeInteger: _maxVisibleColumns forKey: @"NSNumberOfVisibleColumns"];
+      [aCoder encodeFloat: _minColumnWidth forKey: @"NSMinColumnWidth"];
 
-      [aCoder encodeInt: _columnResizing forKey: @"NSColumnResizingType"];
+      [aCoder encodeInteger: _columnResizing forKey: @"NSColumnResizingType"];
       //[aCoder encodeInt: prefWidth forKey: @"NSPreferedColumnWidth"];
     }
   else
@@ -2629,7 +2629,7 @@ static NSTextFieldCell *titleCell;
       [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_allowsBranchSelection];
       [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_allowsEmptySelection];
       [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_allowsMultipleSelection];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &_maxVisibleColumns];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &_maxVisibleColumns];
       [aCoder encodeValueOfObjCType: @encode(CGFloat) at: &_minColumnWidth];
       [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_reusesColumns];
       [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_separatesColumns];
@@ -2658,9 +2658,9 @@ static NSTextFieldCell *titleCell;
       // Just encode the number of columns and the first visible
       // and rebuild the browser columns on the decoding side
       {
-        int colCount = [_browserColumns count];  
-        [aCoder encodeValueOfObjCType: @encode(int) at: &colCount];
-        [aCoder encodeValueOfObjCType: @encode(int) at: &_firstVisibleColumn];
+        NSInteger colCount = [_browserColumns count];  
+        [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &colCount];
+        [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &_firstVisibleColumn];
       }
     }
 }
@@ -2673,7 +2673,7 @@ static NSTextFieldCell *titleCell;
       NSCell *proto = [aDecoder decodeObjectForKey: @"NSCellPrototype"];
       NSString *title = [aDecoder decodeObjectForKey: @"NSFirstColumnTitle"];
       NSString *sep = [aDecoder decodeObjectForKey: @"NSPathSeparator"];
-      long flags;
+      int32_t flags;
       NSSize bs;
       
       // Class setting
@@ -2733,7 +2733,7 @@ static NSTextFieldCell *titleCell;
 
       if ([aDecoder containsValueForKey: @"NSBrFlags"])
         {
-          flags = [aDecoder decodeIntForKey: @"NSBrFlags"];
+          flags = [aDecoder decodeInt32ForKey: @"NSBrFlags"];
 
           [self setHasHorizontalScroller: ((flags & 0x10000) == 0x10000)];
           [self setAllowsEmptySelection: !((flags & 0x20000) == 0x20000)];
@@ -2749,28 +2749,28 @@ static NSTextFieldCell *titleCell;
 
       if ([aDecoder containsValueForKey: @"NSNumberOfVisibleColumns"])
         {
-          [self setMaxVisibleColumns: [aDecoder decodeIntForKey: 
+          [self setMaxVisibleColumns: [aDecoder decodeIntegerForKey: 
                                                   @"NSNumberOfVisibleColumns"]];
         }
 
       if ([aDecoder containsValueForKey: @"NSMinColumnWidth"])
         {
-          [self setMinColumnWidth: [aDecoder decodeIntForKey: @"NSMinColumnWidth"]];
+          [self setMinColumnWidth: [aDecoder decodeFloatForKey: @"NSMinColumnWidth"]];
         }
 
       if ([aDecoder containsValueForKey: @"NSColumnResizingType"])
         {
-          [self setColumnResizingType: [aDecoder decodeIntForKey: @"NSColumnResizingType"]];
+          [self setColumnResizingType: [aDecoder decodeIntegerForKey: @"NSColumnResizingType"]];
         }
 
       if ([aDecoder containsValueForKey: @"NSPreferedColumnWidth"])
         {
-          //int prefWidth = [aDecoder decodeIntForKey: @"NSPreferedColumnWidth"];
+          //int prefWidth = [aDecoder decodeFloatForKey: @"NSPreferedColumnWidth"];
         }
     }
   else
     {
-      int colCount;
+      NSInteger colCount;
       
       // Here to keep compatibility with old version
       [aDecoder decodeObject];
@@ -2783,7 +2783,7 @@ static NSTextFieldCell *titleCell;
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_allowsBranchSelection];
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_allowsEmptySelection];
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_allowsMultipleSelection];
-      [aDecoder decodeValueOfObjCType: @encode(int) at: &_maxVisibleColumns];
+      [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &_maxVisibleColumns];
       [aDecoder decodeValueOfObjCType: @encode(CGFloat) at: &_minColumnWidth];
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_reusesColumns];
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_separatesColumns];
@@ -2831,8 +2831,8 @@ static NSTextFieldCell *titleCell;
       */
       _browserColumns = RETAIN([aDecoder decodeObject]);
       // ..and rebuild any existing browser columns
-      [aDecoder decodeValueOfObjCType: @encode(int) at: &colCount];
-      [aDecoder decodeValueOfObjCType: @encode(int) at: &_firstVisibleColumn];
+      [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &colCount];
+      [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &_firstVisibleColumn];
     }
       
   // Display even if there isn't any column
diff --git a/Source/NSBundleAdditions.m b/Source/NSBundleAdditions.m
index 3c803e2..ad80c44 100644
--- a/Source/NSBundleAdditions.m
+++ b/Source/NSBundleAdditions.m
@@ -202,8 +202,8 @@
             { 	 
               const char *nam = [_tag cString]; 	 
               const char *type; 	 
-              unsigned int size; 	 
-              int offset; 	 
+              size_t size; 	 
+              ptrdiff_t offset; 	 
               
               /* 	 
                * Use the GNUstep additional function to set the instance 	 
diff --git a/Source/NSButtonCell.m b/Source/NSButtonCell.m
index 7b7cda7..5e3e0c1 100644
--- a/Source/NSButtonCell.m
+++ b/Source/NSButtonCell.m
@@ -62,47 +62,47 @@
 typedef struct _GSButtonCellFlags 
 {
 #if GS_WORDS_BIGENDIAN == 1
-  unsigned int isPushin:1;
-  unsigned int changeContents:1;
-  unsigned int changeBackground:1;
-  unsigned int changeGray:1;
-  unsigned int highlightByContents:1;
-  unsigned int highlightByBackground:1;
-  unsigned int highlightByGray:1;
-  unsigned int drawing:1;
-  unsigned int isBordered:1;
-  unsigned int imageDoesOverlap:1;
-  unsigned int isHorizontal:1;
-  unsigned int isBottomOrLeft:1;
-  unsigned int isImageAndText:1;
-  unsigned int isImageSizeDiff:1;
-  unsigned int hasKeyEquiv:1;
-  unsigned int lastState:1;
-  unsigned int isTransparent:1;
-  unsigned int unused1:6; // inset:2 doesn't dim:1 gradient:3
-  unsigned int useButtonImageSource:1;
-  unsigned int unused2:8; // alt mnemonic loc.
+  uint32_t isPushin:1;
+  uint32_t changeContents:1;
+  uint32_t changeBackground:1;
+  uint32_t changeGray:1;
+  uint32_t highlightByContents:1;
+  uint32_t highlightByBackground:1;
+  uint32_t highlightByGray:1;
+  uint32_t drawing:1;
+  uint32_t isBordered:1;
+  uint32_t imageDoesOverlap:1;
+  uint32_t isHorizontal:1;
+  uint32_t isBottomOrLeft:1;
+  uint32_t isImageAndText:1;
+  uint32_t isImageSizeDiff:1;
+  uint32_t hasKeyEquiv:1;
+  uint32_t lastState:1;
+  uint32_t isTransparent:1;
+  uint32_t unused1:6; // inset:2 doesn't dim:1 gradient:3
+  uint32_t useButtonImageSource:1;
+  uint32_t unused2:8; // alt mnemonic loc.
 #else
-  unsigned int unused2:8; // alt mnemonic loc.
-  unsigned int useButtonImageSource:1;
-  unsigned int unused1:6; // inset:2 doesn't dim:1 gradient:3
-  unsigned int isTransparent:1;
-  unsigned int lastState:1;
-  unsigned int hasKeyEquiv:1;
-  unsigned int isImageSizeDiff:1;
-  unsigned int isImageAndText:1;
-  unsigned int isBottomOrLeft:1;
-  unsigned int isHorizontal:1;
-  unsigned int imageDoesOverlap:1;
-  unsigned int isBordered:1;
-  unsigned int drawing:1;
-  unsigned int highlightByGray:1;
-  unsigned int highlightByBackground:1;
-  unsigned int highlightByContents:1;
-  unsigned int changeGray:1;
-  unsigned int changeBackground:1;
-  unsigned int changeContents:1;
-  unsigned int isPushin:1;
+  uint32_t unused2:8; // alt mnemonic loc.
+  uint32_t useButtonImageSource:1;
+  uint32_t unused1:6; // inset:2 doesn't dim:1 gradient:3
+  uint32_t isTransparent:1;
+  uint32_t lastState:1;
+  uint32_t hasKeyEquiv:1;
+  uint32_t isImageSizeDiff:1;
+  uint32_t isImageAndText:1;
+  uint32_t isBottomOrLeft:1;
+  uint32_t isHorizontal:1;
+  uint32_t imageDoesOverlap:1;
+  uint32_t isBordered:1;
+  uint32_t drawing:1;
+  uint32_t highlightByGray:1;
+  uint32_t highlightByBackground:1;
+  uint32_t highlightByContents:1;
+  uint32_t changeGray:1;
+  uint32_t changeBackground:1;
+  uint32_t changeContents:1;
+  uint32_t isPushin:1;
 #endif
 } GSButtonCellFlags;
 
@@ -934,7 +934,7 @@ typedef struct _GSButtonCellFlags
 
 - (void) drawBezelWithFrame: (NSRect)cellFrame inView: (NSView *)controlView
 {
-  unsigned mask;
+  NSUInteger mask;
   GSThemeControlState buttonState = GSThemeNormalState;
 
   // set the mask
@@ -1094,7 +1094,7 @@ typedef struct _GSButtonCellFlags
 
 - (void) drawInteriorWithFrame: (NSRect)cellFrame inView: (NSView*)controlView
 {
-  unsigned mask;
+  NSInteger mask;
   NSImage *imageToDisplay;
   NSRect imageRect;
   NSAttributedString *titleToDisplay;
@@ -1346,7 +1346,7 @@ typedef struct _GSButtonCellFlags
 {
   NSSize s;
   GSThemeMargins border;
-  unsigned mask;
+  NSInteger mask;
   NSImage *imageToDisplay;
   NSAttributedString *titleToDisplay;
   NSSize imageSize = NSZeroSize;
@@ -1485,7 +1485,7 @@ typedef struct _GSButtonCellFlags
   if (_cell.is_bordered)
     {
       GSThemeMargins border;
-      unsigned mask;
+      NSInteger mask;
       GSThemeControlState buttonState = GSThemeNormalState;
       NSRect interiorFrame;
 
@@ -1651,13 +1651,13 @@ typedef struct _GSButtonCellFlags
       buttonCellFlags.hasKeyEquiv = ([self keyEquivalent] != nil);
 
       // cell attributes...
-      buttonCellFlags.isPushin = [self cellAttribute: NSPushInCell]; 
-      buttonCellFlags.highlightByBackground = [self cellAttribute: NSCellLightsByBackground];
-      buttonCellFlags.highlightByContents = [self cellAttribute: NSCellLightsByContents];
-      buttonCellFlags.highlightByGray = [self cellAttribute: NSCellLightsByGray];
-      buttonCellFlags.changeBackground = [self cellAttribute: NSChangeBackgroundCell];
-      buttonCellFlags.changeContents = [self cellAttribute: NSCellChangesContents];
-      buttonCellFlags.changeGray = [self cellAttribute: NSChangeGrayCell];
+      buttonCellFlags.isPushin = (uint32_t)[self cellAttribute: NSPushInCell]; 
+      buttonCellFlags.highlightByBackground = (uint32_t)[self cellAttribute: NSCellLightsByBackground];
+      buttonCellFlags.highlightByContents = (uint32_t)[self cellAttribute: NSCellLightsByContents];
+      buttonCellFlags.highlightByGray = (uint32_t)[self cellAttribute: NSCellLightsByGray];
+      buttonCellFlags.changeBackground = (uint32_t)[self cellAttribute: NSChangeBackgroundCell];
+      buttonCellFlags.changeContents = (uint32_t)[self cellAttribute: NSCellChangesContents];
+      buttonCellFlags.changeGray = (uint32_t)[self cellAttribute: NSChangeGrayCell];
 
       // set these to zero...
       buttonCellFlags.unused1 = 0; // 32;
@@ -1735,19 +1735,19 @@ typedef struct _GSButtonCellFlags
 
       if([NSButtonCell version] <= 2)
 	{
-	  unsigned int ke = _keyEquivalentModifierMask << 16;
-	  [aCoder encodeValueOfObjCType: @encode(unsigned int)
+	  NSUInteger ke = _keyEquivalentModifierMask << 16;
+	  [aCoder encodeValueOfObjCType: @encode(NSUInteger)
 		  at: &ke];
 	}
       else
 	{
-	  [aCoder encodeValueOfObjCType: @encode(unsigned int)
+	  [aCoder encodeValueOfObjCType: @encode(NSUInteger)
 		  at: &_keyEquivalentModifierMask];
 	}
 
-      [aCoder encodeValueOfObjCType: @encode(unsigned int)
+      [aCoder encodeValueOfObjCType: @encode(NSUInteger)
               at: &_highlightsByMask];
-      [aCoder encodeValueOfObjCType: @encode(unsigned int)
+      [aCoder encodeValueOfObjCType: @encode(NSUInteger)
               at: &_showAltStateMask];
 
       if([NSButtonCell version] >= 2)
@@ -1758,9 +1758,9 @@ typedef struct _GSButtonCellFlags
 		  at: &_delayInterval];
 	  [aCoder encodeValueOfObjCType: @encode(float)
 		  at: &_repeatInterval];
-	  [aCoder encodeValueOfObjCType: @encode(unsigned int)
+	  [aCoder encodeValueOfObjCType: @encode(NSBezelStyle)
 		  at: &_bezel_style];
-	  [aCoder encodeValueOfObjCType: @encode(unsigned int)
+	  [aCoder encodeValueOfObjCType: @encode(NSGradientType)
 		  at: &_gradient_type];
 	  tmp = _image_dims_when_disabled;
 	  [aCoder encodeValueOfObjCType: @encode(BOOL)
@@ -1915,7 +1915,7 @@ typedef struct _GSButtonCellFlags
   else
     {
       BOOL tmp;
-      int version = [aDecoder versionForClassName: @"NSButtonCell"];
+      NSInteger version = [aDecoder versionForClassName: @"NSButtonCell"];
       NSString *key = nil;
 
       [aDecoder decodeValueOfObjCType: @encode(id) at: &key];
@@ -1926,15 +1926,15 @@ typedef struct _GSButtonCellFlags
       [aDecoder decodeValueOfObjCType: @encode(id) at: &_altImage];
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &tmp];
       _buttoncell_is_transparent = tmp;
-      [aDecoder decodeValueOfObjCType: @encode(unsigned int)
+      [aDecoder decodeValueOfObjCType: @encode(NSUInteger)
                                    at: &_keyEquivalentModifierMask];
       if (version <= 2)
         {
           _keyEquivalentModifierMask = _keyEquivalentModifierMask << 16;
         }
-      [aDecoder decodeValueOfObjCType: @encode(unsigned int)
+      [aDecoder decodeValueOfObjCType: @encode(NSUInteger)
                                    at: &_highlightsByMask];
-      [aDecoder decodeValueOfObjCType: @encode(unsigned int)
+      [aDecoder decodeValueOfObjCType: @encode(NSUInteger)
                                    at: &_showAltStateMask];
 
       if (version >= 2)
@@ -1943,9 +1943,9 @@ typedef struct _GSButtonCellFlags
           [aDecoder decodeValueOfObjCType: @encode(id) at: &_backgroundColor];
           [aDecoder decodeValueOfObjCType: @encode(float) at: &_delayInterval];
           [aDecoder decodeValueOfObjCType: @encode(float) at: &_repeatInterval];
-          [aDecoder decodeValueOfObjCType: @encode(unsigned int)
+          [aDecoder decodeValueOfObjCType: @encode(NSBezelStyle)
                                        at: &_bezel_style];
-          [aDecoder decodeValueOfObjCType: @encode(unsigned int)
+          [aDecoder decodeValueOfObjCType: @encode(NSGradientType)
                                        at: &_gradient_type];
           [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &tmp];
           _image_dims_when_disabled = tmp;
diff --git a/Source/NSCachedImageRep.m b/Source/NSCachedImageRep.m
index 16195d8..f0c2a26 100644
--- a/Source/NSCachedImageRep.m
+++ b/Source/NSCachedImageRep.m
@@ -93,8 +93,8 @@
       pixelsWide <= 0 || pixelsHigh <= 0)
     {
       [NSException raise: NSInvalidArgumentException
-		  format: @"NSCachedImageRep created with size %@ pixelsWide %d pixelsHigh %d",
-		   NSStringFromSize(aSize), pixelsWide, pixelsHigh];
+		  format: @"NSCachedImageRep created with size %@ pixelsWide %ld pixelsHigh %ld",
+		   NSStringFromSize(aSize), (long)pixelsWide, (long)pixelsHigh];
     }
 
   // FIXME: Only create new window when separate is YES
diff --git a/Source/NSCell.m b/Source/NSCell.m
index feb8ae3..84e1b43 100644
--- a/Source/NSCell.m
+++ b/Source/NSCell.m
@@ -2391,7 +2391,7 @@ static NSColor *dtxtCol;
       cFlags |= ([self isEnabled] == NO) ? 0x20000000 : 0;
       cFlags |= [self isHighlighted] ? 0x40000000 : 0;
       cFlags |= ([self state] == NSOnState) ? 0x80000000 : 0;
-      [aCoder encodeInt: cFlags forKey: @"NSCellFlags"];
+      [aCoder encodeInteger: cFlags forKey: @"NSCellFlags"];
       
       // flags part 2
       cFlags2 |= ([self controlTint] << 5);
@@ -2594,7 +2594,7 @@ static NSColor *dtxtCol;
       BOOL flag, wraps;
       unsigned int tmp_int;
       id formatter, menu;
-      int version = [aDecoder versionForClassName: @"NSCell"];
+      NSInteger version = [aDecoder versionForClassName: @"NSCell"];
 
       [aDecoder decodeValueOfObjCType: @encode(id) at: &_contents];
       [aDecoder decodeValueOfObjCType: @encode(id) at: &_cell_image];
diff --git a/Source/NSColor.m b/Source/NSColor.m
index 847cb88..0198cad 100644
--- a/Source/NSColor.m
+++ b/Source/NSColor.m
@@ -1266,10 +1266,10 @@ systemColorWithName(NSString *name)
 
 - (NSUInteger) hash
 {
-  int nums = [self numberOfComponents];
+  NSInteger nums = [self numberOfComponents];
   CGFloat floats[nums];
   NSUInteger	h = 0;
-  unsigned	i;
+  NSUInteger	i;
 
   [self getComponents: &floats[0]];
   for (i = 0; i < sizeof(floats); i++)
@@ -2818,7 +2818,7 @@ static	NSRecursiveLock		*namedColorLock = nil;
 
 - (void) setFill
 {
-  int num = [self numberOfComponents];
+  NSInteger num = [self numberOfComponents];
   CGFloat values[num];
   NSGraphicsContext *ctxt = GSCurrentContext();
   
@@ -2829,7 +2829,7 @@ static	NSRecursiveLock		*namedColorLock = nil;
 
 - (void) setStroke
 {
-  int num = [self numberOfComponents];
+  NSInteger num = [self numberOfComponents];
   CGFloat values[num];
   NSGraphicsContext *ctxt = GSCurrentContext();
   
diff --git a/Source/NSColorPanel.m b/Source/NSColorPanel.m
index 829fc78..ae4c95d 100644
--- a/Source/NSColorPanel.m
+++ b/Source/NSColorPanel.m
@@ -172,7 +172,7 @@ static int _gs_gui_color_picker_mode = NSRGBModeColorPanel;
   id<NSColorPickingDefault, NSColorPickingCustom> picker;
   NSButtonCell *cell;
   NSMutableArray *cells = [NSMutableArray new];
-  int i, count;
+  NSInteger i, count;
   NSSize size = [_pickerMatrix frame].size;
 
   count = [_pickers count];
@@ -627,7 +627,7 @@ static int _gs_gui_color_picker_mode = NSRGBModeColorPanel;
  */
 - (void) setMode: (int)mode
 {
-  int i, count;
+  NSInteger i, count;
 
   if (mode == [self mode])
     return;
diff --git a/Source/NSComboBox.m b/Source/NSComboBox.m
index baf9974..789ea78 100644
--- a/Source/NSComboBox.m
+++ b/Source/NSComboBox.m
@@ -47,6 +47,10 @@ static NSNotificationCenter *nc;
 			 inView: (NSView *)controlView;
 @end
 
+@interface NSTextField (GNUstepPrivate)
+- (BOOL) textView: (NSTextView *)textView doCommandBySelector: (SEL)command;
+@end
+
 /**
  <unit>
  <heading>Class Description</heading> 
diff --git a/Source/NSComboBoxCell.m b/Source/NSComboBoxCell.m
index b17f15e..d16a2b2 100644
--- a/Source/NSComboBoxCell.m
+++ b/Source/NSComboBoxCell.m
@@ -1545,7 +1545,7 @@ static inline NSRect buttonCellFrameFromRect(NSRect cellRect)
   if ([coder allowsKeyedCoding])
     {
       [coder encodeBool: [self hasVerticalScroller] forKey: @"NSHasVerticalScroller"];
-      [coder encodeInt: [self numberOfVisibleItems] forKey: @"NSVisibleItemCount"];
+      [coder encodeInteger: [self numberOfVisibleItems] forKey: @"NSVisibleItemCount"];
       [coder encodeBool: [self completes] forKey: @"NSCompletes"];
       [coder encodeDouble: _intercellSpacing.width forKey: @"NSIntercellSpacingWidth"];
       [coder encodeDouble: _intercellSpacing.height forKey: @"NSIntercellSpacingHeight"];
diff --git a/Source/NSControl.m b/Source/NSControl.m
index efc9317..9814b19 100644
--- a/Source/NSControl.m
+++ b/Source/NSControl.m
@@ -567,7 +567,7 @@ static NSNotificationCenter *nc;
     {
       NSAttributedString *attr;
       NSTextStorage *storage;
-      int len;
+      NSUInteger len;
       
       storage = [(NSTextView*)text textStorage];
       len = [storage length];
@@ -988,7 +988,7 @@ static NSNotificationCenter *nc;
       [aCoder encodeBool: [self isEnabled] forKey: @"NSEnabled"];
        if (_tag)
         {
-          [aCoder encodeInt: [self tag] forKey: @"NSTag"];
+          [aCoder encodeInteger: [self tag] forKey: @"NSTag"];
         }
     }
   else
@@ -1030,13 +1030,13 @@ static NSNotificationCenter *nc;
         }
       if ([aDecoder containsValueForKey: @"NSTag"])
         {
-          int tag = [aDecoder decodeIntForKey: @"NSTag"];
+          NSInteger tag = [aDecoder decodeIntegerForKey: @"NSTag"];
           [self setTag: tag];
         }
     }
   else 
     {
-      [aDecoder decodeValueOfObjCType: @encode(int) at: &_tag];
+      [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &_tag];
       [aDecoder decodeValueOfObjCType: @encode(id) at: &_cell];
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_ignoresMultiClick];
     }
diff --git a/Source/NSController.m b/Source/NSController.m
index 43cd9cd..edf86f3 100644
--- a/Source/NSController.m
+++ b/Source/NSController.m
@@ -86,8 +86,8 @@
 
 - (BOOL) commitEditing
 {
-  unsigned c = [_editors count];
-  unsigned i;
+  NSUInteger c = [_editors count];
+  NSUInteger i;
 
   for (i = 0; i < c; i++)
     {
@@ -104,8 +104,8 @@
                  didCommitSelector: (SEL)didCommitSelector
                        contextInfo: (void*)contextInfo
 {
-  unsigned c = [_editors count];
-  unsigned i;
+  NSUInteger c = [_editors count];
+  NSUInteger i;
 
   for (i = 0; i < c; i++)
     {
diff --git a/Source/NSDataLink.m b/Source/NSDataLink.m
index 7084d94..bae660d 100644
--- a/Source/NSDataLink.m
+++ b/Source/NSDataLink.m
@@ -104,8 +104,8 @@
 //
 - (BOOL)saveLinkIn:(NSString *)directoryName
 {
-  NSSavePanel		*sp;
-  int			result;
+  NSSavePanel   *sp;
+  NSInteger     result;
 
   sp = [NSSavePanel savePanel];
   [sp setRequiredFileType: NSDataLinkFilenameExtension];
@@ -276,9 +276,9 @@
       
   if ([aCoder allowsKeyedCoding])
     {
-      [aCoder encodeInt: linkNumber forKey: @"GSLinkNumber"];
-      [aCoder encodeInt: disposition forKey: @"GSUpdateMode"];
-      [aCoder encodeInt: updateMode forKey: @"GSLastUpdateMode"];
+      [aCoder encodeInteger: linkNumber forKey: @"GSLinkNumber"];
+      [aCoder encodeInteger: disposition forKey: @"GSUpdateMode"];
+      [aCoder encodeInteger: updateMode forKey: @"GSLastUpdateMode"];
 
       [aCoder encodeObject: lastUpdateTime forKey: @"GSLastUpdateTime"];      
 
@@ -308,9 +308,9 @@
     }
   else
     {
-      [aCoder encodeValueOfObjCType: @encode(int) at: &linkNumber];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &disposition];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &updateMode];
+      [aCoder encodeValueOfObjCType: @encode(NSDataLinkNumber) at: &linkNumber];
+      [aCoder encodeValueOfObjCType: @encode(NSDataLinkDisposition) at: &disposition];
+      [aCoder encodeValueOfObjCType: @encode(NSDataLinkUpdateMode) at: &updateMode];
       [aCoder encodeValueOfObjCType: @encode(id)  at: &lastUpdateTime];
       
       [aCoder encodeValueOfObjCType: @encode(id)  at: &sourceApplicationName];
@@ -383,14 +383,14 @@
     }
   else
     {
-      int version = [aCoder versionForClassName: @"NSDataLink"];
+      NSInteger version = [aCoder versionForClassName: @"NSDataLink"];
       if (version == 0)
 	{
 	  BOOL flag = NO;
 	  
-	  [aCoder decodeValueOfObjCType: @encode(int) at: &linkNumber];
-	  [aCoder decodeValueOfObjCType: @encode(int) at: &disposition];
-	  [aCoder decodeValueOfObjCType: @encode(int) at: &updateMode];
+	  [aCoder decodeValueOfObjCType: @encode(NSDataLinkNumber) at: &linkNumber];
+	  [aCoder decodeValueOfObjCType: @encode(NSDataLinkDisposition) at: &disposition];
+	  [aCoder decodeValueOfObjCType: @encode(NSDataLinkUpdateMode) at: &updateMode];
 	  [aCoder decodeValueOfObjCType: @encode(id)  at: &sourceManager];
 	  [aCoder decodeValueOfObjCType: @encode(id)  at: &destinationManager];
 	  [aCoder decodeValueOfObjCType: @encode(id)  at: &lastUpdateTime];
diff --git a/Source/NSDataLinkManager.m b/Source/NSDataLinkManager.m
index a56937b..c6aede8 100644
--- a/Source/NSDataLinkManager.m
+++ b/Source/NSDataLinkManager.m
@@ -396,7 +396,7 @@
     }
   else
     {
-      int version = [aCoder versionForClassName: @"NSDataLinkManager"];
+      NSInteger version = [aCoder versionForClassName: @"NSDataLinkManager"];
       if (version == 0)
 	{
 	  BOOL flag = NO;
diff --git a/Source/NSDocument.m b/Source/NSDocument.m
index c27adf4..5a657c1 100644
--- a/Source/NSDocument.m
+++ b/Source/NSDocument.m
@@ -424,7 +424,7 @@ withContentsOfURL: (NSURL *)url
 
 - (void) updateChangeCount: (NSDocumentChangeType)change
 {
-  int i, count = [_window_controllers count];
+  NSInteger i, count = [_window_controllers count];
   BOOL isEdited;
   
   switch (change)
@@ -464,7 +464,7 @@ withContentsOfURL: (NSURL *)url
 
 - (BOOL) canCloseDocument
 {
-  int result;
+  NSInteger result;
 
   if (![self isDocumentEdited])
     return YES;
@@ -810,7 +810,7 @@ withContentsOfURL: (NSURL *)url
   if (![fileManager movePath: newFileName toPath: backupFilename handler: nil] &&
       [self keepBackupFile])
     {
-      int result = NSRunAlertPanel(_(@"File Error"),
+      NSInteger result = NSRunAlertPanel(_(@"File Error"),
                                    _(@"Can't create backup file.  Save anyways?"),
                                    _(@"Save"), _(@"Cancel"), nil);
       
@@ -1121,7 +1121,7 @@ originalContentsURL: (NSURL *)orig
 - (void) _addItemsToSpaButtonFromArray: (NSArray *)types
 {
   NSString *type, *title;
-  int i, count = [types count];
+  NSInteger i, count = [types count];
 
   [_spa_button removeAllItems];
   for (i = 0; i < count; i++)
@@ -1254,7 +1254,7 @@ originalContentsURL: (NSURL *)orig
 {
   NSArray *types = [object_getClass(self) writableTypes];
   NSMutableArray *muTypes;
-  int i, len;
+  NSUInteger i, len;
 
   if (op == NSSaveToOperation)
     {
@@ -1651,7 +1651,7 @@ originalContentsURL: (NSURL *)orig
 
 - (IBAction) revertDocumentToSaved: (id)sender
 {
-  int result;
+  NSInteger result;
   NSError *error;
 
   result = NSRunAlertPanel 
@@ -1687,7 +1687,7 @@ originalContentsURL: (NSURL *)orig
 {
   if (_doc_flags.in_close == NO)
     {
-      int count = [_window_controllers count];
+      NSInteger count = [_window_controllers count];
       /* Closing a windowController will also send us a close, so make
          sure we don't go recursive */
       _doc_flags.in_close = YES;
diff --git a/Source/NSDocumentController.m b/Source/NSDocumentController.m
index 6ad8882..3d03c50 100644
--- a/Source/NSDocumentController.m
+++ b/Source/NSDocumentController.m
@@ -84,7 +84,7 @@ static NSArray	*classNames = nil;
 
 static NSDictionary *TypeInfoForName (NSArray *types, NSString *typeName)
 {
-  int i, count = [types count];
+  NSUInteger i, count = [types count];
 
   for (i = 0; i < count; i++)
     {
@@ -195,10 +195,10 @@ TypeInfoForHumanReadableName (NSArray *types, NSString *typeName)
 	}
       if (YES == [types isKindOfClass: [NSArray class]])
 	{
-	  unsigned	count = [types count];
-	  unsigned	i;
-	  unsigned	nNames = 0;
-	  unsigned	nValid = 0;
+	  NSUInteger	count = [types count];
+	  NSUInteger	i;
+	  NSUInteger	nNames = 0;
+	  NSUInteger	nValid = 0;
 	  NSString	*names[count];
 	  NSDictionary	*valid[count];
 
@@ -234,8 +234,8 @@ TypeInfoForHumanReadableName (NSArray *types, NSString *typeName)
 		}
 	      else
 		{
-		  NSLog(@"Bad item at index %u in %@",
-		    i, CFBundleDocumentTypes);
+		  NSLog(@"Bad item at index %lu in %@",
+		    (unsigned long)i, CFBundleDocumentTypes);
 		}
 	    }
 	  if (nNames > 0)
@@ -281,7 +281,7 @@ TypeInfoForHumanReadableName (NSArray *types, NSString *typeName)
                        objectForKey: NSRecentDocuments];
   if (_recent_documents)
     {
-      int i, count, max;
+      NSInteger i, count, max;
 
       _recent_documents = [_recent_documents mutableCopy];
       count = [_recent_documents count];
@@ -492,7 +492,7 @@ TypeInfoForHumanReadableName (NSArray *types, NSString *typeName)
 - (NSString*) defaultType
 {
   NSString *defaultName = nil;
-  int i, count = [_types count];
+  NSUInteger i, count = [_types count];
 
   for (i = 0; i < count; i++)
     {
@@ -768,7 +768,7 @@ TypeInfoForHumanReadableName (NSArray *types, NSString *typeName)
 
 - (NSArray *) _openableFileExtensions
 {
-  int i, count = [_types count];
+  NSUInteger i, count = [_types count];
   NSMutableArray *array = [NSMutableArray arrayWithCapacity: count];
   
   for (i = 0; i < count; i++)
@@ -864,7 +864,7 @@ TypeInfoForHumanReadableName (NSArray *types, NSString *typeName)
 */
 - (BOOL) closeAllDocuments
 {
-  int count;
+  NSUInteger count;
   count = [_documents count];
   if (count > 0)
     {
@@ -899,7 +899,7 @@ static BOOL _shouldClose = YES;
                   didCloseAllSelector:(SEL)didAllCloseSelector 
                           contextInfo:(void *)contextInfo
 {
-  int count;
+  NSUInteger count;
   BOOL closeAll = YES;
 
   count = [_documents count];
@@ -953,7 +953,7 @@ static BOOL _shouldClose = YES;
                                   cancellable: (BOOL)cancellable
 {
   NSString *cancelString = (cancellable)? ((NSString *)_(@"Cancel")) : ((NSString *)nil);
-  int      result;
+  NSInteger      result;
   
   if (![self hasEditedDocuments]) 
     {
@@ -1067,7 +1067,7 @@ static BOOL _shouldClose = YES;
 */
 - (BOOL) hasEditedDocuments
 {
-  int i, count = [_documents count];
+  NSUInteger i, count = [_documents count];
   
   for (i = 0; i < count; i++)
     {
@@ -1151,7 +1151,7 @@ static BOOL _shouldClose = YES;
 */
 - (id) documentForFileName: (NSString *)fileName
 {
-  int i, count = [_documents count];
+  NSUInteger i, count = [_documents count];
         
   for (i = 0; i < count; i++)
     {
@@ -1174,7 +1174,7 @@ static BOOL _shouldClose = YES;
     }
   else
     {
-      int i, count = [_documents count];
+      NSUInteger i, count = [_documents count];
         
       for (i = 0; i < count; i++)
         {
@@ -1225,7 +1225,7 @@ static BOOL _shouldClose = YES;
 
 - (NSString *) typeFromFileExtension: (NSString *)fileExtension
 {
-  int i, count = [_types count];
+  NSUInteger i, count = [_types count];
 
   // Check for a document type with the supplied extension
   for (i = 0; i < count; i++)
@@ -1400,7 +1400,7 @@ static BOOL _shouldClose = YES;
 
 - (NSArray *) _readableTypesForClass: (Class)documentClass
 {
-  int i, count = [_types count];
+  NSUInteger i, count = [_types count];
   NSMutableArray *types = [NSMutableArray arrayWithCapacity: count];
   NSString *docClassName = NSStringFromClass (documentClass);
         
@@ -1436,7 +1436,7 @@ static BOOL _shouldClose = YES;
 
 - (NSArray *) _writableTypesForClass: (Class)documentClass
 {
-  int i, count = [_types count];
+  NSUInteger i, count = [_types count];
   NSMutableArray *types = [NSMutableArray arrayWithCapacity: count];
   NSString *docClassName = NSStringFromClass (documentClass);
   
@@ -1467,12 +1467,12 @@ static BOOL _shouldClose = YES;
 
       if ([exportableAs isKindOfClass: [NSArray class]])
         {
-	  int i, count = [exportableAs count];
+	  NSUInteger classIndex, classCount = [exportableAs count];
 	  NSString *name;
 
-	  for (i = 0; i < count; i++)
+	  for (classIndex = 0; classIndex < classCount; ++classIndex)
 	    {
-	      name = [exportableAs objectAtIndex: i];
+	      name = [exportableAs objectAtIndex: classIndex];
 	      if ([name isKindOfClass: [NSString class]])
 		[types addObject: name];
 	    }
@@ -1528,7 +1528,7 @@ static NSString *processName = nil;
 - (void) _autosaveDocuments: (NSTimer *)timer
 {
   id document;
-  int i, n = [_documents count];
+  NSUInteger i, n = [_documents count];
 
   for (i = 0; i < n; i++)
     {
@@ -1564,7 +1564,7 @@ static NSString *processName = nil;
       autosaved = [NSArray arrayWithContentsOfFile: path];
       if (autosaved)
         {
-          int i, n = [autosaved count];
+          NSUInteger i, n = [autosaved count];
           NSFileManager *fm = [NSFileManager defaultManager];
 
           for (i = 0; i < n; i++)
@@ -1658,7 +1658,7 @@ static NSString *processName = nil;
 - (void) _updateRecentDocumentsMenu
 {
   NSMenu *recentMenu;
-  int i;
+  NSInteger i;
 
   recentMenu = [self _recentDocumentsMenu];
   if (!recentMenu)
@@ -1722,7 +1722,7 @@ static NSString *processName = nil;
 {
   // action to open recent document by tag index
   NSURL *url;
-  int idx = [sender tag];
+  NSInteger idx = [sender tag];
   NSError *err = nil;
 
   if (idx < 0 || idx >= [_recent_documents count])
diff --git a/Source/NSDrawer.m b/Source/NSDrawer.m
index a5886be..4493a8c 100644
--- a/Source/NSDrawer.m
+++ b/Source/NSDrawer.m
@@ -827,7 +827,7 @@ static NSNotificationCenter *nc = nil;
 	  [aCoder encodeObject: parent forKey: @"NSParentWindow"];
 	}
 
-      [aCoder encodeInt: _preferredEdge forKey: @"NSPreferredEdge"];
+      [aCoder encodeInteger: _preferredEdge forKey: @"NSPreferredEdge"];
       [aCoder encodeFloat: _trailingOffset forKey: @"NSTrailingOffset"];
     }
   else
@@ -838,7 +838,7 @@ static NSNotificationCenter *nc = nil;
       [aCoder encodeSize: _maxContentSize];
       [aCoder encodeSize: _minContentSize];
       [aCoder encodeObject: parent];
-      [aCoder encodeValueOfObjCType: @encode(unsigned) at: &_preferredEdge];
+      [aCoder encodeValueOfObjCType: @encode(NSUInteger) at: &_preferredEdge];
       [aCoder encodeValueOfObjCType: @encode(float) at: &_trailingOffset];
     }
 }
@@ -867,12 +867,12 @@ static NSNotificationCenter *nc = nil;
 	      parentWindow = [aDecoder decodeObjectForKey: @"NSParentWindow"];
 	    }
 
-	  _preferredEdge = [aDecoder decodeIntForKey: @"NSPreferredEdge"];
+	  _preferredEdge = [aDecoder decodeIntegerForKey: @"NSPreferredEdge"];
 	  _trailingOffset = [aDecoder decodeFloatForKey: @"NSTrailingOffset"];
 	}
       else
 	{
-	  int version = [aDecoder versionForClassName: @"NSDrawer"];
+	  NSInteger version = [aDecoder versionForClassName: @"NSDrawer"];
 	  if (version == 0)
 	    {
 	      _contentSize = [aDecoder decodeSize];
@@ -882,7 +882,7 @@ static NSNotificationCenter *nc = nil;
 	      _maxContentSize = [aDecoder decodeSize];
 	      _minContentSize = [aDecoder decodeSize];
 	      parentWindow = [aDecoder decodeObject];
-	      [aDecoder decodeValueOfObjCType: @encode(unsigned)
+	      [aDecoder decodeValueOfObjCType: @encode(NSUInteger)
 					   at: &_preferredEdge];
 	      [aDecoder decodeValueOfObjCType: @encode(float)
 					   at: &_trailingOffset];	      
@@ -890,8 +890,8 @@ static NSNotificationCenter *nc = nil;
 	  else      
 	    {
 	      [NSException raise: NSInternalInconsistencyException
-		format: @"Invalid version of NSDrawer (version = %d).",
-		version];
+		format: @"Invalid version of NSDrawer (version = %ld).",
+		(long)version];
 	      return nil; // not reached, but keeps gcc happy...
 	    }
 	}
diff --git a/Source/NSEvent.m b/Source/NSEvent.m
index d8fa174..237dae0 100644
--- a/Source/NSEvent.m
+++ b/Source/NSEvent.m
@@ -289,7 +289,7 @@ static Class eventClass;
   if ([dict objectForKey: timerKey])
     [NSException raise: NSInternalInconsistencyException
                 format: @"Periodic events are already being generated for "
-                        @"this thread %x", GSCurrentThread()];
+                        @"this thread %lx", (long)GSCurrentThread()];
 
   /*
    *  Register a timer that will fire in delaySeconds.
@@ -609,25 +609,25 @@ static const char *eventTypes[] = {
       case NSRightMouseDown:
       case NSRightMouseUp:
         return [NSString stringWithFormat:
-          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %u,"
-          @" time = %f, window = %d, dpsContext = %p,"
-          @" event number = %d, click = %d, pressure = %f",
+          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %lu,"
+          @" time = %f, window = %ld, dpsContext = %p,"
+          @" event number = %ld, click = %ld, pressure = %f",
           eventTypes[event_type], location_point.x, location_point.y,
-          modifier_flags, event_time, window_num, event_context,
-          event_data.mouse.event_num, event_data.mouse.click,
+          (unsigned long)modifier_flags, event_time, (long)window_num, event_context,
+          (long)event_data.mouse.event_num, (long)event_data.mouse.click,
           event_data.mouse.pressure];
         break;
 
       case NSMouseEntered:
       case NSMouseExited:
         return [NSString stringWithFormat:
-          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %u,"
-          @" time = %f, window = %d, dpsContext = %p, "
-          @" event number = %d, tracking number = %d, user data = %p",
+          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %lu,"
+          @" time = %f, window = %ld, dpsContext = %p, "
+          @" event number = %ld, tracking number = %ld, user data = %p",
           eventTypes[event_type], location_point.x, location_point.y,
-          modifier_flags, event_time, window_num, event_context,
-          event_data.tracking.event_num,
-          event_data.tracking.tracking_num,
+          (unsigned long)modifier_flags, event_time, (long)window_num, event_context,
+          (long)event_data.tracking.event_num,
+          (long)event_data.tracking.tracking_num,
           event_data.tracking.user_data];
         break;
 
@@ -635,11 +635,11 @@ static const char *eventTypes[] = {
       case NSKeyUp:
       case NSFlagsChanged:
         return [NSString stringWithFormat:
-          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %u,"
-          @" time = %f, window = %d, dpsContext = %p, "
+          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %lu,"
+          @" time = %f, window = %ld, dpsContext = %p, "
           @" repeat = %s, keys = %@, ukeys = %@, keyCode = 0x%x",
           eventTypes[event_type], location_point.x, location_point.y,
-          modifier_flags, event_time, window_num, event_context,
+          (unsigned long)modifier_flags, event_time, (long)window_num, event_context,
           (event_data.key.repeat ? "YES" : "NO"),
           event_data.key.char_keys, event_data.key.unmodified_keys,
           event_data.key.key_code];
@@ -651,13 +651,13 @@ static const char *eventTypes[] = {
       case NSSystemDefined:
       case NSApplicationDefined:
         return [NSString stringWithFormat:
-          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %u,"
-          @" time = %f, window = %d, dpsContext = %p, "
-          @" subtype = %d, data1 = %p, data2 = %p",
+          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %lu,"
+          @" time = %f, window = %ld, dpsContext = %p, "
+          @" subtype = %d, data1 = %ld, data2 = %ld",
           eventTypes[event_type], location_point.x, location_point.y,
-          modifier_flags, event_time, window_num, event_context,
-          event_data.misc.sub_type, event_data.misc.data1,
-          event_data.misc.data2];
+          (unsigned long)modifier_flags, event_time, (long)window_num, event_context,
+          event_data.misc.sub_type, (long)event_data.misc.data1,
+          (long)event_data.misc.data2];
         break;
 
       case NSScrollWheel:
@@ -666,14 +666,14 @@ static const char *eventTypes[] = {
       case NSOtherMouseDragged:
       case NSRightMouseDragged:
         return [NSString stringWithFormat:
-          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %u,"
-          @" time = %f, window = %d, dpsContext = %p,"
-          @" event number = %d, click = %d, pressure = %f"
-          @" button = %d, deltaX = %f, deltaY = %f, deltaZ = %f",
+          @"NSEvent: eventType = %s, point = { %f, %f }, modifiers = %lu,"
+          @" time = %f, window = %ld, dpsContext = %p,"
+          @" event number = %ld, click = %ld, pressure = %f"
+          @" button = %ld, deltaX = %f, deltaY = %f, deltaZ = %f",
           eventTypes[event_type], location_point.x, location_point.y,
-          modifier_flags, event_time, window_num, event_context,
-          event_data.mouse.event_num, event_data.mouse.click,
-          event_data.mouse.pressure, event_data.mouse.button,
+          (unsigned long)modifier_flags, event_time, (long)window_num, event_context,
+          (long)event_data.mouse.event_num, (long)event_data.mouse.click,
+          event_data.mouse.pressure, (long)event_data.mouse.button,
           event_data.mouse.deltaX,
           event_data.mouse.deltaY,
           event_data.mouse.deltaZ];
@@ -686,10 +686,10 @@ static const char *eventTypes[] = {
 
       default:
         return [NSString stringWithFormat:
-          @"NSEvent: eventType = UNKNOWN!, point = { %f, %f }, modifiers = %u,"
-          @" time = %f, window = %d",
+          @"NSEvent: eventType = UNKNOWN!, point = { %f, %f }, modifiers = %lu,"
+          @" time = %f, window = %ld",
           location_point.x, location_point.y,
-          modifier_flags, event_time, window_num];
+          (unsigned long)modifier_flags, event_time, (long)window_num];
         break;
     }
 
@@ -792,7 +792,7 @@ static const char *eventTypes[] = {
     }
   else
     {
-      int version = [aDecoder versionForClassName: @"NSEvent"];
+      NSInteger version = [aDecoder versionForClassName: @"NSEvent"];
       
       [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &event_type];
       location_point = [aDecoder decodePoint];
diff --git a/Source/NSFileWrapper.m b/Source/NSFileWrapper.m
index 971ffd5..971786a 100644
--- a/Source/NSFileWrapper.m
+++ b/Source/NSFileWrapper.m
@@ -437,8 +437,8 @@
 #define GSFileWrapperDirectoryTypeCheck() \
   if (_wrapperType != GSFileWrapperDirectoryType) \
 	[NSException raise: NSInternalInconsistencyException \
-	            format: @"Can't invoke %@ on a file wrapper that" \
-                            @" does not wrap a directory!", _cmd];
+	            format: @"Can't invoke %s on a file wrapper that" \
+                            @" does not wrap a directory!", sel_getName(_cmd)];
 
 - (NSString*) addFileWrapper: (NSFileWrapper*)doc			
 {
diff --git a/Source/NSFont.m b/Source/NSFont.m
index a0badae..1fe047c 100644
--- a/Source/NSFont.m
+++ b/Source/NSFont.m
@@ -121,7 +121,7 @@ keyForFont(NSString *name, const CGFloat *matrix,
   d->matrix[3] = matrix[3] * 1000;
   d->matrix[4] = matrix[4] * 1000;
   d->matrix[5] = matrix[5] * 1000;
-  d->hash = [d->name hash] + screenFont + role * 4
+  d->hash = (unsigned)[d->name hash] + screenFont + role * 4
             + d->matrix[0] + d->matrix[1] + d->matrix[2] + d->matrix[3];
   return d;
 }
@@ -1378,7 +1378,7 @@ static BOOL flip_hack;
     }
   else
     {
-      int version = [aDecoder versionForClassName: @"NSFont"];
+      NSInteger version = [aDecoder versionForClassName: @"NSFont"];
       id name;
       float fontMatrix[6];
       CGFloat cgMatrix[6];
diff --git a/Source/NSFontManager.m b/Source/NSFontManager.m
index e8e6f91..67b5b50 100644
--- a/Source/NSFontManager.m
+++ b/Source/NSFontManager.m
@@ -300,7 +300,7 @@ static Class         fontPanelClass = Nil;
 - (void) addFontTrait: (id)sender
 {
   _storedTag = NSAddTraitFontAction;
-  _trait = [sender tag];
+  _trait = (NSFontTraitMask)[sender tag];
   [self sendAction];
 
   // We update our own selected font
@@ -318,7 +318,7 @@ static Class         fontPanelClass = Nil;
 - (void) removeFontTrait: (id)sender
 {
   _storedTag = NSRemoveTraitFontAction;
-  _trait = [sender tag];
+  _trait = (NSFontTraitMask)[sender tag];
   [self sendAction];
 
   // We update our own selected font
@@ -335,7 +335,7 @@ static Class         fontPanelClass = Nil;
 
 - (void) modifyFont: (id)sender
 {
-  _storedTag = [sender tag];
+  _storedTag = (NSFontTag)[sender tag];
   [self sendAction];
 
   // We update our own selected font
diff --git a/Source/NSFontPanel.m b/Source/NSFontPanel.m
index da90e22..93457b7 100644
--- a/Source/NSFontPanel.m
+++ b/Source/NSFontPanel.m
@@ -856,7 +856,7 @@ static float sizes[] = {4.0, 6.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0,
   float		size;
   NSString	*fontName;
   NSTextField	*sizeField = [[self contentView] viewWithTag: NSFPSizeField];
-  unsigned	i = [_faceList count];
+  NSUInteger    i = [_faceList count];
 
   size = [sizeField floatValue];
   if (size == 0.0)
@@ -970,10 +970,10 @@ the delegate is an argument; a repeat-caller can then cache it.
 @implementation NSFontPanel (NSBrowserDelegate)
 
 
-static int score_difference(int weight1, int traits1,
-			    int weight2, int traits2)
+static NSInteger score_difference(NSInteger weight1, NSInteger traits1,
+                                  NSInteger weight2, NSInteger traits2)
 {
-  int score, t;
+  NSInteger score, t;
 
   score = (weight1 - weight2);
   score = 10 * score * score;
@@ -1001,9 +1001,9 @@ static int score_difference(int weight1, int traits1,
 
   NSBrowser *faceBrowser = [[self contentView] viewWithTag: NSFPFaceBrowser];
   NSBrowser *familyBrowser = [[self contentView] viewWithTag: NSFPFamilyBrowser];
-  int row = [familyBrowser selectedRowInColumn: 0];
+  NSInteger row = [familyBrowser selectedRowInColumn: 0];
 
-  unsigned int i;
+  NSUInteger i;
   NSArray *entireFaceList;
   NSMutableArray *faceList;
 
@@ -1038,7 +1038,7 @@ static int score_difference(int weight1, int traits1,
   // Find the face that differs the least from what we want
   if (i == [_faceList count])
     {
-      int best, best_score, score;
+      NSInteger best, best_score, score;
 
       best_score = 1e6;
       best = -1;
@@ -1083,7 +1083,7 @@ static int score_difference(int weight1, int traits1,
 - (void) _faceSelectionChanged: (id)sender
 {
   NSBrowser *faceBrowser = [[self contentView] viewWithTag: NSFPFaceBrowser];
-  int row = [faceBrowser selectedRowInColumn: 0];
+  NSInteger row = [faceBrowser selectedRowInColumn: 0];
   NSArray *font_info = [_faceList objectAtIndex: row];
 
   _face = row;
@@ -1096,7 +1096,7 @@ static int score_difference(int weight1, int traits1,
 - (void) _sizeSelectionChanged: (id)sender
 {
   NSBrowser *sizeBrowser = [[self contentView] viewWithTag: NSFPSizeBrowser];
-  int row = [sizeBrowser selectedRowInColumn: 0];
+  NSInteger row = [sizeBrowser selectedRowInColumn: 0];
   NSTextField *sizeField;
 
   sizeField = [[self contentView] viewWithTag: NSFPSizeField];
@@ -1106,7 +1106,7 @@ static int score_difference(int weight1, int traits1,
 }
 
 
-- (int) browser: (NSBrowser*)sender  numberOfRowsInColumn: (int)column
+- (NSInteger) browser: (NSBrowser*)sender  numberOfRowsInColumn: (NSInteger)column
 {
   switch ([sender tag])
     {
diff --git a/Source/NSGraphicsContext.m b/Source/NSGraphicsContext.m
index a5b2fba..8056ffe 100644
--- a/Source/NSGraphicsContext.m
+++ b/Source/NSGraphicsContext.m
@@ -1624,13 +1624,13 @@ destination point but not the content. */
 
 @implementation NSGraphicsContext (Printing)
 
-- (void) beginPage: (int)ordinalNum
+- (void) beginPage: (NSInteger)ordinalNum
              label: (NSString*)aString
               bBox: (NSRect)pageRect
              fonts: (NSString*)fontNames
 {
   if (aString == nil)
-    aString = [[NSNumber numberWithInt: ordinalNum] description];
+    aString = [[NSNumber numberWithInteger: ordinalNum] description];
   DPSPrintf(self, "%%%%Page: %s %d\n", [aString lossyCString], ordinalNum);
   if (NSIsEmptyRect(pageRect) == NO)
     DPSPrintf(self, "%%%%PageBoundingBox: %d %d %d %d\n",
@@ -1646,7 +1646,7 @@ destination point but not the content. */
                  createdBy: (NSString*)anApplication
                      fonts: (NSString*)fontNames
                    forWhom: (NSString*)user
-                     pages: (int)numPages
+                     pages: (NSInteger)numPages
                      title: (NSString*)aTitle
 {
   NSPrintOperation *printOp = [NSPrintOperation currentOperation];
@@ -1711,7 +1711,7 @@ destination point but not the content. */
   DPSPrintf(self, "%%%%Trailer\n");
 }
 
-- (void) endDocumentPages: (int)pages
+- (void) endDocumentPages: (NSInteger)pages
             documentFonts: (NSSet*)fontNames
 {
   if (pages != 0)
diff --git a/Source/NSImage.m b/Source/NSImage.m
index 5eaec9b..b8d3a50 100644
--- a/Source/NSImage.m
+++ b/Source/NSImage.m
@@ -1111,8 +1111,8 @@ static BOOL GSSizeIsIntegerMultipleOfSize(NSSize size, NSSize baseSize)
  */
 static NSSize GSResolutionOfImageRep(NSImageRep *rep)
 {
-  const int pixelsWide = [rep pixelsWide];
-  const int pixelsHigh = [rep pixelsHigh];
+  const NSInteger pixelsWide = [rep pixelsWide];
+  const NSInteger pixelsHigh = [rep pixelsHigh];
   const NSSize repSize = [rep size];
 
   if (repSize.width == 0 || repSize.height == 0)
@@ -1778,7 +1778,7 @@ static NSSize GSResolutionOfImageRep(NSImageRep *rep)
 
 + (BOOL) canInitWithPasteboard: (NSPasteboard *)pasteboard
 {
-  int i, count;
+  NSUInteger i, count;
   NSArray* array = [NSImageRep registeredImageRepClasses];
 
   count = [array count];
diff --git a/Source/NSImageCell.m b/Source/NSImageCell.m
index e5e91a8..977a1aa 100644
--- a/Source/NSImageCell.m
+++ b/Source/NSImageCell.m
@@ -299,16 +299,16 @@ yBottomInRect(NSSize innerSize, NSRect outerRect, BOOL flipped)
   [super encodeWithCoder: aCoder];
   if ([aCoder allowsKeyedCoding])
     {
-      [aCoder encodeInt: _imageAlignment forKey: @"NSAlign"];
-      [aCoder encodeInt: _imageScaling forKey: @"NSScale"];
-      [aCoder encodeInt: _frameStyle forKey: @"NSStyle"];
+      [aCoder encodeInteger: _imageAlignment forKey: @"NSAlign"];
+      [aCoder encodeInteger: _imageScaling forKey: @"NSScale"];
+      [aCoder encodeInteger: _frameStyle forKey: @"NSStyle"];
       [aCoder encodeBool: NO forKey: @"NSAnimates"];
     }
   else
     {
-      [aCoder encodeValueOfObjCType: @encode(int) at: &_imageAlignment];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &_frameStyle];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &_imageScaling];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &_imageAlignment];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &_frameStyle];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &_imageScaling];
       [aCoder encodeSize: _original_image_size];
     }
 }
@@ -321,15 +321,15 @@ yBottomInRect(NSSize innerSize, NSRect outerRect, BOOL flipped)
 	{
 	  if ([aDecoder containsValueForKey: @"NSAlign"])
 	    {
-	      [self setImageAlignment: [aDecoder decodeIntForKey: @"NSAlign"]];
+	      [self setImageAlignment: [aDecoder decodeIntegerForKey: @"NSAlign"]];
 	    }
 	  if ([aDecoder containsValueForKey: @"NSScale"])
 	    {
-	      [self setImageScaling: [aDecoder decodeIntForKey: @"NSScale"]];
+	      [self setImageScaling: [aDecoder decodeIntegerForKey: @"NSScale"]];
 	    }
 	  if ([aDecoder containsValueForKey: @"NSStyle"])
 	    {
-	      [self setImageFrameStyle: [aDecoder decodeIntForKey: @"NSStyle"]];
+	      [self setImageFrameStyle: [aDecoder decodeIntegerForKey: @"NSStyle"]];
 	    }
 	  if ([aDecoder containsValueForKey: @"NSAnimates"])
 	    {
@@ -338,9 +338,9 @@ yBottomInRect(NSSize innerSize, NSRect outerRect, BOOL flipped)
 	}
       else
 	{
-	  [aDecoder decodeValueOfObjCType: @encode(int) at: &_imageAlignment];
-	  [aDecoder decodeValueOfObjCType: @encode(int) at: &_frameStyle];
-	  [aDecoder decodeValueOfObjCType: @encode(int) at: &_imageScaling];
+	  [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &_imageAlignment];
+	  [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &_frameStyle];
+	  [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &_imageScaling];
 	  _original_image_size = [aDecoder decodeSize];
 	}
     }
diff --git a/Source/NSImageRep.m b/Source/NSImageRep.m
index 6f15010..2fcfb6e 100644
--- a/Source/NSImageRep.m
+++ b/Source/NSImageRep.m
@@ -75,7 +75,7 @@ static Class NSImageRep_class = NULL;
 // Managing NSImageRep Subclasses
 + (Class) imageRepClassForData: (NSData *)data
 {
-  int i, count;
+  NSUInteger i, count;
 
   count = [imageReps count];
   for (i = 0; i < count; i++)
@@ -89,7 +89,7 @@ static Class NSImageRep_class = NULL;
 
 + (Class) imageRepClassForFileType: (NSString *)type
 {
-  int i, count;
+  NSUInteger i, count;
 
   count = [imageReps count];
   for (i = 0; i < count; i++)
@@ -105,7 +105,7 @@ static Class NSImageRep_class = NULL;
 
 + (Class) imageRepClassForPasteboardType: (NSString *)type
 {
-  int i, count;
+  NSUInteger i, count;
 
   count = [imageReps count];
   for (i = 0; i < count; i++)
@@ -302,7 +302,7 @@ implement, so we can't do that. */
 
 + (NSArray *) imageRepsWithPasteboard: (NSPasteboard *)pasteboard
 {
-  int i, count;
+  NSUInteger i, count;
   NSMutableArray* array;
   NSArray *reps;
 
@@ -559,7 +559,7 @@ behavior precisely matches Cocoa. */
   NSCachedImageRep *cache;
   /* The scaled image graphics state we used as the source from which we 
      draw into the destination (the current graphics context)*/
-  int gState;
+  NSInteger gState;
   /* The context of the cache window */
   NSGraphicsContext *cacheCtxt;
   const NSSize repSize = [self size];
diff --git a/Source/NSInputManager.m b/Source/NSInputManager.m
index d5a7cf9..1666ca6 100644
--- a/Source/NSInputManager.m
+++ b/Source/NSInputManager.m
@@ -148,7 +148,7 @@ static NSInputManager *currentInputManager = nil;
 
 + (BOOL) parseKey: (NSString *)key 
     intoCharacter: (unichar *)character
-     andModifiers: (unsigned int *)modifiers
+     andModifiers: (NSUInteger *)modifiers
 {
   int flags = 0;
   unichar c = 0;
@@ -159,7 +159,7 @@ static NSInputManager *currentInputManager = nil;
 
   /* Then, parse the modifiers.  The modifiers are the components 
      - all of them except the last one!  */
-  int i, count = [components count];
+  NSUInteger i, count = [components count];
 
   for (i = 0; i < count - 1; i++)
     {
@@ -246,7 +246,7 @@ static NSInputManager *currentInputManager = nil;
 }
 
 + (NSString *) describeKeyStroke: (unichar)character
-                   withModifiers: (unsigned int)modifiers
+                   withModifiers: (NSUInteger)modifiers
 {
   NSMutableString *description = [NSMutableString new];
   int i;
@@ -513,7 +513,7 @@ static NSInputManager *currentInputManager = nil;
           GSKeyBindingAction *action;
           GSKeyBindingTable *table;
           BOOL found;
-          unsigned adaptedFlags;
+          NSUInteger adaptedFlags;
 
           /* If the keystroke is a function key, then we need to use
            * the full modifier flags to compare it against stored
@@ -547,9 +547,9 @@ static NSInputManager *currentInputManager = nil;
 
           /* Look up the character in the current keybindings table.  */
           found = [_currentBindingTable lookupKeyStroke: character
-                                        modifiers: adaptedFlags
-                                        returningActionIn: &action
-                                        tableIn: &table];
+                                              modifiers: adaptedFlags
+                                      returningActionIn: &action
+                                                tableIn: &table];
           
           if (found)
             {
diff --git a/Source/NSLayoutManager.m b/Source/NSLayoutManager.m
index 34033bf..12841e4 100644
--- a/Source/NSLayoutManager.m
+++ b/Source/NSLayoutManager.m
@@ -136,11 +136,11 @@ first. Remaining cases, highest priority first:
 @end
 
 @interface NSLayoutManager (LayoutHelpers)
--(void) _doLayoutToContainer: (int)cindex  point: (NSPoint)p;
+-(void) _doLayoutToContainer: (NSInteger)cindex  point: (NSPoint)p;
 @end
 
 @implementation NSLayoutManager (LayoutHelpers)
--(void) _doLayoutToContainer: (int)cindex  point: (NSPoint)p
+-(void) _doLayoutToContainer: (NSInteger)cindex  point: (NSPoint)p
 {
   [self _doLayout];
 }
@@ -169,7 +169,7 @@ first. Remaining cases, highest priority first:
 /* Helper for searching for the line frag of a glyph. */
 #define LINEFRAG_FOR_GLYPH(glyph) \
   do { \
-    int lo, hi, mid; \
+    NSInteger lo, hi, mid; \
 \
     lf = tc->linefrags; \
     for (lo = 0, hi = tc->num_linefrags - 1; lo < hi;) \
@@ -248,11 +248,11 @@ container? necessary? */
 			 rectCount: (NSUInteger *)rectCount
 {
   NSUInteger last;
-  int i;
+  NSInteger i;
   textcontainer_t *tc;
   linefrag_t *lf;
-  int num_rects;
-  float x0, x1;
+  NSInteger num_rects;
+  CGFloat x0, x1;
   NSRect r;
 
   *rectCount = 0;
@@ -309,11 +309,11 @@ container? necessary? */
 	  The start index is inside the line frag rect, so we need to
 	  search through it to find the exact starting location.
 	  */
-	  unsigned int i;
-	  int j;
+	  NSUInteger i;
+	  NSInteger j;
 	  linefrag_point_t *lp;
 	  glyph_run_t *r;
-	  unsigned int gpos, cpos;
+	  NSUInteger gpos, cpos;
 
 	  for (j = 0, lp = lf->points; j < lf->num_points; j++, lp++)
 	    if (lp->pos + lp->length > glyphRange.location)
@@ -352,10 +352,10 @@ container? necessary? */
 	  exact end location.
 	  */
 	  NSUInteger i;
-	  int j;
+	  NSInteger j;
 	  linefrag_point_t *lp;
 	  glyph_run_t *r;
-	  unsigned int gpos, cpos;
+	  NSUInteger gpos, cpos;
 
 	  /*
 	  At this point there is a glyph in our range that is in this
@@ -394,7 +394,7 @@ container? necessary? */
 	  */
 	  NSUInteger i;
 	  glyph_run_t *r;
-	  unsigned int gpos, cpos;
+	  NSUInteger gpos, cpos;
 
 	  r = run_for_glyph_index(last - 1, glyphs, &gpos, &cpos);
 	  i = (last - 1) - gpos;
@@ -500,9 +500,9 @@ line frag rect. */
 -(NSRange) glyphRangeForBoundingRect: (NSRect)bounds
 		     inTextContainer: (NSTextContainer *)container
 {
-  int i;
-  unsigned int j;
-  int low, high, mid;
+  NSInteger i;
+  NSUInteger j;
+  NSInteger low, high, mid;
   textcontainer_t *tc;
   linefrag_t *lf;
 
@@ -623,12 +623,12 @@ line frag rect. */
 }
 
 
--(unsigned int) glyphIndexForPoint: (NSPoint)aPoint
-		   inTextContainer: (NSTextContainer *)aTextContainer
+-(NSUInteger) glyphIndexForPoint: (NSPoint)aPoint
+                 inTextContainer: (NSTextContainer *)aTextContainer
 {
-  return [self glyphIndexForPoint: aPoint
-	       inTextContainer: aTextContainer
-	       fractionOfDistanceThroughGlyph: NULL];
+    return [self glyphIndexForPoint: aPoint
+                    inTextContainer: aTextContainer
+     fractionOfDistanceThroughGlyph: NULL];
 }
 
 /*
@@ -639,7 +639,7 @@ anything visible
                  inTextContainer: (NSTextContainer *)container
   fractionOfDistanceThroughGlyph: (CGFloat *)partialFraction
 {
-  int i;
+  NSInteger i;
   textcontainer_t *tc;
   linefrag_t *lf;
   linefrag_point_t *lp;
@@ -750,10 +750,10 @@ anything visible
     {
       /* There are points in this line frag before the point we're looking
       for. */
-      float cur, prev, next;
+      CGFloat cur, prev, next;
       glyph_run_t *r;
-      unsigned int glyph_pos, char_pos, last_visible;
-      unsigned j;
+      NSUInteger glyph_pos, char_pos, last_visible;
+      NSUInteger j;
 
       if (i < lf->num_points)
         next = lp->p.x;
@@ -803,8 +803,8 @@ anything visible
 Determines at which glyph, and how far through it, the insertion point
 should be placed for a certain character index.
 */
--(unsigned int) _glyphIndexForCharacterIndex: (unsigned int)cindex
-			     fractionThrough: (float *)fraction
+-(NSUInteger) _glyphIndexForCharacterIndex: (NSUInteger)cindex
+                           fractionThrough: (CGFloat *)fraction
 {
   if (cindex == [[_textStorage string] length])
     {
@@ -814,8 +814,8 @@ should be placed for a certain character index.
   else
     {
       NSRange glyphRange, charRange;
-      unsigned int glyph_index;
-      float fraction_through;
+      NSUInteger glyph_index;
+      CGFloat fraction_through;
 
       glyphRange = [self glyphRangeForCharacterRange: NSMakeRange(cindex, 1)
 				actualCharacterRange: &charRange];
@@ -850,17 +850,17 @@ should be placed for a certain character index.
 Note: other methods rely a lot on the fact that the rectangle returned here
 has the same y origin and height as the line frag rect it is in.
 */
--(NSRect) _insertionPointRectForCharacterIndex: (unsigned int)cindex
-				 textContainer: (int *)textContainer
+-(NSRect) _insertionPointRectForCharacterIndex: (NSUInteger)cindex
+                                 textContainer: (NSInteger *)textContainer
 {
-  int i;
+  NSInteger i;
   textcontainer_t *tc;
   linefrag_t *lf;
-  float x0, x1;
+  CGFloat x0, x1;
   NSRect r;
 
-  unsigned int glyph_index;
-  float fraction_through;
+  NSUInteger glyph_index;
+  CGFloat fraction_through;
 
 
   glyph_index = [self _glyphIndexForCharacterIndex: cindex
@@ -928,11 +928,11 @@ has the same y origin and height as the line frag rect it is in.
     }
 
   {
-    unsigned int i;
-    int j;
+    NSUInteger i;
+    NSInteger j;
     linefrag_point_t *lp;
     glyph_run_t *r;
-    unsigned int gpos, cpos;
+    NSUInteger gpos, cpos;
 
     for (j = 0, lp = lf->points; j < lf->num_points; j++, lp++)
       if (lp->pos + lp->length > glyph_index)
@@ -966,30 +966,30 @@ has the same y origin and height as the line frag rect it is in.
   return r;
 }
 
--(NSRect) insertionPointRectForCharacterIndex: (unsigned int)cindex
-			      inTextContainer: (NSTextContainer *)textContainer
+-(NSRect) insertionPointRectForCharacterIndex: (NSUInteger)cindex
+                              inTextContainer: (NSTextContainer *)textContainer
 {
-  int i;
-  NSRect r;
-
-  r = [self _insertionPointRectForCharacterIndex: cindex
-				   textContainer: &i];
-  if (i == -1 || textcontainers[i].textContainer != textContainer)
-    return NSZeroRect;
-
-  return r;
+    NSInteger i;
+    NSRect r;
+    
+    r = [self _insertionPointRectForCharacterIndex: cindex
+                                     textContainer: &i];
+    if (i == -1 || textcontainers[i].textContainer != textContainer)
+        return NSZeroRect;
+    
+    return r;
 }
 
 
--(unsigned int) characterIndexMoving: (GSInsertionPointMovementDirection)direction
-		  fromCharacterIndex: (unsigned int)from
-	      originalCharacterIndex: (unsigned int)original
-			    distance: (float)distance
+-(NSUInteger) characterIndexMoving: (GSInsertionPointMovementDirection)direction
+                fromCharacterIndex: (NSUInteger)from
+            originalCharacterIndex: (NSUInteger)original
+                          distance: (CGFloat)distance
 {
   NSRect from_rect, new_rect;
-  int from_tc, new_tc;
-  unsigned int new;
-  unsigned int length = [_textStorage length];
+  NSInteger from_tc, new_tc;
+  NSUInteger new;
+  NSUInteger length = [_textStorage length];
 
   /* This call will ensure that layout is built to 'from', and that layout
   for the line 'from' is in is built. */
@@ -1020,8 +1020,8 @@ has the same y origin and height as the line frag rect it is in.
       else if (direction == GSInsertionPointMoveUp ||
 	       direction == GSInsertionPointMoveDown)
 	{
-	  int orig_tc;
-	  const float target = [self _insertionPointRectForCharacterIndex: original
+	  NSInteger orig_tc;
+	  const CGFloat target = [self _insertionPointRectForCharacterIndex: original
 							    textContainer: &orig_tc].origin.x;
 
 	  const int delta = (direction == GSInsertionPointMoveUp) ? -1 : 1;
@@ -1040,7 +1040,7 @@ has the same y origin and height as the line frag rect it is in.
 						  textContainer: &new_tc];
 	  while ((direction == GSInsertionPointMoveUp) ? (new > 0) : (new < length))
 	    {
-	      int prev_tc = new_tc;
+	      NSInteger prev_tc = new_tc;
 	      NSRect prev_rect = new_rect;
 	      new_rect = [self _insertionPointRectForCharacterIndex: new + delta
 						      textContainer: &new_tc];
@@ -1074,7 +1074,7 @@ has the same y origin and height as the line frag rect it is in.
   if (direction == GSInsertionPointMoveLeft ||
       direction == GSInsertionPointMoveRight)
     {
-      float target;
+      CGFloat target;
 
       /*
       This is probably very inefficient, but it shouldn't be a bottleneck,
@@ -1122,11 +1122,11 @@ has the same y origin and height as the line frag rect it is in.
       direction == GSInsertionPointMoveDown)
     {
       NSRect orig_rect, prev_rect;
-      int orig_tc;
-      float target;
+      NSInteger orig_tc;
+      CGFloat target;
       textcontainer_t *tc;
       linefrag_t *lf;
-      int i;
+      NSInteger i;
 
       orig_rect = [self _insertionPointRectForCharacterIndex: original
 					       textContainer: &orig_tc];
@@ -1372,8 +1372,8 @@ container
 {
   NSTextContainer *textContainer;
   glyph_run_t *glyph_run;
-  unsigned int glyph_pos, char_pos, first_char_pos;
-  int i, j;
+  NSUInteger glyph_pos, char_pos, first_char_pos;
+  NSInteger i, j;
   NSRect *rects;
   NSUInteger count;
   NSColor *color, *last_color;
@@ -1386,7 +1386,7 @@ container
   [self _doLayoutToGlyph: range.location + range.length - 1];
 
   {
-    int i;
+    NSInteger i;
     textcontainer_t *tc;
 
     for (i = 0, tc = textcontainers; i < num_textcontainers; i++, tc++)
@@ -1537,7 +1537,7 @@ attachmentSize(linefrag_t *lf, NSUInteger glyphIndex)
 - (NSSize) attachmentSizeForGlyphAtIndex: (NSUInteger)glyphIndex
 {
   textcontainer_t *tc;
-  int i;
+  NSInteger i;
   linefrag_t *lf;
 
   for (i = 0, tc = textcontainers; i < num_textcontainers; i++, tc++)
@@ -1567,13 +1567,13 @@ attachmentSize(linefrag_t *lf, NSUInteger glyphIndex)
 -(void) drawGlyphsForGlyphRange: (NSRange)range
 			atPoint: (NSPoint)containerOrigin
 {
-  int i, j;
+  NSInteger i, j;
   textcontainer_t *tc;
   linefrag_t *lf;
   linefrag_point_t *lp;
 
   NSPoint p;
-  unsigned int g;
+  NSUInteger g;
 
   NSDictionary *attributes;
   NSFont *f;
@@ -1582,7 +1582,7 @@ attachmentSize(linefrag_t *lf, NSUInteger glyphIndex)
   BOOL currentGlyphIsSelected;
 
   glyph_run_t *glyph_run;
-  unsigned int glyph_pos, char_pos;
+  NSUInteger glyph_pos, char_pos;
   glyph_t *glyph;
 
   NSGraphicsContext *ctxt = GSCurrentContext();
@@ -1601,7 +1601,7 @@ attachmentSize(linefrag_t *lf, NSUInteger glyphIndex)
 #define GBUF_SIZE 16 /* TODO: tweak */
   NSGlyph gbuf[GBUF_SIZE];
   NSSize advancementbuf[GBUF_SIZE];
-  int gbuf_len, gbuf_size;
+  NSInteger gbuf_len, gbuf_size;
   NSPoint gbuf_point = NSZeroPoint;
 
   if (!range.length)
@@ -1810,7 +1810,7 @@ attachmentSize(linefrag_t *lf, NSUInteger glyphIndex)
 	    {
 	      if (g >= range.location)
 		{
-		  unsigned int char_index =
+		  NSUInteger char_index =
 		    [self characterRangeForGlyphRange: NSMakeRange(g, 1)
 				     actualGlyphRange: NULL].location;
 		  NSObject<NSTextAttachmentCell> *cell = [[_textStorage attribute: NSAttachmentAttributeName
@@ -2260,7 +2260,7 @@ static void GSDrawPatternLine(NSPoint start, NSPoint end, NSInteger pattern, CGF
 }
 
 -(void) insertTextContainer: (NSTextContainer *)aTextContainer
-		    atIndex: (unsigned int)index
+		    atIndex: (NSUInteger)index
 {
   int i;
 
@@ -2271,7 +2271,7 @@ static void GSDrawPatternLine(NSPoint start, NSPoint end, NSInteger pattern, CGF
     [[textcontainers[i].textContainer textView] _updateMultipleTextViews];
 }
 
--(void) removeTextContainerAtIndex: (unsigned int)index
+-(void) removeTextContainerAtIndex: (NSUInteger)index
 {
   int i;
   NSTextView *tv = [textcontainers[index].textContainer textView];
@@ -2409,8 +2409,8 @@ TODO: not really clear what these should do
 */
 -(void) invalidateDisplayForGlyphRange: (NSRange)aRange
 {
-  int i;
-  unsigned int m;
+  NSInteger i;
+  NSUInteger m;
   NSRange r;
   NSRect rect;
   NSPoint p;
@@ -2464,8 +2464,8 @@ TODO: not really clear what these should do
 
 -(void) _didInvalidateLayout
 {
-  unsigned int g;
-  int i;
+  NSUInteger g;
+  NSInteger i;
 
   /* Invalidate from the first glyph not laid out (which will
   generally be the first glyph to have been invalidated). */
@@ -2486,42 +2486,42 @@ TODO: not really clear what these should do
 
 -(void) _dumpLayout
 {
-  int i, j, k;
-  textcontainer_t *tc;
-  linefrag_t *lf;
-  linefrag_point_t *lp;
-  linefrag_attachment_t *la;
-
-  for (i = 0, tc = textcontainers; i < num_textcontainers; i++, tc++)
+    NSInteger i, j, k;
+    textcontainer_t *tc;
+    linefrag_t *lf;
+    linefrag_point_t *lp;
+    linefrag_attachment_t *la;
+    
+    for (i = 0, tc = textcontainers; i < num_textcontainers; i++, tc++)
     {
-      printf("tc %2i, %5i+%5i  (complete %i)\n",
-	i,tc->pos,tc->length,tc->complete);
-      printf("  lfs: (%3i)\n", tc->num_linefrags);
-      for (j = 0, lf = tc->linefrags; j < tc->num_linefrags; j++, lf++)
-	{
-	  printf("   %3i : %5i+%5i  (%g %g)+(%g %g)\n",
-	    j,lf->pos,lf->length,
-	    lf->rect.origin.x,lf->rect.origin.y,
-	    lf->rect.size.width,lf->rect.size.height);
-	  for (k = 0, lp = lf->points; k < lf->num_points; k++, lp++)
-	    printf("               p%3i : %5i+%5i\n",k,lp->pos,lp->length);
-	  for (k = 0, la = lf->attachments; k < lf->num_attachments; k++, la++)
-	    printf("               a%3i : %5i+%5i\n",k,la->pos,la->length);
-	}
-      printf("  softs: (%3i)\n", tc->num_soft);
-      for (; j < tc->num_linefrags + tc->num_soft; j++, lf++)
-	{
-	  printf("   %3i : %5i+%5i  (%g %g)+(%g %g)\n",
-	    j,lf->pos,lf->length,
-	    lf->rect.origin.x,lf->rect.origin.y,
-	    lf->rect.size.width,lf->rect.size.height);
-	  for (k = 0, lp = lf->points; k < lf->num_points; k++, lp++)
-	    printf("               p%3i : %5i+%5i\n",k,lp->pos,lp->length);
-	  for (k = 0, la = lf->attachments; k < lf->num_attachments; k++, la++)
-	    printf("               a%3i : %5i+%5i\n",k,la->pos,la->length);
-	}
+        printf("tc %2ld, %5ld+%5ld  (complete %i)\n",
+               (long)i, (long)tc->pos, (long)tc->length, tc->complete);
+        printf("  lfs: (%3ld)\n", (long)tc->num_linefrags);
+        for (j = 0, lf = tc->linefrags; j < tc->num_linefrags; j++, lf++)
+        {
+            printf("   %3ld : %5ld+%5ld  (%g %g)+(%g %g)\n",
+                   (long)j, (long)lf->pos, (long)lf->length,
+                   lf->rect.origin.x, lf->rect.origin.y,
+                   lf->rect.size.width, lf->rect.size.height);
+            for (k = 0, lp = lf->points; k < lf->num_points; k++, lp++)
+                printf("               p%3ld : %5ld+%5ld\n", (long)k, (long)lp->pos, (long)lp->length);
+            for (k = 0, la = lf->attachments; k < lf->num_attachments; k++, la++)
+                printf("               a%3ld : %5ld+%5ld\n", (long)k, (long)la->pos, (long)la->length);
+        }
+        printf("  softs: (%3ld)\n", (long)tc->num_soft);
+        for (; j < tc->num_linefrags + tc->num_soft; j++, lf++)
+        {
+            printf("   %3ld : %5ld+%5ld  (%g %g)+(%g %g)\n",
+                   (long)j, (long)lf->pos, (long)lf->length,
+                   lf->rect.origin.x, lf->rect.origin.y,
+                   lf->rect.size.width, lf->rect.size.height);
+            for (k = 0, lp = lf->points; k < lf->num_points; k++, lp++)
+                printf("               p%3ld : %5ld+%5ld\n", (long)k, (long)lp->pos, (long)lp->length);
+            for (k = 0, la = lf->attachments; k < lf->num_attachments; k++, la++)
+                printf("               a%3ld : %5ld+%5ld\n", (long)k, (long)la->pos, (long)la->length);
+        }
     }
-    printf("layout to: char %i, glyph %i\n",layout_char,layout_glyph);
+    printf("layout to: char %ld, glyph %ld\n", (long)layout_char, (long)layout_glyph);
 }
 
 
@@ -2531,13 +2531,13 @@ about layout to do smarter invalidation. The comments at the beginning of
 this file describes this.
 */
 - (void) textStorage: (NSTextStorage *)aTextStorage
-	      edited: (unsigned int)mask
-	       range: (NSRange)range
-      changeInLength: (int)lengthChange
+              edited: (NSUInteger)mask
+               range: (NSRange)range
+      changeInLength: (NSInteger)lengthChange
     invalidatedRange: (NSRange)invalidatedRange
 {
   NSRange r;
-  unsigned int original_last_glyph;
+  NSUInteger original_last_glyph;
 
 /*  printf("\n*** invalidating\n");
   [self _dumpLayout];*/
@@ -2556,7 +2556,7 @@ this file describes this.
 
   if (_temporaryAttributes != nil && (mask & NSTextStorageEditedCharacters) != 0)
     {
-      int i;
+      NSInteger i;
       NSArray *attrs;
       NSRange oldRange = NSMakeRange(range.location, range.length - lengthChange);
 
@@ -2596,14 +2596,14 @@ this file describes this.
   */
   if (layout_char > 0 && layout_char >= r.location)
     {
-      unsigned int glyph_index, last_glyph;
+      NSUInteger glyph_index, last_glyph;
       textcontainer_t *tc;
       linefrag_t *lf;
-      int i, j, k;
-      int new_num;
+      NSInteger i, j, k;
+      NSInteger new_num;
       NSRange char_range;
-      unsigned int new_last_glyph;
-      int glyph_delta;
+      NSUInteger new_last_glyph;
+      NSInteger glyph_delta;
 
       /*
       If we had layout beyond the modified characters, update layout_char.
diff --git a/Source/NSLevelIndicatorCell.m b/Source/NSLevelIndicatorCell.m
index 7c89a75..1c712f3 100644
--- a/Source/NSLevelIndicatorCell.m
+++ b/Source/NSLevelIndicatorCell.m
@@ -495,8 +495,8 @@
       [aCoder encodeDouble: _criticalValue forKey: @"NSCriticalValue"];
       [aCoder encodeDouble: [self doubleValue] forKey: @"NSValue"];
       [aCoder encodeInt: _style forKey: @"NSIndicatorStyle"];
-      [aCoder encodeInt: _numberOfMajorTickMarks forKey: @"NSNumberOfMajorTickMarks"];
-      [aCoder encodeInt: _numberOfTickMarks forKey: @"NSNumberOfTickMarks"];
+      [aCoder encodeInteger: _numberOfMajorTickMarks forKey: @"NSNumberOfMajorTickMarks"];
+      [aCoder encodeInteger: _numberOfTickMarks forKey: @"NSNumberOfTickMarks"];
       [aCoder encodeInt: _tickMarkPosition forKey: @"NSTickMarkPosition"];
     }
   else
@@ -505,10 +505,10 @@
       [aCoder encodeValueOfObjCType: @encode(double) at: &_maxValue];
       [aCoder encodeValueOfObjCType: @encode(double) at: &_warningValue];
       [aCoder encodeValueOfObjCType: @encode(double) at: &_criticalValue];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &_style];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &_numberOfMajorTickMarks];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &_numberOfTickMarks];
-      [aCoder encodeValueOfObjCType: @encode(int) at: &_tickMarkPosition];
+      [aCoder encodeValueOfObjCType: @encode(NSLevelIndicatorStyle) at: &_style];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &_numberOfMajorTickMarks];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &_numberOfTickMarks];
+      [aCoder encodeValueOfObjCType: @encode(NSTickMarkPosition) at: &_tickMarkPosition];
     }
 }
 
@@ -544,11 +544,11 @@
         }
       if ([aDecoder containsValueForKey: @"NSNumberOfMajorTickMarks"])
         {
-          _numberOfMajorTickMarks = [aDecoder decodeIntForKey: @"NSNumberOfMajorTickMarks"];
+          _numberOfMajorTickMarks = [aDecoder decodeIntegerForKey: @"NSNumberOfMajorTickMarks"];
         }
       if ([aDecoder containsValueForKey: @"NSNumberOfTickMarks"])
         {
-          _numberOfTickMarks = [aDecoder decodeIntForKey: @"NSNumberOfTickMarks"];
+          _numberOfTickMarks = [aDecoder decodeIntegerForKey: @"NSNumberOfTickMarks"];
         }
       if ([aDecoder containsValueForKey: @"NSTickMarkPosition"])
         {
@@ -561,10 +561,10 @@
       [aDecoder decodeValueOfObjCType: @encode(double) at: &_maxValue];
       [aDecoder decodeValueOfObjCType: @encode(double) at: &_warningValue];
       [aDecoder decodeValueOfObjCType: @encode(double) at: &_criticalValue];
-      [aDecoder decodeValueOfObjCType: @encode(int) at: &_style];
-      [aDecoder decodeValueOfObjCType: @encode(int) at: &_numberOfMajorTickMarks];
-      [aDecoder decodeValueOfObjCType: @encode(int) at: &_numberOfTickMarks];
-      [aDecoder decodeValueOfObjCType: @encode(int) at: &_tickMarkPosition];
+      [aDecoder decodeValueOfObjCType: @encode(NSLevelIndicatorStyle) at: &_style];
+      [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &_numberOfMajorTickMarks];
+      [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &_numberOfTickMarks];
+      [aDecoder decodeValueOfObjCType: @encode(NSTickMarkPosition) at: &_tickMarkPosition];
     }
   
   return self;
diff --git a/Source/NSMatrix.m b/Source/NSMatrix.m
index 8c1e4cf..c292185 100644
--- a/Source/NSMatrix.m
+++ b/Source/NSMatrix.m
@@ -118,48 +118,48 @@ static NSNotificationCenter *nc;
 
 /* Some stuff needed to compute the selection in the list mode. */
 typedef struct {
-  int x;
-  int y;
+  NSInteger x;
+  NSInteger y;
 } MPoint;
 
 typedef struct {
-  int x;
-  int y;
-  int width;
-  int height;
+  NSInteger x;
+  NSInteger y;
+  NSInteger width;
+  NSInteger height;
 } MRect;
 
 typedef struct _GSMatrixFlags {
 #if GS_WORDS_BIGENDIAN == 1
-  unsigned int isHighlight:1;
-  unsigned int isRadio:1;
-  unsigned int isList:1;
-  unsigned int allowsEmptySelection:1;
-  unsigned int autoScroll:1;
-  unsigned int selectionByRect:1;
-  unsigned int drawCellBackground:1;
-  unsigned int drawBackground:1;
-  unsigned int autosizesCells:1;
-  unsigned int drawingAncestor:1;
-  unsigned int tabKeyTraversesCells:1;
-  unsigned int tabKeyTraversesCellsExplicitly:1;
-  unsigned int canSearchIncrementally:1;
-  unsigned int unused:19;
+  uint32_t isHighlight:1;
+  uint32_t isRadio:1;
+  uint32_t isList:1;
+  uint32_t allowsEmptySelection:1;
+  uint32_t autoScroll:1;
+  uint32_t selectionByRect:1;
+  uint32_t drawCellBackground:1;
+  uint32_t drawBackground:1;
+  uint32_t autosizesCells:1;
+  uint32_t drawingAncestor:1;
+  uint32_t tabKeyTraversesCells:1;
+  uint32_t tabKeyTraversesCellsExplicitly:1;
+  uint32_t canSearchIncrementally:1;
+  uint32_t unused:19;
 #else
-  unsigned int unused:19;
-  unsigned int canSearchIncrementally:1;
-  unsigned int tabKeyTraversesCellsExplicitly:1;
-  unsigned int tabKeyTraversesCells:1;
-  unsigned int drawingAncestor:1;
-  unsigned int autosizesCells:1;
-  unsigned int drawBackground:1;
-  unsigned int drawCellBackground:1;
-  unsigned int selectionByRect:1;
-  unsigned int autoScroll:1;
-  unsigned int allowsEmptySelection:1;
-  unsigned int isList:1;
-  unsigned int isRadio:1;
-  unsigned int isHighlight:1;  
+  uint32_t unused:19;
+  uint32_t canSearchIncrementally:1;
+  uint32_t tabKeyTraversesCellsExplicitly:1;
+  uint32_t tabKeyTraversesCells:1;
+  uint32_t drawingAncestor:1;
+  uint32_t autosizesCells:1;
+  uint32_t drawBackground:1;
+  uint32_t drawCellBackground:1;
+  uint32_t selectionByRect:1;
+  uint32_t autoScroll:1;
+  uint32_t allowsEmptySelection:1;
+  uint32_t isList:1;
+  uint32_t isRadio:1;
+  uint32_t isHighlight:1;  
 #endif
 } GSMatrixFlags;
 
@@ -170,20 +170,20 @@ static inline MPoint MakePoint (int x, int y)
 }
 
 @interface NSMatrix (PrivateMethods)
-- (void) _renewRows: (int)row
-	    columns: (int)col
-	   rowSpace: (int)rowSpace
-	   colSpace: (int)colSpace;
-- (void) _setState: (int)state
+- (void) _renewRows: (NSInteger)row
+	    columns: (NSInteger)col
+	   rowSpace: (NSInteger)rowSpace
+	   colSpace: (NSInteger)colSpace;
+- (void) _setState: (NSInteger)state
 	 highlight: (BOOL)highlight
-	startIndex: (int)start
-	  endIndex: (int)end;
-- (BOOL) _selectNextSelectableCellAfterRow: (int)row
-				    column: (int)column;
-- (BOOL) _selectPreviousSelectableCellBeforeRow: (int)row
-					 column: (int)column;
-- (void) _setKeyRow: (int) row
-             column: (int) column;
+	startIndex: (NSInteger)start
+	  endIndex: (NSInteger)end;
+- (BOOL) _selectNextSelectableCellAfterRow: (NSInteger)row
+				    column: (NSInteger)column;
+- (BOOL) _selectPreviousSelectableCellBeforeRow: (NSInteger)row
+					 column: (NSInteger)column;
+- (void) _setKeyRow: (NSInteger) row
+             column: (NSInteger) column;
 @end
 
 enum {
@@ -469,8 +469,8 @@ static SEL getSel;
  */
 - (void) insertColumn: (NSInteger)column withCells: (NSArray*)cellArray
 {
-  int	count = [cellArray count];
-  int	i = _numCols + 1;
+  NSInteger count = [cellArray count];
+  NSInteger i = _numCols + 1;
 
   if (column < 0)
     {
@@ -512,8 +512,8 @@ static SEL getSel;
     {
       for (i = 0; i < _numRows; i++)
 	{
-	  int	j = _numCols;
-	  id	old = _cells[i][j-1];
+	  NSInteger j = _numCols;
+	  id old = _cells[i][j-1];
 
 	  while (--j > column)
 	    {
@@ -566,8 +566,8 @@ static SEL getSel;
  */
 - (void) insertRow: (NSInteger)row withCells: (NSArray*)cellArray
 {
-  int	count = [cellArray count];
-  int	i = _numRows + 1;
+  NSInteger	count = [cellArray count];
+  NSInteger	i = _numRows + 1;
 
   if (row < 0)
     {
@@ -731,11 +731,11 @@ static SEL getSel;
 {
   if (column >= 0 && column < _numCols)
     {
-      int i;
+      NSInteger i;
 
       for (i = 0; i < _maxRows; i++)
 	{
-	  int	j;
+	  NSInteger j;
 
 	  AUTORELEASE(_cells[i][column]);
 	  for (j = column + 1; j < _maxCols; j++)
@@ -784,7 +784,7 @@ static SEL getSel;
 {
   if (row >= 0 && row < _numRows)
     {
-      int	i;
+      NSInteger i;
 
 #if	GS_WITH_GC == 0
       for (i = 0; i < _maxCols; i++)
@@ -927,10 +927,10 @@ static SEL getSel;
   BOOL	betweenCols;
   BOOL	beyondRows;
   BOOL	beyondCols;
-  int	approxRow = aPoint.y / (_cellSize.height + _intercell.height);
-  float	approxRowsHeight = approxRow * (_cellSize.height + _intercell.height);
-  int	approxCol = aPoint.x / (_cellSize.width + _intercell.width);
-  float	approxColsWidth = approxCol * (_cellSize.width + _intercell.width);
+  NSInteger approxRow = aPoint.y / (_cellSize.height + _intercell.height);
+  CGFloat   approxRowsHeight = approxRow * (_cellSize.height + _intercell.height);
+  NSInteger approxCol = aPoint.x / (_cellSize.width + _intercell.width);
+  CGFloat   approxColsWidth = approxCol * (_cellSize.width + _intercell.width);
 
   /* First check the limit cases - is the point outside the matrix */
   beyondCols = (aPoint.x > _bounds.size.width  || aPoint.x < 0);
@@ -1194,7 +1194,7 @@ static SEL getSel;
   [self setNeedsDisplay: YES];
 }
 
-- (void) _selectCell: (NSCell *)aCell atRow: (int)row column: (int)column
+- (void) _selectCell: (NSCell *)aCell atRow: (NSInteger)row column: (NSInteger)column
 {
   if (aCell)
     {
@@ -1290,12 +1290,12 @@ static SEL getSel;
  */
 - (BOOL) selectCellWithTag: (NSInteger)anInt
 {
-  id	aCell;
-  int	i = _numRows;
+  id aCell;
+  NSInteger i = _numRows;
 
   while (i-- > 0)
     {
-      int	j = _numCols;
+      NSInteger j = _numCols;
 
       while (j-- > 0)
 	{
@@ -1367,8 +1367,8 @@ static SEL getSel;
        * So, cells from A to E are selected and, if S is outside the
        * range from A to E, cells from S to its closest point are unselected
        */
-      int selStart = MIN(anchorPos, endPos);
-      int selEnd = MAX(anchorPos, endPos);
+      NSInteger selStart = MIN(anchorPos, endPos);
+      NSInteger selEnd = MAX(anchorPos, endPos);
       [self _setState: flag ? NSOnState : NSOffState
 	    highlight: flag
 	    startIndex: selStart
@@ -1414,14 +1414,14 @@ static SEL getSel;
       MPoint anchorPoint = POINT_FROM_INDEX(anchorPos);
       MPoint endPoint = POINT_FROM_INDEX(endPos);
       MPoint startPoint = POINT_FROM_INDEX(startPos);
-      int minx_AE = MIN(anchorPoint.x, endPoint.x);
-      int miny_AE = MIN(anchorPoint.y, endPoint.y);
-      int maxx_AE = MAX(anchorPoint.x, endPoint.x);
-      int maxy_AE = MAX(anchorPoint.y, endPoint.y);
-      int minx_AS = MIN(anchorPoint.x, startPoint.x);
-      int miny_AS = MIN(anchorPoint.y, startPoint.y);
-      int maxx_AS = MAX(anchorPoint.x, startPoint.x);
-      int maxy_AS = MAX(anchorPoint.y, startPoint.y);
+      NSInteger minx_AE = MIN(anchorPoint.x, endPoint.x);
+      NSInteger miny_AE = MIN(anchorPoint.y, endPoint.y);
+      NSInteger maxx_AE = MAX(anchorPoint.x, endPoint.x);
+      NSInteger maxy_AE = MAX(anchorPoint.y, endPoint.y);
+      NSInteger minx_AS = MIN(anchorPoint.x, startPoint.x);
+      NSInteger miny_AS = MIN(anchorPoint.y, startPoint.y);
+      NSInteger maxx_AS = MAX(anchorPoint.x, startPoint.x);
+      NSInteger maxy_AS = MAX(anchorPoint.y, startPoint.y);
       
       [self _setState: flag ? NSOnState : NSOffState
 	    highlight: flag
@@ -1463,7 +1463,7 @@ static SEL getSel;
   and being correct comes first.
   */
   {
-    int i, j;
+    NSInteger i, j;
     for (i = _numRows - 1; i >= 0; i--)
       {
 	for (j = _numCols - 1; j >= 0; j--)
@@ -1500,15 +1500,15 @@ static SEL getSel;
  */
 - (id) cellWithTag: (NSInteger)anInt
 {
-  int	i = _numRows;
+  NSInteger i = _numRows;
 
   while (i-- > 0)
     {
-      int	j = _numCols;
+      NSInteger j = _numCols;
 
       while (j-- > 0)
 	{
-	  id	aCell = _cells[i][j];
+	  id aCell = _cells[i][j];
 
 	  if ([aCell tag] == anInt)
 	    {
@@ -1619,7 +1619,7 @@ static SEL getSel;
   {
     NSText *text = [_window fieldEditor: YES
 			forObject: self];
-    int length;
+    NSInteger length;
 
     if ([text superview] != nil)
       if ([text resignFirstResponder] == NO)
@@ -1630,13 +1630,12 @@ static SEL getSel;
     /* See comment in NSTextField */
     length = [[_selectedCell stringValue] length];
     _textObject = [_selectedCell setUpFieldEditorAttributes: text];
-    [_selectedCell selectWithFrame: [self cellFrameAtRow: _selectedRow
-					  column: _selectedColumn]
-		   inView: self
-		   editor: _textObject
-		   delegate: self
-		   start: 0
-		   length: length];
+    [_selectedCell selectWithFrame: [self cellFrameAtRow: _selectedRow column: _selectedColumn]
+                            inView: self
+                            editor: _textObject
+                          delegate: self
+                             start: 0
+                            length: length];
     return _selectedCell;
   }
 }
@@ -1924,8 +1923,8 @@ static SEL getSel;
 - (void) sizeToCells
 {
   NSSize newSize;
-  int nc = _numCols;
-  int nr = _numRows;
+  NSInteger nc = _numCols;
+  NSInteger nr = _numRows;
 
   if (!nc)
     nc = 1;
@@ -2018,9 +2017,9 @@ static SEL getSel;
 
 - (void) drawRect: (NSRect)rect
 {
-  int i, j;
-  int row1, col1;	// The cell at the upper left corner
-  int row2, col2;	// The cell at the lower right corner
+  NSInteger i, j;
+  NSInteger row1, col1;	// The cell at the upper left corner
+  NSInteger row2, col2;	// The cell at the lower right corner
 
   if (_drawsBackground)
     {
@@ -2272,7 +2271,7 @@ static SEL getSel;
 
 	  if ([mouseCell isEnabled])
 	    {	      
-              int old_state;
+              NSInteger old_state;
               
               /* Select the cell before tracking. The cell can send its action
                * during tracking, and the target discovers which cell was
@@ -2490,7 +2489,7 @@ static SEL getSel;
 {
   NSInteger row, column;
   NSPoint lastLocation = [theEvent locationInWindow];
-  int clickCount;
+  NSInteger clickCount;
 
   /*
    * Pathological case -- ignore mouse down
@@ -2622,8 +2621,8 @@ static SEL getSel;
               && (mask & relevantModifiersMask) == (modifiers & relevantModifiersMask))
 	    {
 	      NSCell *oldSelectedCell = _selectedCell;
-	      int     oldSelectedRow = _selectedRow; 
-	      int     oldSelectedColumn = _selectedColumn;
+	      NSInteger oldSelectedRow = _selectedRow; 
+	      NSInteger oldSelectedColumn = _selectedColumn;
 
 	      _selectedCell = aCell;
 	      [self lockFocus];
@@ -2699,15 +2698,15 @@ static SEL getSel;
       memcpy((void *)&mFlags,(void *)&matrixFlags,sizeof(unsigned int));
       [aCoder encodeInt: mFlags forKey: @"NSMatrixFlags"];
 
-      [aCoder encodeInt: _numCols forKey: @"NSNumCols"];
-      [aCoder encodeInt: _numRows forKey: @"NSNumRows"];
+      [aCoder encodeInteger: _numCols forKey: @"NSNumCols"];
+      [aCoder encodeInteger: _numRows forKey: @"NSNumRows"];
       [aCoder encodeObject: [self cells] forKey: @"NSCells"];
-      [aCoder encodeInt: _selectedColumn forKey: @"NSSelectedCol"];
-      [aCoder encodeInt: _selectedRow forKey: @"NSSelectedRow"];
+      [aCoder encodeInteger: _selectedColumn forKey: @"NSSelectedCol"];
+      [aCoder encodeInteger: _selectedRow forKey: @"NSSelectedRow"];
     }
   else
     {
-      [aCoder encodeValueOfObjCType: @encode (int) at: &_mode];
+      [aCoder encodeValueOfObjCType: @encode (NSMatrixMode) at: &_mode];
       [aCoder encodeValueOfObjCType: @encode (BOOL) at: &_allowsEmptySelection];
       [aCoder encodeValueOfObjCType: @encode (BOOL) at: &_selectionByRect];
       [aCoder encodeValueOfObjCType: @encode (BOOL) at: &_autosizesCells];
@@ -2720,8 +2719,8 @@ static SEL getSel;
       [aCoder encodeValueOfObjCType: @encode (BOOL) at: &_drawsCellBackground];
       [aCoder encodeObject: NSStringFromClass (_cellClass)];
       [aCoder encodeObject: _cellPrototype];
-      [aCoder encodeValueOfObjCType: @encode (int) at: &_numRows];
-      [aCoder encodeValueOfObjCType: @encode (int) at: &_numCols];
+      [aCoder encodeValueOfObjCType: @encode (NSInteger) at: &_numRows];
+      [aCoder encodeValueOfObjCType: @encode (NSInteger) at: &_numCols];
       
       /* This is slower, but does not expose NSMatrix internals and will work 
      with subclasses */
@@ -2743,9 +2742,9 @@ static SEL getSel;
 {
   Class class;
   id cell;
-  int rows = 0, columns = 0;
+  NSInteger rows = 0, columns = 0;
   NSArray *array;
-  int i = 0, count = 0;
+  NSInteger i = 0, count = 0;
 
   self = [super initWithCoder: aDecoder];
   if (!self)
@@ -2812,11 +2811,11 @@ static SEL getSel;
         }
       if ([aDecoder containsValueForKey: @"NSNumCols"])
         {
-          columns = [aDecoder decodeIntForKey: @"NSNumCols"];
+          columns = [aDecoder decodeIntegerForKey: @"NSNumCols"];
         }
       if ([aDecoder containsValueForKey: @"NSNumRows"])
         {
-          rows = [aDecoder decodeIntForKey: @"NSNumRows"];
+          rows = [aDecoder decodeIntegerForKey: @"NSNumRows"];
         }
 
       array = [aDecoder decodeObjectForKey: @"NSCells"];
@@ -2836,7 +2835,7 @@ static SEL getSel;
 
       for (i = 0; i < count; i++)
         {
-          int row, column;
+          NSInteger row, column;
           
           cell = [array objectAtIndex: i];
           row = i / columns;
@@ -2854,11 +2853,11 @@ static SEL getSel;
       columns = -1;
       if ([aDecoder containsValueForKey: @"NSSelectedCol"])
         {
-          columns = [aDecoder decodeIntForKey: @"NSSelectedCol"];
+          columns = [aDecoder decodeIntegerForKey: @"NSSelectedCol"];
         }
       if ([aDecoder containsValueForKey: @"NSSelectedRow"])
         {
-          rows = [aDecoder decodeIntForKey: @"NSSelectedRow"];
+          rows = [aDecoder decodeIntegerForKey: @"NSSelectedRow"];
         }
       if ((rows != -1) && (columns != -1))
         [self selectCellAtRow: rows column: columns];
@@ -2866,7 +2865,7 @@ static SEL getSel;
   else
     {
       _myZone = [self zone];
-      [aDecoder decodeValueOfObjCType: @encode (int) at: &_mode];
+      [aDecoder decodeValueOfObjCType: @encode (NSMatrixMode) at: &_mode];
       [aDecoder decodeValueOfObjCType: @encode (BOOL) at: &_allowsEmptySelection];
       [aDecoder decodeValueOfObjCType: @encode (BOOL) at: &_selectionByRect];
       [aDecoder decodeValueOfObjCType: @encode (BOOL) at: &_autosizesCells];
@@ -2895,8 +2894,8 @@ static SEL getSel;
           [self setCellClass: [object_getClass(self) cellClass]];
         }
       
-      [aDecoder decodeValueOfObjCType: @encode (int) at: &rows];
-      [aDecoder decodeValueOfObjCType: @encode (int) at: &columns];
+      [aDecoder decodeValueOfObjCType: @encode (NSInteger) at: &rows];
+      [aDecoder decodeValueOfObjCType: @encode (NSInteger) at: &columns];
 
       /* NB: This works without changes for NSForm */
       array = [aDecoder decodeObject];
@@ -2916,7 +2915,7 @@ static SEL getSel;
 
       for (i = 0; i < count; i++)
         {
-          int row, column;
+          NSInteger row, column;
 
           cell = [array objectAtIndex: i];
           row = i / columns;
@@ -3368,7 +3367,7 @@ static SEL getSel;
 - (void) _move: (unichar)pos
 {
   BOOL selectCell = NO;
-  int h, i, lastDottedRow, lastDottedColumn;
+  NSInteger h, i, lastDottedRow, lastDottedColumn;
 
   if (_mode == NSRadioModeMatrix || _mode == NSListModeMatrix)
     selectCell = YES;
@@ -3566,7 +3565,7 @@ static SEL getSel;
 
 - (void) _shiftModifier: (unichar)character
 {
-  int i, lastDottedRow, lastDottedColumn;
+  NSInteger i, lastDottedRow, lastDottedColumn;
 
   lastDottedRow = _dottedRow;
   lastDottedColumn = _dottedColumn;
@@ -3928,16 +3927,16 @@ static SEL getSel;
  * NB. new spaces in the matrix are pre-initialised with nil values so
  * that replacing them doesn't cause attempts to release random memory.
  */
-- (void) _renewRows: (int)row
-	    columns: (int)col
-	   rowSpace: (int)rowSpace
-	   colSpace: (int)colSpace
+- (void) _renewRows: (NSInteger)row
+	    columns: (NSInteger)col
+	   rowSpace: (NSInteger)rowSpace
+	   colSpace: (NSInteger)colSpace
 {
-  int		i, j;
-  int		oldMaxC;
-  int		oldMaxR;
-  SEL		mkSel = @selector(makeCellAtRow:column:);
-  IMP		mkImp = [self methodForSelector: mkSel];
+  NSInteger i, j;
+  NSInteger oldMaxC;
+  NSInteger oldMaxR;
+  SEL       mkSel = @selector(makeCellAtRow:column:);
+  IMP       mkImp = [self methodForSelector: mkSel];
 
 //NSLog(@"%x - mr: %d mc:%d nr:%d nc:%d r:%d c:%d", (unsigned)self, _maxRows, _maxCols, _numRows, _numCols, row, col);
   if (row < 0)
@@ -3979,7 +3978,7 @@ static SEL getSel;
 
   if (col > oldMaxC)
     {
-      int	end = col - 1;
+      NSInteger end = col - 1;
 
       for (i = 0; i < oldMaxR; i++)
 	{
@@ -4010,7 +4009,7 @@ static SEL getSel;
 
   if (row > oldMaxR)
     {
-      int	end = row - 1;
+      NSInteger end = row - 1;
 
       _cells = NSZoneRealloc(_myZone, _cells, row * sizeof(id*));
       _selectedCells
@@ -4057,19 +4056,19 @@ static SEL getSel;
 //NSLog(@"%x - end mr: %d mc:%d nr:%d nc:%d r:%d c:%d", (unsigned)self, _maxRows, _maxCols, _numRows, _numCols, row, col);
 }
 
-- (void) _setState: (int)state
+- (void) _setState: (NSInteger)state
 	 highlight: (BOOL)highlight
-	startIndex: (int)start
-	  endIndex: (int)end
+	startIndex: (NSInteger)start
+	  endIndex: (NSInteger)end
 {
-  int		i;
-  MPoint	startPoint = POINT_FROM_INDEX(start);
-  MPoint	endPoint = POINT_FROM_INDEX(end);
+  NSInteger i;
+  MPoint    startPoint = POINT_FROM_INDEX(start);
+  MPoint    endPoint = POINT_FROM_INDEX(end);
 
   for (i = startPoint.y; i <= endPoint.y; i++)
     {
-      int	j;
-      int	colLimit;
+      NSInteger j;
+      NSInteger colLimit;
 
       if (_selectionByRect || i == startPoint.y)
 	{
@@ -4109,10 +4108,10 @@ static SEL getSel;
 }
 
 // Return YES on success; NO if no selectable cell found.
--(BOOL) _selectNextSelectableCellAfterRow: (int)row
-				   column: (int)column
+-(BOOL) _selectNextSelectableCellAfterRow: (NSInteger)row
+				   column: (NSInteger)column
 {
-  int i,j;
+  NSInteger i,j;
 
   if (row > -1)
     {
@@ -4147,10 +4146,10 @@ static SEL getSel;
   return NO;
 }
 
--(BOOL) _selectPreviousSelectableCellBeforeRow: (int)row
-					column: (int)column
+-(BOOL) _selectPreviousSelectableCellBeforeRow: (NSInteger)row
+					column: (NSInteger)column
 {
-  int i,j;
+  NSInteger i,j;
 
   if (row < _numRows)
     {
@@ -4185,7 +4184,7 @@ static SEL getSel;
   return NO;
 }
 
-- (void) _setKeyRow: (int)row column: (int)column
+- (void) _setKeyRow: (NSInteger)row column: (NSInteger)column
 {
   if (_dottedRow == row && _dottedColumn == column)
     {
diff --git a/Source/NSMenu.m b/Source/NSMenu.m
index 3ef5b67..7b96d76 100644
--- a/Source/NSMenu.m
+++ b/Source/NSMenu.m
@@ -257,7 +257,7 @@ static BOOL menuBarVisible = YES;
 {
   NSString *infoString = _(@"Info");
   NSString *servicesString = _(@"Services");
-  int i;
+  NSInteger i;
 
   if ([self isEqual: [NSApp mainMenu]] == YES)
     {
@@ -293,7 +293,7 @@ static BOOL menuBarVisible = YES;
             }
           else
             {
-              int index = [self indexOfItem: appItem];
+              NSInteger index = [self indexOfItem: appItem];
               
               if (index != 0)
                 {
@@ -365,7 +365,7 @@ static BOOL menuBarVisible = YES;
                * Everything above the Serives menu goes into the info submenu,
                * the rest into the main menu.
                */
-              int k = [appMenu indexOfItemWithTitle: servicesString];
+              NSInteger k = [appMenu indexOfItemWithTitle: servicesString];
 
               // The menu may not be localized, so we have to 
               // check both the English and the local version.
@@ -715,7 +715,7 @@ static BOOL menuBarVisible = YES;
 }
 
 - (void) insertItem: (id <NSMenuItem>)newItem
-	    atIndex: (NSInteger)index
+            atIndex: (NSInteger)index
 {
   NSNotification *inserted;
   NSDictionary   *d;
@@ -742,7 +742,7 @@ static BOOL menuBarVisible = YES;
   
   // Create the notification for the menu representation.
   d = [NSDictionary
-	  dictionaryWithObject: [NSNumber numberWithInt: index]
+	  dictionaryWithObject: [NSNumber numberWithInteger: index]
 	  forKey: @"NSMenuItemIndex"];
   inserted = [NSNotification
 		 notificationWithName: NSMenuDidAddItemNotification
@@ -759,10 +759,10 @@ static BOOL menuBarVisible = YES;
   [newItem setMenu: self];
 }
 
-- (id <NSMenuItem>) insertItemWithTitle: (NSString*)aString
-			         action: (SEL)aSelector
-			  keyEquivalent: (NSString*)charCode 
-			        atIndex: (NSInteger)index
+- (id <NSMenuItem>) insertItemWithTitle: (NSString *)aString
+                                 action: (SEL)aSelector
+                          keyEquivalent: (NSString *)charCode 
+                                atIndex: (NSInteger)index
 {
   NSMenuItem *anItem = [[NSMenuItem alloc] initWithTitle: aString
 					   action: aSelector
@@ -792,7 +792,7 @@ static BOOL menuBarVisible = YES;
 
 - (void) removeItem: (id <NSMenuItem>)anItem
 {
-  int index = [self indexOfItem: anItem];
+  NSInteger index = [self indexOfItem: anItem];
 
   if (-1 == index)
     return;
@@ -814,7 +814,7 @@ static BOOL menuBarVisible = YES;
   _menu.needsSizing = YES;
   [(NSMenuView*)_view setNeedsSizing: YES];
   
-  d = [NSDictionary dictionaryWithObject: [NSNumber numberWithInt: index]
+  d = [NSDictionary dictionaryWithObject: [NSNumber numberWithInteger: index]
 		    forKey: @"NSMenuItemIndex"];
   removed = [NSNotification
 		notificationWithName: NSMenuDidRemoveItemNotification
@@ -840,7 +840,7 @@ static BOOL menuBarVisible = YES;
   _menu.needsSizing = YES;
   [(NSMenuView*)_view setNeedsSizing: YES];
 
-  d = [NSDictionary dictionaryWithObject: [NSNumber numberWithInt: index]
+  d = [NSDictionary dictionaryWithObject: [NSNumber numberWithInteger: index]
 		    forKey: @"NSMenuItemIndex"];
   changed = [NSNotification
 	      notificationWithName: NSMenuDidChangeItemNotification
@@ -862,8 +862,8 @@ static BOOL menuBarVisible = YES;
  */
 - (id <NSMenuItem>) itemWithTag: (NSInteger)aTag
 {
-  unsigned i;
-  unsigned count = [_items count];
+  NSUInteger i;
+  NSUInteger count = [_items count];
 
   for (i = 0; i < count; i++)
     {
@@ -877,8 +877,8 @@ static BOOL menuBarVisible = YES;
 
 - (id <NSMenuItem>) itemWithTitle: (NSString*)aString
 {
-  unsigned i;
-  unsigned count = [_items count];
+  NSUInteger i;
+  NSUInteger count = [_items count];
 
   for (i = 0; i < count; i++)
     {
@@ -945,10 +945,10 @@ static BOOL menuBarVisible = YES;
 }
 
 - (NSInteger) indexOfItemWithTarget: (id)anObject
-		    andAction: (SEL)actionSelector
+                          andAction: (SEL)actionSelector
 {
-  unsigned i;
-  unsigned count = [_items count];
+  NSUInteger i;
+  NSUInteger count = [_items count];
 
   for (i = 0; i < count; i++)
     {
@@ -1129,7 +1129,7 @@ static BOOL menuBarVisible = YES;
 
   if ([self autoenablesItems])
     {
-      unsigned i, count;
+      NSUInteger i, count;
 
       count = [_items count];  
       
@@ -1231,12 +1231,12 @@ static BOOL menuBarVisible = YES;
 //
 - (BOOL) performKeyEquivalent: (NSEvent*)theEvent
 {
-  unsigned      i;
-  unsigned      count = [_items count];
+  NSUInteger      i;
+  NSUInteger      count = [_items count];
   NSEventType   type = [theEvent type];
-  unsigned int modifiers = [theEvent modifierFlags];
+  NSUInteger modifiers = [theEvent modifierFlags];
   NSString	*keyEquivalent = [theEvent charactersIgnoringModifiers];
-  unsigned int relevantModifiersMask = NSCommandKeyMask | NSAlternateKeyMask | NSControlKeyMask;
+  NSUInteger relevantModifiersMask = NSCommandKeyMask | NSAlternateKeyMask | NSControlKeyMask;
   /* Take shift key into account only for control keys and arrow and function keys */
   if ((modifiers & NSFunctionKeyMask)
       || ([keyEquivalent length] > 0 && [[NSCharacterSet controlCharacterSet] characterIsMember:[keyEquivalent characterAtIndex:0]]))
@@ -1274,7 +1274,7 @@ static BOOL menuBarVisible = YES;
         }
       else
         {
-          unsigned int mask = [item keyEquivalentModifierMask];
+          NSUInteger mask = [item keyEquivalentModifierMask];
 
           if ([[item keyEquivalent] isEqualToString: keyEquivalent] 
             && (modifiers & relevantModifiersMask) == (mask & relevantModifiersMask))
@@ -1364,7 +1364,7 @@ static BOOL menuBarVisible = YES;
   _delegate = delegate;
 }
 
-- (float) menuBarHeight
+- (CGFloat) menuBarHeight
 {
   // FIXME
   return [NSMenuView menuBarHeight];
@@ -1701,8 +1701,8 @@ static BOOL menuBarVisible = YES;
 - (id) copyWithZone: (NSZone*)zone
 {
   NSMenu *new = [[NSMenu allocWithZone: zone] initWithTitle: _title];
-  unsigned i;
-  unsigned count = [_items count];
+  NSUInteger i;
+  NSUInteger count = [_items count];
 
   [new setAutoenablesItems: _menu.autoenable];
   for (i = 0; i < count; i++)
diff --git a/Source/NSMenuItem.m b/Source/NSMenuItem.m
index 522329d..d3aad19 100644
--- a/Source/NSMenuItem.m
+++ b/Source/NSMenuItem.m
@@ -601,13 +601,13 @@ static Class imageClass;
 	  [aCoder encodeObject: _submenu forKey: @"NSSubmenu"];
 	}
 
-      [aCoder encodeInt: _keyEquivalentModifierMask forKey: @"NSKeyEquivModMask"];
-      [aCoder encodeInt: _mnemonicLocation forKey: @"NSMnemonicLoc"];
-      [aCoder encodeInt: _state forKey: @"NSState"];
+      [aCoder encodeInteger: _keyEquivalentModifierMask forKey: @"NSKeyEquivModMask"];
+      [aCoder encodeInteger: _mnemonicLocation forKey: @"NSMnemonicLoc"];
+      [aCoder encodeInteger: _state forKey: @"NSState"];
       [aCoder encodeBool: ![self isEnabled] forKey: @"NSIsDisabled"];
       if (_tag)
         {
-          [aCoder encodeInt: _tag forKey: @"NSTag"];
+          [aCoder encodeInteger: _tag forKey: @"NSTag"];
         }
     }
   else
@@ -644,7 +644,7 @@ static Class imageClass;
       NSString *action;
       NSString *key;
       BOOL isSeparator = NO;
-      int keyMask;
+      NSUInteger keyMask;
 
       if ([aDecoder containsValueForKey: @"NSIsSeparator"])
         {
@@ -699,17 +699,17 @@ static Class imageClass;
 
       // Set the key mask regardless of whether it is present;
       // i.e. set it to 0 if it is not present in the nib.
-      keyMask = [aDecoder decodeIntForKey: @"NSKeyEquivModMask"];
+      keyMask = [aDecoder decodeIntegerForKey: @"NSKeyEquivModMask"];
       [self setKeyEquivalentModifierMask: keyMask];
 
       if ([aDecoder containsValueForKey: @"NSMnemonicLoc"])
         {
-          int loc = [aDecoder decodeIntForKey: @"NSMnemonicLoc"];
+          NSUInteger loc = [aDecoder decodeIntegerForKey: @"NSMnemonicLoc"];
           [self setMnemonicLocation: loc];
         }
       if ([aDecoder containsValueForKey: @"NSState"])
         {
-          _state = [aDecoder decodeIntForKey: @"NSState"];
+          _state = [aDecoder decodeIntegerForKey: @"NSState"];
         }
       if ([aDecoder containsValueForKey: @"NSIsDisabled"])
         {
@@ -724,8 +724,7 @@ static Class imageClass;
     }
   else
     {
-      int version = [aDecoder versionForClassName: 
-				  @"NSMenuItem"];
+      NSInteger version = [aDecoder versionForClassName: @"NSMenuItem"];
     
       [aDecoder decodeValueOfObjCType: @encode(id) at: &_title];
       [aDecoder decodeValueOfObjCType: @encode(id) at: &_keyEquivalent];
diff --git a/Source/NSMenuItemCell.m b/Source/NSMenuItemCell.m
index 1686d91..90cb4e0 100644
--- a/Source/NSMenuItemCell.m
+++ b/Source/NSMenuItemCell.m
@@ -136,7 +136,7 @@ static NSString *commandKeyString = @"#";
 
 - (NSColor *) backgroundColor
 {
-  unsigned	mask;
+  NSInteger	mask;
   NSColor	*color;
   GSThemeControlState state = GSThemeNormalState;
 
@@ -226,7 +226,7 @@ static NSString *commandKeyString = @"#";
 - (NSString*) _keyEquivalentString
 {
   NSString *key = [_menuItem keyEquivalent];
-  unsigned int m = [_menuItem keyEquivalentModifierMask];
+  NSUInteger m = [_menuItem keyEquivalentModifierMask];
   NSString *ucKey = [key uppercaseString];
   unichar uchar;
 
@@ -626,7 +626,7 @@ static NSString *commandKeyString = @"#";
       if (_cell.is_bordered)
         {
           CGFloat yDelta = [_control_view isFlipped] ? 1. : 2.;
-          unsigned mask;
+          NSInteger mask;
           NSRect interiorFrame;
           
           if (_cell.is_highlighted)
@@ -668,7 +668,7 @@ static NSString *commandKeyString = @"#";
 
 - (GSThemeControlState) themeControlState
 {
-  unsigned mask;
+  NSInteger mask;
   GSThemeControlState state = GSThemeNormalState;
 
   // set the mask
@@ -820,7 +820,7 @@ static NSString *commandKeyString = @"#";
 
 - (void) drawInteriorWithFrame: (NSRect)cellFrame inView: (NSView*)controlView
 {
-  unsigned  mask;
+  NSInteger  mask;
 
   // Transparent buttons never draw
   if (_buttoncell_is_transparent)
diff --git a/Source/NSMenuView.m b/Source/NSMenuView.m
index f6bbcc1..3c9a930 100644
--- a/Source/NSMenuView.m
+++ b/Source/NSMenuView.m
@@ -141,7 +141,7 @@ static NSMapTable *viewInfo = 0;
     }
 }
 
-+ (float) menuBarHeight
++ (CGFloat) menuBarHeight
 {
   static float height = 0.0;
 
@@ -249,8 +249,8 @@ static NSMapTable *viewInfo = 0;
 - (void) setMenu: (NSMenu*)menu
 {
   NSNotificationCenter *theCenter = [NSNotificationCenter defaultCenter];
-  unsigned count;
-  unsigned i;
+  NSUInteger count;
+  NSUInteger i;
 
   if (_attachedMenu != nil)
     {
@@ -284,7 +284,7 @@ static NSMapTable *viewInfo = 0;
   count = [[[self menu] itemArray] count];
   for (i = 0; i < count; i++)
     {
-      NSNumber *n = [NSNumber numberWithInt: i];
+      NSNumber *n = [NSNumber numberWithUnsignedInteger: i];
       NSDictionary *d;
 
       d = [NSDictionary dictionaryWithObject: n forKey: @"NSMenuItemIndex"];
@@ -444,13 +444,13 @@ static NSMapTable *viewInfo = 0;
   return [_attachedMenu isTornOff];
 }
 
-- (void) setHorizontalEdgePadding: (float)pad
+- (void) setHorizontalEdgePadding: (CGFloat)pad
 {
   _horizontalEdgePad = pad;
   [self setNeedsSizing: YES];
 }
 
-- (float) horizontalEdgePadding
+- (CGFloat) horizontalEdgePadding
 {
   return _horizontalEdgePad;
 }
@@ -476,11 +476,10 @@ static NSMapTable *viewInfo = 0;
 
 - (void) itemAdded: (NSNotification*)notification
 {
-  int index  = [[[notification userInfo]
-                    objectForKey: @"NSMenuItemIndex"] intValue];
+  NSInteger index  = [[[notification userInfo] objectForKey: @"NSMenuItemIndex"] integerValue];
   NSMenuItem *anItem = [_items_link objectAtIndex: index];
   id aCell  = [NSMenuItemCell new];
-  int wasHighlighted = _highlightedItemIndex;
+  NSInteger wasHighlighted = _highlightedItemIndex;
 
   // FIXME do we need to differentiate between popups and non popups
   [aCell setMenuItem: anItem];
@@ -514,9 +513,8 @@ static NSMapTable *viewInfo = 0;
 
 - (void) itemRemoved: (NSNotification*)notification
 {
-  int wasHighlighted = [self highlightedItemIndex];
-  int index = [[[notification userInfo] objectForKey: @"NSMenuItemIndex"]
-                intValue];
+  NSInteger wasHighlighted = [self highlightedItemIndex];
+  NSInteger index = [[[notification userInfo] objectForKey: @"NSMenuItemIndex"] integerValue];
 
   if (index <= wasHighlighted)
     {
@@ -682,9 +680,9 @@ static NSMapTable *viewInfo = 0;
 
   if (_horizontal == YES)
     {
-      unsigned i;
-      unsigned howMany = [_itemCells count];
-      float currentX = HORIZONTAL_MENU_LEFT_PADDING;
+      NSUInteger i;
+      NSInteger howMany = [_itemCells count];
+      CGFloat currentX = HORIZONTAL_MENU_LEFT_PADDING;
 //      NSRect scRect = [[NSScreen mainScreen] frame];
 
       GSIArrayRemoveAllItems(cellRects);
@@ -728,15 +726,15 @@ static NSMapTable *viewInfo = 0;
     }
   else
     {
-      unsigned i;
-      unsigned howMany = [_itemCells count];
-      unsigned wideTitleView = 1;
-      float    neededImageAndTitleWidth = 0.0;
-      float    neededKeyEquivalentWidth = 0.0;
-      float    neededStateImageWidth = 0.0;
-      float    accumulatedOffset = 0.0;
-      float    popupImageWidth = 0.0;
-      float    menuBarHeight = 0.0;
+      NSUInteger i;
+      NSUInteger howMany = [_itemCells count];
+      NSUInteger wideTitleView = 1;
+      CGFloat    neededImageAndTitleWidth = 0.0;
+      CGFloat    neededKeyEquivalentWidth = 0.0;
+      CGFloat    neededStateImageWidth = 0.0;
+      CGFloat    accumulatedOffset = 0.0;
+      CGFloat    popupImageWidth = 0.0;
+      CGFloat    menuBarHeight = 0.0;
 
       if (_titleView)
         {
@@ -896,7 +894,7 @@ static NSMapTable *viewInfo = 0;
   _needsSizing = NO;
 }
 
-- (float) stateImageOffset
+- (CGFloat) stateImageOffset
 {
   if (_needsSizing)
     [self sizeToFit];
@@ -904,7 +902,7 @@ static NSMapTable *viewInfo = 0;
   return _stateImageOffset;
 }
 
-- (float) stateImageWidth
+- (CGFloat) stateImageWidth
 {
   if (_needsSizing)
     [self sizeToFit];
@@ -912,7 +910,7 @@ static NSMapTable *viewInfo = 0;
   return _stateImageWidth;
 }
 
-- (float) imageAndTitleOffset
+- (CGFloat) imageAndTitleOffset
 {
   if (_needsSizing)
     [self sizeToFit];
@@ -920,7 +918,7 @@ static NSMapTable *viewInfo = 0;
   return _imageAndTitleOffset;
 }
 
-- (float) imageAndTitleWidth
+- (CGFloat) imageAndTitleWidth
 {
   if (_needsSizing)
     [self sizeToFit];
@@ -928,7 +926,7 @@ static NSMapTable *viewInfo = 0;
   return _imageAndTitleWidth;
 }
 
-- (float) keyEquivalentOffset
+- (CGFloat) keyEquivalentOffset
 {
   if (_needsSizing)
     [self sizeToFit];
@@ -936,7 +934,7 @@ static NSMapTable *viewInfo = 0;
   return _keyEqOffset;
 }
 
-- (float) keyEquivalentWidth
+- (CGFloat) keyEquivalentWidth
 {
   if (_needsSizing)
     [self sizeToFit];
@@ -1003,8 +1001,8 @@ static NSMapTable *viewInfo = 0;
 
 - (NSInteger) indexOfItemAtPoint: (NSPoint)point
 {
-  unsigned howMany = [_itemCells count];
-  unsigned i;
+  NSUInteger howMany = [_itemCells count];
+  NSUInteger i;
 
   for (i = 0; i < howMany; i++)
     {
@@ -1107,7 +1105,7 @@ static NSMapTable *viewInfo = 0;
   NSRect r;
   NSRect cellFrame;
   NSRect popUpFrame;
-  int items = [_itemCells count];
+  NSInteger items = [_itemCells count];
   BOOL growHeight = YES;
   BOOL resizeCell = NO;
   CGFloat borderOffsetInBaseCoords;
@@ -1365,8 +1363,8 @@ static NSMapTable *viewInfo = 0;
 {
   NSMenu     *candidateMenu = _attachedMenu;
   NSMenuView *targetMenuView;
-  int        indexToHighlight = index;
-  int        oldHighlightedIndex;
+  NSInteger  indexToHighlight = index;
+  NSInteger  oldHighlightedIndex;
 
   for (;;)
     {
@@ -1407,7 +1405,7 @@ static NSMapTable *viewInfo = 0;
 #define MOVE_THRESHOLD_DELTA 2.0
 #define DELAY_MULTIPLIER     10
 
-- (BOOL) _executeItemAtIndex: (int)indexOfActionToExecute
+- (BOOL) _executeItemAtIndex: (NSInteger)indexOfActionToExecute
 	       removeSubmenu: (BOOL)subMenusNeedRemoving
 {
   NSInterfaceStyle style =
@@ -1451,9 +1449,9 @@ static NSMapTable *viewInfo = 0;
   BOOL justAttachedNewSubmenu = NO;
   BOOL subMenusNeedRemoving = YES;
   BOOL shouldFinish = YES;
-  int delayCount = 0;
-  int indexOfActionToExecute = -1;
-  int firstIndex = -1;
+  NSInteger delayCount = 0;
+  NSInteger indexOfActionToExecute = -1;
+  NSInteger firstIndex = -1;
   NSEvent *original;
   NSEventType type;
 
@@ -1538,7 +1536,7 @@ static NSMapTable *viewInfo = 0;
       if (type == NSPeriodic || event == original)
         {
           NSPoint location;
-          int index;
+          NSInteger index;
 
           location = [_window mouseLocationOutsideOfEventStream];
           index = [self indexOfItemAtPoint: 
@@ -1680,7 +1678,7 @@ static NSMapTable *viewInfo = 0;
 		  if ([mainWindowMenuView 
                         hitTest: locationInMainWindow] != nil)
 		    {
-                      int index = [mainWindowMenuView indexOfItemAtPoint: 
+                      NSInteger index = [mainWindowMenuView indexOfItemAtPoint: 
                         [mainWindowMenuView 
                           convertPoint: locationInMainWindow
                               fromView: nil]];
diff --git a/Source/NSOpenPanel.m b/Source/NSOpenPanel.m
index a575aab..e1e902b 100644
--- a/Source/NSOpenPanel.m
+++ b/Source/NSOpenPanel.m
@@ -56,7 +56,7 @@
 #import "GNUstepGUI/GSTheme.h"
 
 static NSString	*
-pathToColumn(NSBrowser *browser, int column)
+pathToColumn(NSBrowser *browser, NSInteger column)
 {
 #if	defined(__MINGW32__)
   if (column == 0)
@@ -105,7 +105,7 @@ static NSOpenPanel *_gs_gui_open_panel = nil;
   return YES;
 }
 
-- (void) _selectTextInColumn: (int)column
+- (void) _selectTextInColumn: (NSInteger)column
 {
   NSMatrix *matrix;
 
@@ -467,7 +467,7 @@ static NSOpenPanel *_gs_gui_open_panel = nil;
   NSMatrix      *matrix = nil;
   NSBrowserCell *selectedCell = nil;
   NSArray       *selectedCells = nil;
-  int            selectedColumn, lastColumn;
+  NSInteger     selectedColumn, lastColumn;
   NSString	*tmp;
 
   selectedColumn = [_browser selectedColumn];
@@ -591,13 +591,13 @@ static NSOpenPanel *_gs_gui_open_panel = nil;
 
 - (void) controlTextDidChange: (NSNotification *)aNotification;
 {
-  NSString           *s, *selectedString;
-  NSArray            *cells;
-  NSMatrix           *matrix;
-  NSCell             *selectedCell;
-  int                 i, sLength, cellLength, selectedRow;
-  NSComparisonResult  result;
-  NSRange             range;
+  NSString              *s, *selectedString;
+  NSArray               *cells;
+  NSMatrix              *matrix;
+  NSCell                *selectedCell;
+  NSInteger             i, sLength, cellLength, selectedRow;
+  NSComparisonResult    result;
+  NSRange               range;
 
   s = [[[aNotification userInfo] objectForKey: @"NSFieldEditor"] string];
 
@@ -650,7 +650,7 @@ static NSOpenPanel *_gs_gui_open_panel = nil;
 
   if (result == NSOrderedDescending)
     {
-      int numberOfCells = [cells count];
+      NSInteger numberOfCells = [cells count];
 
       for (i = selectedRow+1; i < numberOfCells; i++)
 	{
diff --git a/Source/NSOutlineView.m b/Source/NSOutlineView.m
index 4669bff..d182be7 100644
--- a/Source/NSOutlineView.m
+++ b/Source/NSOutlineView.m
@@ -63,19 +63,17 @@
 #include <math.h>
 
 static NSNotificationCenter *nc = nil;
-static const int current_version = 1;
+static const NSInteger current_version = 1;
 
-const int NSOutlineViewDropOnItemIndex = -1;
-
-static int lastVerticalQuarterPosition;
-static int lastHorizontalHalfPosition;
+static NSInteger lastVerticalQuarterPosition;
+static NSInteger lastHorizontalHalfPosition;
 static NSDragOperation dragOperation;
 
 static NSRect oldDraggingRect;
 static id oldDropItem;
 static id currentDropItem;
-static int oldDropIndex;
-static int currentDropIndex;
+static NSInteger oldDropIndex;
+static NSInteger currentDropIndex;
 
 static NSMutableSet *autoExpanded = nil;
 static NSDate	*lastDragUpdate = nil;
@@ -95,22 +93,22 @@ static NSImage *unexpandable  = nil;
 // FIXME: There is a method with a similar name.but this is never called
 //- (void) _postColumnDidResizeNotification;
 - (BOOL) _shouldSelectTableColumn: (NSTableColumn *)tableColumn;
-- (BOOL) _shouldSelectRow: (int)rowIndex;
+- (BOOL) _shouldSelectRow: (NSInteger)rowIndex;
 - (BOOL) _shouldSelectionChange;
 - (BOOL) _shouldEditTableColumn: (NSTableColumn *)tableColumn
-                            row: (int) rowIndex;
+                            row: (NSInteger) rowIndex;
 - (void) _willDisplayCell: (NSCell*)cell
            forTableColumn: (NSTableColumn *)tb
-                      row: (int)index;
+                      row: (NSInteger)index;
 - (BOOL) _writeRows: (NSIndexSet *)rows
        toPasteboard: (NSPasteboard *)pboard;
 - (BOOL) _isDraggingSource;
 - (id) _objectValueForTableColumn: (NSTableColumn *)tb
-                              row: (int)index;
+                              row: (NSInteger)index;
 - (void) _setObjectValue: (id)value
           forTableColumn: (NSTableColumn *)tb
-                     row: (int) index;
-- (int) _numRows;
+                     row: (NSInteger) index;
+- (NSInteger) _numRows;
 @end
 
 // These methods are private...
@@ -121,11 +119,11 @@ static NSImage *unexpandable  = nil;
 - (void) _collectItemsStartingWith: (id)startitem
                               into: (NSMutableArray *)allChildren;
 - (void) _loadDictionaryStartingWith: (id) startitem
-                             atLevel: (int) level;
+                             atLevel: (NSInteger) level;
 - (void) _openItem: (id)item;
 - (void) _closeItem: (id)item;
 - (void) _removeChildren: (id)startitem;
-- (void) _noteNumberOfRowsChangedBelowItem: (id)item by: (int)n;
+- (void) _noteNumberOfRowsChangedBelowItem: (id)item by: (NSInteger)n;
 @end
 
 @interface	NSOutlineView (Private)
@@ -261,7 +259,7 @@ static NSImage *unexpandable  = nil;
       // are valid when we post our notifications).
       if (collapseChildren) // collapse all
         {
-          int index, numChildren;
+          NSUInteger index, numChildren;
           NSMutableArray *allChildren;
           id sitem = (item == nil) ? (id)[NSNull null] : (id)item;
 
@@ -347,7 +345,7 @@ static NSImage *unexpandable  = nil;
       // recursively find all children and call this method to open them.
       if (expandChildren) // expand all
         {
-          int index, numChildren;
+          NSUInteger index, numChildren;
           NSMutableArray *allChildren;
           id sitem = (item == nil) ? (id)[NSNull null] : (id)item;
 
@@ -820,8 +818,8 @@ static NSImage *unexpandable  = nil;
       NSImage *image;
 
       id item = [self itemAtRow:_clickedRow];
-      int level = [self levelForRow: _clickedRow];
-      int position = 0;
+      NSInteger level = [self levelForRow: _clickedRow];
+      NSInteger position = 0;
 
       if ([self isItemExpanded: item])
         {
@@ -911,13 +909,13 @@ static NSImage *unexpandable  = nil;
  */
 - (void) drawRow: (NSInteger)rowIndex clipRect: (NSRect)aRect
 {
-  int startingColumn;
-  int endingColumn;
+  NSInteger startingColumn;
+  NSInteger endingColumn;
   NSRect drawingRect;
   NSCell *imageCell = nil;
   NSRect imageRect;
-  int i;
-  float x_pos;
+  NSInteger i;
+  CGFloat x_pos;
 
   if (_dataSource == nil)
     {
@@ -1106,10 +1104,10 @@ static NSImage *unexpandable  = nil;
 
 // TODO: Move the part that starts at 'Compute the indicator rect area' to GSTheme
 - (void) drawDropAboveIndicatorWithDropItem: (id)currentDropItem 
-                                      atRow: (int)row 
-                             childDropIndex: (int)currentDropIndex
+                                      atRow: (NSInteger)row 
+                             childDropIndex: (NSInteger)currentDropIndex
 {
-  int level = 0;
+  NSInteger level = 0;
   NSBezierPath *path = nil;
   NSRect newRect = NSZeroRect;
 
@@ -1189,8 +1187,8 @@ static NSImage *unexpandable  = nil;
 // TODO: Move a method common to -drapOnRootIndicator and the one below to GSTheme
 - (void) drawDropOnIndicatorWithDropItem: (id)currentDropItem
 {
-  int row = [_items indexOfObject: currentDropItem];
-  int level = [self levelForItem: currentDropItem];
+  NSInteger row = [_items indexOfObject: currentDropItem];
+  NSInteger level = [self levelForItem: currentDropItem];
   NSRect newRect = [self frameOfCellAtColumn: 0
                                          row: row];
 
@@ -1543,9 +1541,9 @@ Also returns the child index relative to this parent. */
   NSText *t;
   NSTableColumn *tb;
   NSRect drawingRect;
-  unsigned length = 0;
-  int level = 0;
-  float indentationFactor = 0.0;
+  NSUInteger length = 0;
+  NSInteger level = 0;
+  CGFloat indentationFactor = 0.0;
 
   // We refuse to edit cells if the delegate can not accept results
   // of editing.
@@ -1765,7 +1763,7 @@ Also returns the child index relative to this parent. */
   return YES;
 }
 
-- (BOOL) _shouldSelectRow: (int)rowIndex
+- (BOOL) _shouldSelectRow: (NSInteger)rowIndex
 {
   id item = [self itemAtRow: rowIndex];
 
@@ -1814,7 +1812,7 @@ Also returns the child index relative to this parent. */
 }
 
 - (BOOL) _shouldEditTableColumn: (NSTableColumn *)tableColumn
-                            row: (int) rowIndex
+                            row: (NSInteger) rowIndex
 {
   if ([_delegate respondsToSelector:
     @selector(outlineView:shouldEditTableColumn:item:)])
@@ -1833,7 +1831,7 @@ Also returns the child index relative to this parent. */
 
 - (void) _willDisplayCell: (NSCell*)cell
            forTableColumn: (NSTableColumn *)tb
-                      row: (int)index
+                      row: (NSInteger)index
 {
   if (_del_responds)
     {
@@ -1876,7 +1874,7 @@ Also returns the child index relative to this parent. */
 }
 
 - (id) _objectValueForTableColumn: (NSTableColumn *)tb
-                              row: (int) index
+                              row: (NSInteger) index
 {
   id result = nil;
 
@@ -1895,7 +1893,7 @@ Also returns the child index relative to this parent. */
 
 - (void) _setObjectValue: (id)value
           forTableColumn: (NSTableColumn *)tb
-                     row: (int) index
+                     row: (NSInteger) index
 {
   if ([_dataSource respondsToSelector:
     @selector(outlineView:setObjectValue:forTableColumn:byItem:)])
@@ -1909,7 +1907,7 @@ Also returns the child index relative to this parent. */
     }
 }
 
-- (int) _numRows
+- (NSInteger) _numRows
 {
   return [_items count];
 }
@@ -1979,8 +1977,8 @@ Also returns the child index relative to this parent. */
 - (void)_collectItemsStartingWith: (id)startitem
                              into: (NSMutableArray *)allChildren
 {
-  int num;
-  int i;
+  NSUInteger num;
+  NSUInteger i;
   id sitem = (startitem == nil) ? (id)[NSNull null] : (id)startitem;
   NSMutableArray *anarray;
 
@@ -2016,10 +2014,10 @@ Also returns the child index relative to this parent. */
 }
 
 - (void) _loadDictionaryStartingWith: (id) startitem
-                             atLevel: (int) level
+                             atLevel: (NSInteger) level
 {
-  int num = 0;
-  int i = 0;
+  NSUInteger num = 0;
+  NSUInteger i = 0;
   id sitem = (startitem == nil) ? (id)[NSNull null] : (id)startitem;
   NSMutableArray *anarray = nil;
 
@@ -2044,7 +2042,7 @@ Also returns the child index relative to this parent. */
       NSMapInsert(_itemDict, sitem, anarray);
     }
 
-  NSMapInsert(_levelOfItems, sitem, [NSNumber numberWithInt: level]);
+  NSMapInsert(_levelOfItems, sitem, [NSNumber numberWithInteger: level]);
 
   for (i = 0; i < num; i++)
     {
@@ -2164,7 +2162,7 @@ Also returns the child index relative to this parent. */
   [self _noteNumberOfRowsChangedBelowItem: startitem by: -numChildren];
 }
 
-- (void) _noteNumberOfRowsChangedBelowItem: (id)item by: (int)numItems
+- (void) _noteNumberOfRowsChangedBelowItem: (id)item by: (NSInteger)numItems
 {
   BOOL selectionDidChange = NO;
   NSUInteger rowIndex, nextIndex;
diff --git a/Source/NSPasteboard.m b/Source/NSPasteboard.m
index 3c0bde3..0d856ed 100644
--- a/Source/NSPasteboard.m
+++ b/Source/NSPasteboard.m
@@ -637,13 +637,13 @@ static NSString	*namePrefix = @"NSTypedFilenamesPboardType:";
 {
   NSMutableSet	*types = [NSMutableSet setWithCapacity: 8];
   NSArray	*filters = [[GSServicesManager manager] filters];
-  unsigned	c = [filters count];
-  unsigned 	i;
+  NSUInteger	c = [filters count];
+  NSUInteger 	i;
 
   for (i = 0; i < [from count]; i++)
     {
-      NSString	*type = [from objectAtIndex: i];
-      unsigned 	j;
+      NSString *type = [from objectAtIndex: i];
+      NSUInteger j;
 
       [types addObject: type];	// Always include original type
 
@@ -696,9 +696,9 @@ static NSString	*namePrefix = @"NSTypedFilenamesPboardType:";
     }
   else
     {
-      NSArray	*filters;
-      unsigned	count;
-      unsigned	filterNumber = 0;
+      NSArray *filters;
+      NSUInteger count;
+      NSUInteger filterNumber = 0;
 
       /*
        * Locate the filter information needed, including the type we are
@@ -716,8 +716,8 @@ static NSString	*namePrefix = @"NSTypedFilenamesPboardType:";
 
 	  if ([returnTypes containsObject: type] == YES)
 	    {
-	      NSArray	*sendTypes = [info objectForKey: @"NSSendTypes"];
-	      unsigned 	i;
+	      NSArray *sendTypes = [info objectForKey: @"NSSendTypes"];
+	      NSUInteger i;
 
 	      for (i = 0; i < [originalTypes count]; i++)
 		{
diff --git a/Source/NSPopUpButton.m b/Source/NSPopUpButton.m
index 2743a00..3fefa39 100644
--- a/Source/NSPopUpButton.m
+++ b/Source/NSPopUpButton.m
@@ -588,7 +588,7 @@ this to return nil to indicate that we have no context menu.
 {
   if ([aKey isEqual: NSSelectedIndexBinding])
     {
-      return [NSNumber numberWithInt: [self indexOfSelectedItem]];
+      return [NSNumber numberWithInteger: [self indexOfSelectedItem]];
     }
   else if ([aKey isEqual: NSSelectedTagBinding])
     {
@@ -596,7 +596,7 @@ this to return nil to indicate that we have no context menu.
     }
   else if ([aKey isEqual: NSSelectedObjectBinding])
     {
-      return [NSNumber numberWithInt: [self selectedTag]];
+      return [NSNumber numberWithInteger: [self selectedTag]];
     }
   else if ([aKey isEqual: NSContentValuesBinding])
     {
diff --git a/Source/NSPopUpButtonCell.m b/Source/NSPopUpButtonCell.m
index a85f51b..b005abf 100644
--- a/Source/NSPopUpButtonCell.m
+++ b/Source/NSPopUpButtonCell.m
@@ -379,8 +379,8 @@ static NSImage *_pbc_image[5];
  */
 - (void) addItemsWithTitles: (NSArray *)titles
 {
-  unsigned c = [titles count];
-  unsigned i;
+  NSUInteger c = [titles count];
+  NSUInteger i;
 
   for (i = 0; i < c; i++)
     {
@@ -574,7 +574,7 @@ static NSImage *_pbc_image[5];
  */
 - (id <NSCopying>) objectValue
 {
-  return [NSNumber numberWithInt: [self indexOfSelectedItem]];
+  return [NSNumber numberWithInteger: [self indexOfSelectedItem]];
 }
 
 - (void) setObjectValue: (id)object
@@ -865,9 +865,9 @@ static NSImage *_pbc_image[5];
  */ 
 - (NSArray *) itemTitles
 {
-  unsigned count = [_menu numberOfItems];
+  NSUInteger count = [_menu numberOfItems];
   id items[count];
-  unsigned i;
+  NSUInteger i;
 
   [[_menu itemArray] getObjects: items];
   for (i = 0; i < count; i++)
@@ -1181,9 +1181,9 @@ static NSImage *_pbc_image[5];
 	      forKey: @"NSUsesItemFromMenu"];
       [aCoder encodeInt:  [self arrowPosition] 
 	      forKey: @"NSArrowPosition"];
-      [aCoder encodeInt:  [self preferredEdge] 
+      [aCoder encodeInteger:  [self preferredEdge] 
 	      forKey: @"NSPreferredEdge"];
-      [aCoder encodeInt:  [self indexOfSelectedItem] 
+      [aCoder encodeInteger:  [self indexOfSelectedItem] 
 	      forKey: @"NSSelectedIndex"];
       [aCoder encodeBool: [self pullsDown]
 	      forKey: @"NSPullDown"];
@@ -1254,13 +1254,13 @@ static NSImage *_pbc_image[5];
         }
       if ([aDecoder containsValueForKey: @"NSPreferredEdge"])
         {
-          NSRectEdge edge = [aDecoder decodeIntForKey: @"NSPreferredEdge"];
+          NSRectEdge edge = [aDecoder decodeIntegerForKey: @"NSPreferredEdge"];
           
           [self setPreferredEdge: edge];
         }
       if ([aDecoder containsValueForKey: @"NSSelectedIndex"])
         {
-	  int selectedIdx = [aDecoder decodeIntForKey: 
+	  NSInteger selectedIdx = [aDecoder decodeIntegerForKey: 
 					@"NSSelectedIndex"];
 	  [self selectItemAtIndex: selectedIdx];
 	}
@@ -1278,8 +1278,7 @@ static NSImage *_pbc_image[5];
     {
       int flag;
       id<NSMenuItem> selectedItem;
-      int version = [aDecoder versionForClassName: 
-                                  @"NSPopUpButtonCell"];
+      NSInteger version = [aDecoder versionForClassName: @"NSPopUpButtonCell"];
 
       menu = [aDecoder decodeObject];
       /* 
diff --git a/Source/NSPrintOperation.m b/Source/NSPrintOperation.m
index 4b3de59..2627de9 100644
--- a/Source/NSPrintOperation.m
+++ b/Source/NSPrintOperation.m
@@ -62,7 +62,7 @@
 #import "GNUstepGUI/GSPrintOperation.h"
 #import "GSGuiPrivate.h"
 
-#define NSNUMBER(a) [NSNumber numberWithInt: (a)]
+#define NSNUMBER(a) [NSNumber numberWithInteger: (a)]
 #define NSFNUMBER(a) [NSNumber numberWithDouble: (a)]
 
 /*
@@ -87,12 +87,12 @@ typedef struct _page_info_t {
                                 rotated if printing Landscape */
   NSRect sheetBounds;        /* Print area of a sheet in default user space */
   NSSize paperSize;          /* Size of the paper */
-  int xpages, ypages;        /* number of page segments for the view in both dimensions */
-  int first, last;           /* first and last page to print */
+  NSInteger xpages, ypages;        /* number of page segments for the view in both dimensions */
+  NSInteger first, last;           /* first and last page to print */
   double pageScale;          /* Scaling determined from page fitting */
   double printScale;         /* User specified scaling */
   double nupScale;           /* Scale required to fit nup pages on the sheet */
-  int    nup;                /* Number of pages to print on a sheet */
+  NSInteger nup;                /* Number of pages to print on a sheet */
   double lastWidth, lastHeight; /* max. values of last printed page (scaled) */
   NSPrintingOrientation orient;
   int    pageDirection;      /* NSPrintPageDirection */
@@ -103,15 +103,15 @@ typedef struct _page_info_t {
 - (BOOL) _runOperation;
 - (void) _setupPrintInfo;
 - (void)_printOperationDidRun:(NSPrintOperation *)printOperation 
-                   returnCode:(int)returnCode
+                   returnCode:(NSInteger)returnCode
                   contextInfo:(void *)contextInfo;
 - (void) _printPaginateWithInfo: (page_info_t *)info 
                      knowsRange: (BOOL)knowsRange;
-- (NSRect) _rectForPage: (int)page info: (page_info_t *)info 
-                  xpage: (int *)xptr
-                  ypage: (int *)yptr;
-- (NSRect) _adjustPagesFirst: (int)first 
-                        last: (int)last
+- (NSRect) _rectForPage: (NSInteger)page info: (page_info_t *)info 
+                  xpage: (NSInteger *)xptr
+                  ypage: (NSInteger *)yptr;
+- (NSRect) _adjustPagesFirst: (NSInteger)first 
+                        last: (NSInteger)last
                         info: (page_info_t *)info;
 - (void) _print;
 @end
@@ -444,7 +444,7 @@ static NSString *NSPrintOperationThreadKey = @"NSPrintOperationThreadKey";
 /** Returns the page currently being printing. Returns 0 if no page
     is currently being printed
 */
-- (int)currentPage
+- (NSInteger)currentPage
 {
   return _currentPage;
 }
@@ -498,7 +498,7 @@ static NSString *NSPrintOperationThreadKey = @"NSPrintOperationThreadKey";
   if ([self showsPrintPanel])
     {
       NSPrintPanel *panel = [self printPanel];
-      int button;
+      NSInteger button;
       
       [panel setAccessoryView: _accessory_view];
       [self _setupPrintInfo];
@@ -692,15 +692,15 @@ static NSString *NSPrintOperationThreadKey = @"NSPrintOperationThreadKey";
   knowsPageRange = [_view knowsPageRange: &viewPageRange]; 
   if (knowsPageRange == YES)
     {
-      int first = viewPageRange.location;
-      int last = NSMaxRange(viewPageRange) - 1;
+      NSInteger first = viewPageRange.location;
+      NSInteger last = NSMaxRange(viewPageRange) - 1;
       [dict setObject: NSNUMBER(first) forKey: NSPrintFirstPage];
       [dict setObject: NSNUMBER(last) forKey: NSPrintLastPage];
     }
 }
 
 - (void)_printOperationDidRun:(NSPrintOperation *)printOperation 
-                   returnCode:(int)returnCode  
+                   returnCode:(NSInteger)returnCode  
                   contextInfo:(void *)contextInfo
 {
   id delegate;
@@ -867,11 +867,11 @@ scaleRect(NSRect rect, double scale)
    Note, we assume this function is called in order from our first to last
    page. The returned pageRect is in the view's coordinate system
 */
-- (NSRect) _rectForPage: (int)page info: (page_info_t *)info 
-                  xpage: (int *)xptr
-                  ypage: (int *)yptr
+- (NSRect) _rectForPage: (NSInteger)page info: (page_info_t *)info 
+                  xpage: (NSInteger *)xptr
+                  ypage: (NSInteger *)yptr
 {
-  int xpage, ypage;
+  NSInteger xpage, ypage;
   NSRect pageRect;
 
   if (info->pageDirection == 1)
@@ -901,11 +901,11 @@ scaleRect(NSRect rect, double scale)
 /* Let the view adjust the page rect we calculated. See assumptions for
    _rectForPage:
 */
-- (NSRect) _adjustPagesFirst: (int)first 
-                        last: (int)last 
+- (NSRect) _adjustPagesFirst: (NSInteger)first 
+                        last: (NSInteger)last 
                         info: (page_info_t *)info
 {
-  int i, xpage, ypage;
+  NSInteger i, xpage, ypage;
   double hlimit, wlimit;
   NSRect pageRect = NSZeroRect; /* Silence compiler warning.  */
   hlimit = [_view heightAdjustLimit];
@@ -999,8 +999,8 @@ scaleRect(NSRect rect, double scale)
     [dict setObject: NSNUMBER(info.first-1) forKey: NSPrintLastPage];
   else
     [dict setObject: NSNUMBER(info.last) forKey: NSPrintLastPage];
-  NSDebugLLog(@"NSPrinting", @"Printing pages %d to %d", 
-              info.first, info.last);
+  NSDebugLLog(@"NSPrinting", @"Printing pages %ld to %ld", 
+              (long)info.first, (long)info.last);
   NSDebugLLog(@"NSPrinting", @"Printing rect %@, scaled %@",
               NSStringFromRect(_rect),
               NSStringFromRect(info.scaledBounds));
@@ -1056,8 +1056,8 @@ scaleRect(NSRect rect, double scale)
                                           info: &info];
         }
 
-      NSDebugLLog(@"NSPrinting", @" current page %d, rect %@", 
-                  _currentPage, NSStringFromRect(pageRect));
+      NSDebugLLog(@"NSPrinting", @" current page %ld, rect %@", 
+                  (long)_currentPage, NSStringFromRect(pageRect));
       if (NSIsEmptyRect(pageRect))
         break;
 
@@ -1115,8 +1115,8 @@ scaleRect(NSRect rect, double scale)
                    withInfo: (page_info_t)info
 	     knowsPageRange: (BOOL)knowsPageRange
 {
-  int currentPage;
-  int numberOnSheet;
+  NSInteger currentPage;
+  NSInteger numberOnSheet;
   CGFloat xoffset, yoffset, scale;
   NSPoint location;
   NSPrintOperation *printOp = [NSPrintOperation currentOperation];
@@ -1139,7 +1139,7 @@ scaleRect(NSRect rect, double scale)
 
       label = nil;
       if (info.nup == 1)
-        label = [NSString stringWithFormat: @"%d", currentPage];
+        label = [NSString stringWithFormat: @"%ld", (long)currentPage];
 
       DPSgsave(ctxt);
       [self beginPage: floor((currentPage - info.first)/info.nup)+1
diff --git a/Source/NSPrintPanel.m b/Source/NSPrintPanel.m
index 48e2a14..f600600 100644
--- a/Source/NSPrintPanel.m
+++ b/Source/NSPrintPanel.m
@@ -368,7 +368,7 @@ static NSPrintPanel *shared_instance = nil;
 
 - (BOOL) _getSavePath
 {
-  int result;
+  NSInteger result;
   NSSavePanel *sp;
 
   sp = [NSSavePanel savePanel];
@@ -385,7 +385,7 @@ static NSPrintPanel *shared_instance = nil;
 /* Private communication with our panel objects */
 - (void) _pickedButton: (id)sender
 {
-  int tag = [sender tag];
+  NSInteger tag = [sender tag];
 
   if (tag == NSPPSaveButton)
     {
@@ -462,9 +462,9 @@ static NSPrintPanel *shared_instance = nil;
   else
     {
       NSString *str;
-      str = [NSString stringWithFormat: @"%d", _pages.location];
+      str = [NSString stringWithFormat: @"%lu", (unsigned long)_pages.location];
       [[fromRangeForm cellAtIndex: 0] setStringValue: str];
-      str = [NSString stringWithFormat: @"%d", NSMaxRange(_pages)-1];
+      str = [NSString stringWithFormat: @"%lu", (unsigned long)NSMaxRange(_pages)-1];
       [[toRangeForm cellAtIndex: 0] setStringValue: str];
     }
 }
@@ -676,13 +676,13 @@ static NSPrintPanel *shared_instance = nil;
     [control addItemWithTitle: _(@"Unknown")];
 }
 
-#define NSNUMBER(a) [NSNumber numberWithInt: (a)]
+#define NSNUMBER(a) [NSNumber numberWithInteger: (a)]
 
 - (void)_finalWritePrintInfo: (NSPrintInfo*)info
 {
   id control;
   double scale;
-  int layout;
+  NSInteger layout;
   NSString *sel;
   NSArray  *list;
   NSPrinter *printer;
@@ -762,7 +762,7 @@ static NSPrintPanel *shared_instance = nil;
   list = [printer stringListForKey:@"InputSlot" inTable: @"PPD"];
   if (list)
     {
-      int selected;
+      NSInteger selected;
       NSString *def, *manual;
       sel = nil;
       selected = [control indexOfSelectedItem];
diff --git a/Source/NSPrinter.m b/Source/NSPrinter.m
index eaed964..bc29919 100644
--- a/Source/NSPrinter.m
+++ b/Source/NSPrinter.m
@@ -795,7 +795,7 @@ static NSMutableDictionary* printerCache;
     {
       NSString *oldValue;
       NSString *newValue;
-      int i, max;
+      NSUInteger i, max;
 
       max = [valArray count];
       for (i=0 ; i < max ; i++)
@@ -1433,8 +1433,8 @@ static NSMutableDictionary* printerCache;
   NSCharacterSet *emptySet;
   NSString *value = nil;
   NSString *part;
-  int stringLength;
-  int location;
+  NSUInteger stringLength;
+  NSUInteger location;
   NSRange range;
 
   // Don't bother unless there's something to convert
diff --git a/Source/NSProgressIndicator.m b/Source/NSProgressIndicator.m
index dcab4ae..d0a9465 100644
--- a/Source/NSProgressIndicator.m
+++ b/Source/NSProgressIndicator.m
@@ -389,7 +389,7 @@
        flags |= (_controlSize == NSSmallControlSize) ? 0x100 : 0;
        flags |= (_style == NSProgressIndicatorSpinningStyle) ? 0x1000 : 0;
        flags |= _isDisplayedWhenStopped ? 0 : 0x2000;
-       [aCoder encodeInt: flags forKey: @"NSpiFlags"];
+       [aCoder encodeInteger: flags forKey: @"NSpiFlags"];
 
        // things which Gorm encodes, but IB doesn't care about.
        [aCoder encodeDouble: _doubleValue forKey: @"GSDoubleValue"];
diff --git a/Source/NSRulerView.m b/Source/NSRulerView.m
index 2facae1..531da14 100644
--- a/Source/NSRulerView.m
+++ b/Source/NSRulerView.m
@@ -522,7 +522,7 @@ static NSMutableDictionary *units = nil;
 
 - (float) _stepForIndex: (int)index
 {
-  int newindex;
+  NSInteger newindex;
   NSArray *stepCycle;
 
   if (index > 0) 
diff --git a/Source/NSSavePanel.m b/Source/NSSavePanel.m
index fc9a9f5..b5d335a 100644
--- a/Source/NSSavePanel.m
+++ b/Source/NSSavePanel.m
@@ -69,7 +69,7 @@ static NSFileManager *_fm = nil;
 static BOOL _gs_display_reading_progress = NO;
 
 static NSString	*
-pathToColumn(NSBrowser *browser, int column)
+pathToColumn(NSBrowser *browser, NSInteger column)
 {
 #if	defined(__MINGW32__)
   if (column == 0)
@@ -117,7 +117,7 @@ setPath(NSBrowser *browser, NSString *path)
 - (void) _setHomeDirectory;
 - (void) _mountMedia;
 - (void) _unmountMedia;
-- (void) _selectTextInColumn: (int)column;
+- (void) _selectTextInColumn: (NSInteger)column;
 - (void) _selectCellName: (NSString *)title;
 - (void) _setFileName: (NSString *)name;
 - (void) _setupForDirectory: (NSString *)path file: (NSString *)name;
@@ -464,7 +464,7 @@ setPath(NSBrowser *browser, NSString *path)
   [[NSWorkspace sharedWorkspace] unmountAndEjectDeviceAtPath: [self directory]];
 }
 
-- (void) _selectTextInColumn: (int)column
+- (void) _selectTextInColumn: (NSInteger)column
 {
   NSMatrix      *matrix;
   NSBrowserCell *selectedCell;
@@ -514,11 +514,11 @@ setPath(NSBrowser *browser, NSString *path)
 
 - (void) _selectCellName: (NSString *)title
 {
-  NSString           *cellString;
-  NSArray            *cells;
-  NSMatrix           *matrix;
-  NSComparisonResult  result;
-  int                 i, titleLength, cellLength, numberOfCells;
+  NSString              *cellString;
+  NSArray               *cells;
+  NSMatrix              *matrix;
+  NSComparisonResult    result;
+  NSInteger             i, titleLength, cellLength, numberOfCells;
 
   matrix = [_browser matrixInColumn:[_browser lastColumn]];
   if ([matrix selectedCell])
@@ -1278,7 +1278,7 @@ selectCellWithString: (NSString*)title
       if ([fileType length] != 0 &&
 	  [_allowedFileTypes indexOfObject: fileType] == NSNotFound)
 	{
-	  int result;
+	  NSInteger result;
 	  NSString *msgFormat, *butFormat;
 	  NSString *altType, *requiredType;
 
@@ -1337,7 +1337,7 @@ selectCellWithString: (NSString*)title
   filename = [_fullFileName stringByDeletingLastPathComponent];
   if ([_fm fileExistsAtPath: filename isDirectory: &isDir] == NO)
     {
-      int	result;
+      NSInteger result;
 
       result = NSRunAlertPanel(_(@"Save"),
 	_(@"The directory '%@' does not exist, do you want to create it?"),
@@ -1372,7 +1372,7 @@ selectCellWithString: (NSString*)title
     }
   if ([_fm fileExistsAtPath: [self filename] isDirectory: NULL])
     {
-      int result;
+      NSInteger result;
 
       result = NSRunAlertPanel(_(@"Save"),
 			       _(@"The file '%@' in '%@' exists. Replace it?"),
@@ -1527,10 +1527,10 @@ selectCellWithString: (NSString*)title
 @implementation NSString (GSSavePanel)
 - (NSComparisonResult)_gsSavePanelCompare:(NSString *)other
 {
-  int                sLength, oLength;
-  unichar            sChar, oChar;
-  NSComparisonResult result;
-  NSRange            range;
+  NSInteger             sLength, oLength;
+  unichar               sChar, oChar;
+  NSComparisonResult    result;
+  NSRange               range;
 
   sLength = [self length];
   oLength = [other length];
@@ -1620,16 +1620,16 @@ createRowsForColumn: (NSInteger)column
           column: (NSInteger)column;
 @end 
 
-static int compareFilenames (id elem1, id elem2, void *context)
+static NSComparisonResult compareFilenames (id elem1, id elem2, void *context)
 {
   /* TODO - use IMP optimization here.  */
   NSSavePanel *s = context;
   NSSavePanel *self = (NSSavePanel *)context;
 
-  return (int)[s->_delegate panel: self
-		compareFilename: elem1
-		with: elem2
-		caseSensitive: YES];
+  return (NSComparisonResult)[[s delegate] panel: self
+                                 compareFilename: elem1
+                                            with: elem2
+                                   caseSensitive: YES];
 }
 
 
@@ -1645,15 +1645,15 @@ createRowsForColumn: (NSInteger)column
 {
   NSString              *path, *file, *pathAndFile, *extension; 
   NSArray               *files;
-  unsigned	         i, count, addedRows; 
-  BOOL		         exists, isDir;
+  NSUInteger            i, count, addedRows; 
+  BOOL                  exists, isDir;
   NSBrowserCell         *cell;
   // _gs_display_reading_progress variables
-  unsigned               reached_frac = 0;
-  unsigned               base_frac = 1;
-  BOOL                   display_progress = NO;
+  NSUInteger            reached_frac = 0;
+  NSUInteger            base_frac = 1;
+  BOOL                  display_progress = NO;
   NSString              *progressString = nil;
-  NSWorkspace		*ws;
+  NSWorkspace           *ws;
   /* We create lot of objects in this method, so we use a pool */
   NSAutoreleasePool     *pool;
 
@@ -1711,7 +1711,7 @@ createRowsForColumn: (NSInteger)column
        strictly needed.  */
     if (!_showsHiddenFiles)
       {
-	int j;
+	NSInteger j;
 	/* We must make a mutable copy of the array because the API
 	   says that NSFileManager -directoryContentsAtPath: return a
 	   NSArray, not a NSMutableArray, so we shouldn't expect it to
@@ -1872,7 +1872,7 @@ createRowsForColumn: (NSInteger)column
    *       to show additional files, which were not displayed before.
    */
   NSArray	*cells = [[sender matrixInColumn: column] cells];
-  unsigned	count = [cells count], i;
+  NSUInteger    count = [cells count], i;
   NSString	*path = pathToColumn(sender, column);
 
   // iterate through the cells asking the delegate if each filename is valid
@@ -1908,13 +1908,13 @@ createRowsForColumn: (NSInteger)column
 
 - (void) controlTextDidChange: (NSNotification *)aNotification
 {
-  NSString           *s, *selectedString;
-  NSArray            *cells;
-  NSMatrix           *matrix;
-  NSCell             *selectedCell;
-  int                 i, sLength, cellLength, selectedRow;
-  NSComparisonResult  result;
-  NSRange             range;
+  NSString              *s, *selectedString;
+  NSArray               *cells;
+  NSMatrix              *matrix;
+  NSCell                *selectedCell;
+  NSInteger             i, sLength, cellLength, selectedRow;
+  NSComparisonResult    result;
+  NSRange               range;
 
   s = [[[aNotification userInfo] objectForKey: @"NSFieldEditor"] string];
 
@@ -1955,7 +1955,7 @@ createRowsForColumn: (NSInteger)column
 
   if (result == NSOrderedDescending)
     {
-      int numberOfCells = [cells count];
+      NSInteger numberOfCells = [cells count];
 
       for (i = selectedRow+1; i < numberOfCells; i++)
 	{
diff --git a/Source/NSScreen.m b/Source/NSScreen.m
index d009087..673b364 100644
--- a/Source/NSScreen.m
+++ b/Source/NSScreen.m
@@ -46,7 +46,7 @@
 #import "GNUstepGUI/GSDisplayServer.h"
 
 @interface NSScreen (Private)
-- (id) _initWithScreenNumber: (int)screen;
+- (id) _initWithScreenNumber: (NSInteger)screen;
 @end
 
 @implementation NSScreen
@@ -89,7 +89,7 @@ static NSMutableArray *screenArray = nil;
  */
 + (NSArray*) screens
 {
-  int count = 0, index = 0;
+  NSInteger count = 0, index = 0;
   NSArray *screens;
   GSDisplayServer *srv;
 
@@ -197,7 +197,7 @@ static NSMutableArray *screenArray = nil;
 /**
  * Get all of the infomation for a given screen.
  */
-- (id) _initWithScreenNumber: (int)screen
+- (id) _initWithScreenNumber: (NSInteger)screen
 {
   GSDisplayServer *srv;
 
@@ -209,7 +209,7 @@ static NSMutableArray *screenArray = nil;
   // Check for problems
   if (screen < 0)
     {
-      NSLog(@"Internal error: Invalid screen number %d\n", screen);
+      NSLog(@"Internal error: Invalid screen number %ld\n", (long)screen);
       RELEASE(self);
       return nil;
     }
@@ -279,7 +279,7 @@ static NSMutableArray *screenArray = nil;
   if (_reserved == 0)
     {
       NSMutableDictionary	*devDesc;
-      int			bps = 0;
+      NSInteger			bps = 0;
       NSSize			screenResolution;
       NSString			*colorSpaceName = nil;
       CGFloat                   scaleFactor;
@@ -291,7 +291,7 @@ static NSMutableArray *screenArray = nil;
 
       // Set the screen number in the current object.
       devDesc = [[NSMutableDictionary alloc] initWithCapacity: 8];
-      [devDesc setObject: [NSNumber numberWithInt: _screenNumber]
+      [devDesc setObject: [NSNumber numberWithInteger: _screenNumber]
 		  forKey: @"NSScreenNumber"];
 
       // This is assumed since we are in NSScreen.
@@ -309,7 +309,7 @@ static NSMutableArray *screenArray = nil;
 
       // Add the bits per sample entry
       bps = NSBitsPerSampleFromDepth(_depth);
-      [devDesc setObject: [NSNumber numberWithInt: bps]
+      [devDesc setObject: [NSNumber numberWithInteger: bps]
 		  forKey: NSDeviceBitsPerSample];
 
       // Add the color space entry.
@@ -396,7 +396,7 @@ static NSMutableArray *screenArray = nil;
 }
 
 /** Returns the screen number */
-- (int) screenNumber
+- (NSInteger) screenNumber
 {
   return _screenNumber;
 }
@@ -418,7 +418,7 @@ static NSMutableArray *screenArray = nil;
   [super dealloc];
 }
 
-- (float) userSpaceScaleFactor
+- (CGFloat) userSpaceScaleFactor
 {
   NSNumber *factor = [[NSUserDefaults standardUserDefaults]
 		       objectForKey: @"GSScaleFactor"];
diff --git a/Source/NSScrollView.m b/Source/NSScrollView.m
index 1cbf6b2..e6190c0 100644
--- a/Source/NSScrollView.m
+++ b/Source/NSScrollView.m
@@ -62,43 +62,43 @@
 typedef struct _scrollViewFlags 
 {
 #if GS_WORDS_BIGENDIAN == 1
-  unsigned int __unused6:14;
-  unsigned int __unused5:1;
-  unsigned int autohidesScrollers:1;
-  unsigned int __unused4:1;
-  unsigned int __unused3:1;
-  unsigned int __unused2:1;
-  unsigned int doesNotDrawBackground:1;
-  unsigned int __unused1:1;
-  unsigned int hasVRuler:1;
-  unsigned int hasHRuler:1;
-  unsigned int showRulers:1;
-  unsigned int oldRulerInstalled:1;
-  unsigned int nonDynamic:1;
-  unsigned int hasHScroller:1;
-  unsigned int hasVScroller:1;
-  unsigned int hScrollerRequired:1;
-  unsigned int vScrollerRequired:1;
-  NSBorderType border:2;
+  uint32_t __unused6:14;
+  uint32_t __unused5:1;
+  uint32_t autohidesScrollers:1;
+  uint32_t __unused4:1;
+  uint32_t __unused3:1;
+  uint32_t __unused2:1;
+  uint32_t doesNotDrawBackground:1;
+  uint32_t __unused1:1;
+  uint32_t hasVRuler:1;
+  uint32_t hasHRuler:1;
+  uint32_t showRulers:1;
+  uint32_t oldRulerInstalled:1;
+  uint32_t nonDynamic:1;
+  uint32_t hasHScroller:1;
+  uint32_t hasVScroller:1;
+  uint32_t hScrollerRequired:1;
+  uint32_t vScrollerRequired:1;
+  uint32_t border:2;
 #else
-  NSBorderType border:2;
-  unsigned int vScrollerRequired:1;
-  unsigned int hScrollerRequired:1;
-  unsigned int hasVScroller:1;
-  unsigned int hasHScroller:1;
-  unsigned int nonDynamic:1;
-  unsigned int oldRulerInstalled:1;
-  unsigned int showRulers:1;
-  unsigned int hasHRuler:1;
-  unsigned int hasVRuler:1;
-  unsigned int __unused1:1;
-  unsigned int doesNotDrawBackground:1;
-  unsigned int __unused2:1;
-  unsigned int __unused3:1;
-  unsigned int __unused4:1;
-  unsigned int autohidesScrollers:1;
-  unsigned int __unused5:1;
-  unsigned int __unused6:14;
+  uint32_t border:2;
+  uint32_t vScrollerRequired:1;
+  uint32_t hScrollerRequired:1;
+  uint32_t hasVScroller:1;
+  uint32_t hasHScroller:1;
+  uint32_t nonDynamic:1;
+  uint32_t oldRulerInstalled:1;
+  uint32_t showRulers:1;
+  uint32_t hasHRuler:1;
+  uint32_t hasVRuler:1;
+  uint32_t __unused1:1;
+  uint32_t doesNotDrawBackground:1;
+  uint32_t __unused2:1;
+  uint32_t __unused3:1;
+  uint32_t __unused4:1;
+  uint32_t autohidesScrollers:1;
+  uint32_t __unused5:1;
+  uint32_t __unused6:14;
 #endif  
 } GSScrollViewFlags;
 
@@ -1453,7 +1453,7 @@ static CGFloat scrollerWidth;
       
   if ([aCoder allowsKeyedCoding])
     {
-      unsigned long flags = 0;
+      NSUInteger flags = 0;
 
       [aCoder encodeObject: _horizScroller forKey: @"NSHScroller"];
       [aCoder encodeObject: _vertScroller forKey: @"NSVScroller"];
@@ -1473,19 +1473,19 @@ static CGFloat scrollerWidth;
       if (_autohidesScrollers)
         flags |= 512;
 
-      [aCoder encodeInt: flags forKey: @"NSsFlags"];
+      [aCoder encodeInteger: flags forKey: @"NSsFlags"];
     }
   else
     {
       [aCoder encodeObject: _contentView];
       // Was int, we need to stay compatible
-      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &_borderType];
+      [aCoder encodeValueOfObjCType: @encode(NSUInteger) at: &_borderType];
       [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_scrollsDynamically];
       [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_rulersVisible];
-      [aCoder encodeValueOfObjCType: @encode(float) at: &_hLineScroll];
-      [aCoder encodeValueOfObjCType: @encode(float) at: &_hPageScroll];
-      [aCoder encodeValueOfObjCType: @encode(float) at: &_vLineScroll];
-      [aCoder encodeValueOfObjCType: @encode(float) at: &_vPageScroll];
+      [aCoder encodeValueOfObjCType: @encode(CGFloat) at: &_hLineScroll];
+      [aCoder encodeValueOfObjCType: @encode(CGFloat) at: &_hPageScroll];
+      [aCoder encodeValueOfObjCType: @encode(CGFloat) at: &_vLineScroll];
+      [aCoder encodeValueOfObjCType: @encode(CGFloat) at: &_vPageScroll];
       
       [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_hasHorizScroller];
       if (_hasHorizScroller)
@@ -1540,7 +1540,7 @@ static CGFloat scrollerWidth;
 
       if ([aDecoder containsValueForKey: @"NSsFlags"])
         {
-          int flags = [aDecoder decodeInt32ForKey: @"NSsFlags"];
+          NSUInteger flags = [aDecoder decodeIntegerForKey: @"NSsFlags"];
 
           _borderType = flags & 3;
           _hasVertScroller = (flags & 16) == 16;
@@ -1593,17 +1593,17 @@ static CGFloat scrollerWidth;
     }
   else
     {
-      int version = [aDecoder versionForClassName: @"NSScrollView"];
+      NSInteger version = [aDecoder versionForClassName: @"NSScrollView"];
       NSDebugLLog(@"NSScrollView", @"NSScrollView: start decoding\n");
       _contentView = [aDecoder decodeObject];
       // Was int, we need to stay compatible
       [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &_borderType];
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_scrollsDynamically];
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_rulersVisible];
-      [aDecoder decodeValueOfObjCType: @encode(float) at: &_hLineScroll];
-      [aDecoder decodeValueOfObjCType: @encode(float) at: &_hPageScroll];
-      [aDecoder decodeValueOfObjCType: @encode(float) at: &_vLineScroll];
-      [aDecoder decodeValueOfObjCType: @encode(float) at: &_vPageScroll];
+      [aDecoder decodeValueOfObjCType: @encode(CGFloat) at: &_hLineScroll];
+      [aDecoder decodeValueOfObjCType: @encode(CGFloat) at: &_hPageScroll];
+      [aDecoder decodeValueOfObjCType: @encode(CGFloat) at: &_vLineScroll];
+      [aDecoder decodeValueOfObjCType: @encode(CGFloat) at: &_vPageScroll];
       
       [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_hasHorizScroller];
       if (_hasHorizScroller)
@@ -1636,7 +1636,7 @@ static CGFloat scrollerWidth;
         }
       else
         {
-          NSLog(@"unknown NSScrollView version (%d)", version);
+          NSLog(@"unknown NSScrollView version (%ld)", (long)version);
           DESTROY(self);
           return nil;
         }
diff --git a/Source/NSScroller.m b/Source/NSScroller.m
index 88d3ac3..822bee1 100644
--- a/Source/NSScroller.m
+++ b/Source/NSScroller.m
@@ -1329,7 +1329,7 @@ static float	buttonsOffset = 1.0; // buttonsWidth = sw - 2*buttonsOffset
   if (_scFlags.control_size == controlSize)
     return;
 
-  _scFlags.control_size = controlSize;
+  _scFlags.control_size = (uint32_t)controlSize;
   [self setNeedsDisplay: YES];
 }
 
@@ -1343,7 +1343,7 @@ static float	buttonsOffset = 1.0; // buttonsWidth = sw - 2*buttonsOffset
   if (_scFlags.control_tint == controlTint)
     return;
 
-  _scFlags.control_tint = controlTint;
+  _scFlags.control_tint = (uint32_t)controlTint;
   [self setNeedsDisplay: YES];
 }
 
diff --git a/Source/NSSearchFieldCell.m b/Source/NSSearchFieldCell.m
index 7744f30..0f20f92 100644
--- a/Source/NSSearchFieldCell.m
+++ b/Source/NSSearchFieldCell.m
@@ -191,7 +191,7 @@
 
 - (void) setRecentSearches: (NSArray *)searches
 {
-  int max;
+  NSInteger max;
   NSMutableArray *mutableSearches;
 
   max = [self maximumRecents];
@@ -482,17 +482,15 @@
       [aCoder encodeObject: _cancel_button_cell forKey: @"NSCancelButtonCell"];
       [aCoder encodeObject: _recents_autosave_name forKey: @"NSRecentsAutosaveName"];
       [aCoder encodeBool: _sends_whole_search_string forKey: @"NSSendsWholeSearchString"];
-      [aCoder encodeInt: max forKey: @"NSMaximumRecents"];
+      [aCoder encodeInteger: max forKey: @"NSMaximumRecents"];
     }
   else
     {
       [aCoder encodeObject: _search_button_cell];
       [aCoder encodeObject: _cancel_button_cell];
       [aCoder encodeObject: _recents_autosave_name];
-      [aCoder encodeValueOfObjCType: @encode(BOOL)
-              at: &_sends_whole_search_string];
-      [aCoder encodeValueOfObjCType: @encode(unsigned int)
-              at: &max];
+      [aCoder encodeValueOfObjCType: @encode(BOOL) at: &_sends_whole_search_string];
+      [aCoder encodeValueOfObjCType: @encode(NSInteger) at: &max];
     }
 }
 
@@ -508,7 +506,7 @@
 	  [self setCancelButtonCell: [aDecoder decodeObjectForKey: @"NSCancelButtonCell"]];
 	  [self setRecentsAutosaveName: [aDecoder decodeObjectForKey: @"NSRecentsAutosaveName"]];
 	  [self setSendsWholeSearchString: [aDecoder decodeBoolForKey: @"NSSendsWholeSearchString"]];
-	  [self setMaximumRecents: [aDecoder decodeIntForKey: @"NSMaximumRecents"]];
+	  [self setMaximumRecents: [aDecoder decodeIntegerForKey: @"NSMaximumRecents"]];
 	}
       else
 	{
@@ -518,7 +516,7 @@
 	  [self setCancelButtonCell: [aDecoder decodeObject]];
 	  [self setRecentsAutosaveName: [aDecoder decodeObject]];
 	  [aDecoder decodeValueOfObjCType: @encode(BOOL) at: &_sends_whole_search_string];
-	  [aDecoder decodeValueOfObjCType: @encode(unsigned int) at: &max];
+	  [aDecoder decodeValueOfObjCType: @encode(NSInteger) at: &max];
           [self setMaximumRecents: max];
 	}
       
@@ -582,10 +580,10 @@
   NSMenuView *mr;
   NSWindow *cvWin;
   NSRect cellFrame;
-  int i;
-  int recentCount = [_recent_searches count];
+  NSInteger i;
+  NSInteger recentCount = [_recent_searches count];
   NSPopUpButtonCell *pbcell = [[NSPopUpButtonCell alloc] initTextCell:nil pullsDown:NO];
-  int selectedItemIndex = -1, newSelectedItemIndex;
+  NSInteger selectedItemIndex = -1, newSelectedItemIndex;
   
   template = [self searchMenuTemplate];
   popupmenu = [[NSMenu alloc] init];
@@ -593,7 +591,7 @@
   // Fill the popup menu 
   for (i = 0; i < [template numberOfItems]; i++)
     {
-      int tag;
+      NSInteger tag;
       NSMenuItem *item, *newItem = nil;
 
       item = (NSMenuItem*)[template itemAtIndex: i];
@@ -675,7 +673,7 @@
   if (newSelectedItemIndex != selectedItemIndex && newSelectedItemIndex != -1
       && newSelectedItemIndex < [template numberOfItems])
     {
-      int tag = [[template itemAtIndex:newSelectedItemIndex] tag];
+      NSInteger tag = [[template itemAtIndex:newSelectedItemIndex] tag];
       if (tag != NSSearchFieldRecentsTitleMenuItemTag && tag != NSSearchFieldClearRecentsMenuItemTag
           && tag != NSSearchFieldNoRecentsMenuItemTag && tag != NSSearchFieldRecentsMenuItemTag
           && ![[template itemAtIndex:newSelectedItemIndex] isSeparatorItem])
diff --git a/Source/NSSecureTextField.m b/Source/NSSecureTextField.m
index 7ff360b..da7600b 100644
--- a/Source/NSSecureTextField.m
+++ b/Source/NSSecureTextField.m
@@ -161,8 +161,8 @@
 {
   NSDictionary *attributes;
   NSMutableString *string;
-  unsigned int length;
-  unsigned int i;
+  NSUInteger length;
+  NSUInteger i;
   unichar *buf;
 
   length = [[self stringValue] length];
diff --git a/Source/NSSegmentedCell.m b/Source/NSSegmentedCell.m
index 972fb52..d21e198 100644
--- a/Source/NSSegmentedCell.m
+++ b/Source/NSSegmentedCell.m
@@ -201,7 +201,7 @@
       if (_width != 0.0)
         [aCoder encodeFloat: _width forKey: @"NSSegmentItemWidth"];
       if (_tag != 0)
-        [aCoder encodeInt: _tag forKey: @"NSSegmentItemTag"];
+        [aCoder encodeInteger: _tag forKey: @"NSSegmentItemTag"];
     }
   else
     {
@@ -236,7 +236,7 @@
       if ([aDecoder containsValueForKey: @"NSSegmentItemWidth"])
         _width = [aDecoder decodeFloatForKey: @"NSSegmentItemWidth"];
       if ([aDecoder containsValueForKey: @"NSSegmentItemTag"])
-	_tag = [aDecoder decodeIntForKey: @"NSSegmentItemTag"];
+	_tag = [aDecoder decodeIntegerForKey: @"NSSegmentItemTag"];
     }
   else
     {
@@ -619,7 +619,7 @@
     {
       [aCoder encodeObject: _items forKey: @"NSSegmentImages"];
       if (_selected_segment != -1)
-        [aCoder encodeInt: _selected_segment forKey: @"NSSelectedSegment"];
+        [aCoder encodeInteger: _selected_segment forKey: @"NSSelectedSegment"];
       [aCoder encodeInt: _segmentCellFlags._style forKey: @"NSSegmentStyle"];
     }
   else
@@ -657,7 +657,7 @@
 
       if ([aDecoder containsValueForKey: @"NSSelectedSegment"])
         {
-          _selected_segment = [aDecoder decodeIntForKey: @"NSSelectedSegment"];
+          _selected_segment = [aDecoder decodeIntegerForKey: @"NSSelectedSegment"];
           if (_selected_segment != -1)
             [self setSelectedSegment: _selected_segment];
         }
diff --git a/Source/NSSlider.m b/Source/NSSlider.m
index c5e0dac..dc0cb93 100644
--- a/Source/NSSlider.m
+++ b/Source/NSSlider.m
@@ -266,7 +266,7 @@ static Class cellClass;
 - (void) keyDown: (NSEvent *)ev
 {
   NSString *characters = [ev characters];
-  int i, length = [characters length];
+  NSInteger i, length = [characters length];
   double value = [self doubleValue];
   double min = [_cell minValue];
   double max = [_cell maxValue];
diff --git a/Source/NSSliderCell.m b/Source/NSSliderCell.m
index 2a0223c..6f66e30 100644
--- a/Source/NSSliderCell.m
+++ b/Source/NSSliderCell.m
@@ -667,7 +667,7 @@ float _floatValueForMousePoint (NSPoint point, NSRect knobRect,
 - (double) closestTickMarkValueToValue: (double)aValue
 {
   double d, f;
-  int effectiveTicks;
+  NSInteger effectiveTicks;
 
   if (_numberOfTickMarks == 0)
     return aValue;
@@ -924,7 +924,7 @@ float _floatValueForMousePoint (NSPoint point, NSRect knobRect,
   if ([decoder allowsKeyedCoding])
     {
       _allowsTickMarkValuesOnly = [decoder decodeBoolForKey: @"NSAllowsTickMarkValuesOnly"];
-      _numberOfTickMarks = [decoder decodeIntForKey: @"NSNumberOfTickMarks"];
+      _numberOfTickMarks = [decoder decodeIntegerForKey: @"NSNumberOfTickMarks"];
       _tickMarkPosition = [decoder decodeIntForKey: @"NSTickMarkPosition"];
       [self setMinValue: [decoder decodeFloatForKey: @"NSMinValue"]];
       [self setMaxValue: [decoder decodeFloatForKey: @"NSMaxValue"]];
@@ -966,7 +966,7 @@ float _floatValueForMousePoint (NSPoint point, NSRect knobRect,
   if ([coder allowsKeyedCoding])
     {
       [coder encodeBool: _allowsTickMarkValuesOnly forKey: @"NSAllowsTickMarkValuesOnly"];
-      [coder encodeInt: _numberOfTickMarks forKey: @"NSNumberOfTickMarks"];
+      [coder encodeInteger: _numberOfTickMarks forKey: @"NSNumberOfTickMarks"];
       [coder encodeInt: _tickMarkPosition forKey: @"NSTickMarkPosition"];
       [coder encodeFloat: _minValue forKey: @"NSMinValue"];
       [coder encodeFloat: _maxValue forKey: @"NSMaxValue"];
diff --git a/Source/NSSound.m b/Source/NSSound.m
index 393055b..011051f 100644
--- a/Source/NSSound.m
+++ b/Source/NSSound.m
@@ -111,9 +111,9 @@ static inline void _loadNSSoundPlugIns (void)
 
   if ((ext == nil) || [ext isEqualToString:@""])
     {
-      NSArray	*types = [NSSound soundUnfilteredFileTypes];
-      unsigned	c = [types count];
-      unsigned	i;
+      NSArray *types = [NSSound soundUnfilteredFileTypes];
+      NSUInteger c = [types count];
+      NSUInteger i;
 
       for (i = 0; path == nil && i < c; i++)
 	      {
diff --git a/Source/NSSpellChecker.m b/Source/NSSpellChecker.m
index 89b1d6a..e7c97b5 100644
--- a/Source/NSSpellChecker.m
+++ b/Source/NSSpellChecker.m
@@ -62,7 +62,7 @@
 #import "GNUstepGUI/GSServicesManager.h"
 
 // prototype for function to create name for server
-NSString *GSSpellServerName(NSString *checkerDictionary, NSString *language);
+extern NSString *GSSpellServerName(NSString *checkerDictionary, NSString *language);
 
 // These are methods which we only want the NSSpellChecker to call.
 // The protocol is defined here so that the outside world does not
@@ -71,14 +71,12 @@ NSString *GSSpellServerName(NSString *checkerDictionary, NSString *language);
 - (NSRange) _findMisspelledWordInString: (NSString *)stringToCheck
 			       language: (NSString *)language
 			   ignoredWords: (NSArray *)ignoredWords
-			      wordCount: (int *)wordCount
+			      wordCount: (NSInteger *)wordCount
 			      countOnly: (BOOL)countOnly;
 
-- (BOOL) _learnWord: (NSString *)word
-       inDictionary: (NSString *)language;
+- (BOOL) _learnWord: (NSString *)word inDictionary: (NSString *)language;
 
-- (BOOL) _forgetWord: (NSString *)word
-        inDictionary: (NSString *)language;
+- (BOOL) _forgetWord: (NSString *)word inDictionary: (NSString *)language;
 
 - (NSArray *) _suggestGuessesForWord: (NSString *)word
 			  inLanguage: (NSString *)language;
@@ -146,7 +144,7 @@ NSString *GSSpellServerName(NSString *checkerDictionary, NSString *language);
 
 // Shared spell checker instance....
 static NSSpellChecker *__sharedSpellChecker = nil;
-static int __documentTag = 0;
+static NSInteger __documentTag = 0;
 
 // Implementation of spell checker class
 @implementation NSSpellChecker
@@ -185,7 +183,7 @@ static int __documentTag = 0;
 //
 // Managing the Spelling Process 
 //
-+ (int)uniqueSpellDocumentTag
++ (NSInteger)uniqueSpellDocumentTag
 {
   return ++__documentTag;
 }
@@ -260,7 +258,7 @@ static int __documentTag = 0;
 //
 // Instance methods
 //
-- init
+- (id)init
 {
   NSArray *languages;
 
@@ -322,10 +320,9 @@ static int __documentTag = 0;
 //
 // Checking Spelling 
 //
-- (int)countWordsInString:(NSString *)aString
-		 language:(NSString *)language
+- (NSInteger)countWordsInString:(NSString *)aString language:(NSString *)language
 {
-  int count = 0;
+  NSInteger count = 0;
   id<NSSpellServerPrivateProtocol> proxy = [self _serverProxy];
 
   if (proxy != nil)
@@ -339,9 +336,9 @@ static int __documentTag = 0;
 }
 
 - (NSRange)checkSpellingOfString:(NSString *)stringToCheck
-		      startingAt:(int)startingOffset
+		      startingAt:(NSInteger)startingOffset
 {
-  int wordCount = 0;
+  NSInteger wordCount = 0;
   NSRange r;
 
   r = [self checkSpellingOfString: stringToCheck
@@ -355,11 +352,11 @@ static int __documentTag = 0;
 }
 
 - (NSRange)checkSpellingOfString:(NSString *)stringToCheck
-		      startingAt:(int)startingOffset
+		      startingAt:(NSInteger)startingOffset
                         language:(NSString *)language
 		            wrap:(BOOL)wrapFlag
-          inSpellDocumentWithTag:(int)tag
-		       wordCount:(int *)wordCount
+          inSpellDocumentWithTag:(NSInteger)tag
+		       wordCount:(NSInteger *)wordCount
 {
   NSRange r;
   NSArray *dictForTag = [self ignoredWordsInSpellDocumentWithTag: tag];
@@ -389,10 +386,10 @@ static int __documentTag = 0;
 	NS_VALUERETURN(NSMakeRange(0,0), NSRange);
 
       r = [proxy _findMisspelledWordInString: substringToCheck
-		 language: _language
-		 ignoredWords: dictForTag
-		 wordCount: wordCount
-		 countOnly: NO];
+                                    language: _language
+                                ignoredWords: dictForTag
+                                   wordCount: wordCount
+                                   countOnly: NO];
       
       if (r.length != 0)
 	{
@@ -407,10 +404,10 @@ static int __documentTag = 0;
 	      NSString *firstHalfOfString = [stringToCheck 
 					      substringToIndex: startingOffset];
 	      r = [proxy _findMisspelledWordInString: firstHalfOfString
-			 language: _language
-			 ignoredWords: dictForTag
-			 wordCount: wordCount
-			 countOnly: NO];
+                                            language: _language
+                                        ignoredWords: dictForTag
+                                           wordCount: wordCount
+                                           countOnly: NO];
 	    }
 	}
       NS_VALUERETURN(r, NSRange);
@@ -454,7 +451,7 @@ static int __documentTag = 0;
 
 - (BOOL)setLanguage:(NSString *)aLanguage
 {
-  int index = 0;
+  NSInteger index = 0;
   BOOL result = NO;
 
   index = [_dictionaryPulldown indexOfItemWithTitle: aLanguage];
@@ -473,17 +470,16 @@ static int __documentTag = 0;
 
 // Remove the ignored word list for this 
 // document from the dictionary
-- (void)closeSpellDocumentWithTag:(int)tag
+- (void)closeSpellDocumentWithTag:(NSInteger)tag
 {
-  NSNumber *key = [NSNumber numberWithInt: tag];
+  NSNumber *key = [NSNumber numberWithInteger: tag];
   [_ignoredWords removeObjectForKey: key];
 }
 
 // Add a word to the ignored list.
-- (void)    ignoreWord:(NSString *)wordToIgnore 
-inSpellDocumentWithTag:(int)tag
+- (void)ignoreWord:(NSString *)wordToIgnore inSpellDocumentWithTag:(NSInteger)tag
 {
-  NSNumber *key = [NSNumber numberWithInt: tag];
+  NSNumber *key = [NSNumber numberWithInteger: tag];
   NSMutableSet *words = [_ignoredWords objectForKey: key];
 
   if (![wordToIgnore isEqualToString: @""])
@@ -502,18 +498,17 @@ inSpellDocumentWithTag:(int)tag
 }
 
 // get the list of ignored words.
-- (NSArray *)ignoredWordsInSpellDocumentWithTag:(int)tag
+- (NSArray *)ignoredWordsInSpellDocumentWithTag:(NSInteger)tag
 {
-  NSNumber *key = [NSNumber numberWithInt: tag];
+  NSNumber *key = [NSNumber numberWithInteger: tag];
   NSSet *words = [_ignoredWords objectForKey: key];
   return [words allObjects];
 }
 
 // set the list of ignored words for a given document
-- (void)setIgnoredWords:(NSArray *)someWords
- inSpellDocumentWithTag:(int)tag
+- (void)setIgnoredWords:(NSArray *)someWords inSpellDocumentWithTag:(NSInteger)tag
 {
-  NSNumber *key = [NSNumber numberWithInt: tag];
+  NSNumber *key = [NSNumber numberWithInteger: tag];
   NSSet *words = [NSSet setWithArray: someWords];
   [_ignoredWords setObject: words forKey: key];
 }
diff --git a/Source/NSSplitView.m b/Source/NSSplitView.m
index e55cf03..84dab87 100644
--- a/Source/NSSplitView.m
+++ b/Source/NSSplitView.m
@@ -150,7 +150,7 @@ static NSNotificationCenter *nc = nil;
                 {
                   proportion = (NSWidth(frames[i]))/oldTotal;              
                 }
-              key = [NSString stringWithFormat: @"%u", i];
+              key = [NSString stringWithFormat: @"%lu", (unsigned long)i];
               [config setObject: [NSNumber numberWithDouble: proportion]
                          forKey: key];
             }
@@ -828,7 +828,7 @@ static NSNotificationCenter *nc = nil;
               NSNumber	*proportion;
 	      NSString	*key;
 
-	      key = [NSString stringWithFormat: @"%u", i];
+	      key = [NSString stringWithFormat: @"%lu", (unsigned long)i];
               proportion = [config objectForKey: key];
               if (proportion == nil)
                 {
diff --git a/Source/NSStringDrawing.m b/Source/NSStringDrawing.m
index eebe826..5801016 100644
--- a/Source/NSStringDrawing.m
+++ b/Source/NSStringDrawing.m
@@ -61,9 +61,9 @@ from #GNUstep).
 
 typedef struct
 {
-  int used;
-  unsigned int string_hash;
-  int hasSize, useScreenFonts;
+  NSInteger used;
+  NSUInteger string_hash;
+  NSInteger hasSize, useScreenFonts;
 
   NSTextStorage *textStorage;
   NSLayoutManager *layoutManager;
@@ -103,7 +103,7 @@ static void NSStringDrawing_dump_stats(void)
 
 static void init_string_drawing(void)
 {
-  int i;
+  NSInteger i;
   NSTextStorage *textStorage;
   NSLayoutManager *layoutManager;
   NSTextContainer *textContainer;
@@ -163,7 +163,7 @@ static inline void cache_unlock()
   [cacheLock unlock];
 }
 
-static inline BOOL is_size_match(cache_t *c, int hasSize, NSSize size)
+static inline BOOL is_size_match(cache_t *c, NSInteger hasSize, NSSize size)
 {
   if ((!c->hasSize && !hasSize) ||
       (c->hasSize && hasSize && c->givenSize.width == size.width
@@ -179,14 +179,14 @@ static inline BOOL is_size_match(cache_t *c, int hasSize, NSSize size)
     }
 }
 
-static int cache_match(int hasSize, NSSize size, int useScreenFonts, int *matched)
+static NSInteger cache_match(NSInteger hasSize, NSSize size, NSInteger useScreenFonts, NSInteger *matched)
 {
-  int i, j;
+  NSInteger i, j;
   cache_t *c;
-  int least_used;
-  int replace;
-  int orig_used;
-  unsigned int string_hash = [[scratchTextStorage string] hash];
+  NSInteger least_used;
+  NSInteger replace;
+  NSInteger orig_used;
+  NSUInteger string_hash = [[scratchTextStorage string] hash];
 
 #ifdef STATS
   total++;
@@ -291,10 +291,10 @@ static inline void prepare_attributed_string(NSAttributedString *string)
                           withAttributedString: string];
 }
 
-static int cache_lookup(int hasSize, NSSize size, int useScreenFonts)
+static NSInteger cache_lookup(int hasSize, NSSize size, int useScreenFonts)
 {
   cache_t *c;
-  int ci, hit;
+  NSInteger ci, hit;
   NSLayoutManager *layoutManager;
   NSTextContainer *textContainer;
 
@@ -351,7 +351,7 @@ glyphs to be drawn upside-down, so we need to tell NSFont to flip the fonts.
 
 - (void) drawAtPoint: (NSPoint)point
 {
-  int ci;
+  NSInteger ci;
   cache_t *c;
 
   NSRange r;
@@ -412,7 +412,7 @@ glyphs to be drawn upside-down, so we need to tell NSFont to flip the fonts.
               options: (NSStringDrawingOptions)options
 {
   // FIXME: This ignores options
-  int ci;
+  NSInteger ci;
   cache_t *c;
 
   NSRange r;
@@ -500,7 +500,7 @@ glyphs to be drawn upside-down, so we need to tell NSFont to flip the fonts.
                         options: (NSStringDrawingOptions)options
 {
   // FIXME: This ignores options
-  int ci;
+  NSInteger ci;
   NSRect result = NSZeroRect;
   int hasSize = NSEqualSizes(NSZeroSize, size) ? 0 : 1;
 
@@ -529,7 +529,7 @@ glyphs to be drawn upside-down, so we need to tell NSFont to flip the fonts.
 
 - (void) drawAtPoint: (NSPoint)point withAttributes: (NSDictionary *)attrs
 {
-  int ci;
+  NSInteger ci;
   cache_t *c;
 
   NSRange r;
@@ -590,7 +590,7 @@ glyphs to be drawn upside-down, so we need to tell NSFont to flip the fonts.
            attributes: (NSDictionary *)attrs
 {
   // FIXME: This ignores options
-  int ci;
+  NSInteger ci;
   cache_t *c;
 
   NSRange r;
@@ -679,7 +679,7 @@ glyphs to be drawn upside-down, so we need to tell NSFont to flip the fonts.
                      attributes: (NSDictionary *)attrs
 {
   // FIXME: This ignores options
-  int ci;
+  NSInteger ci;
   NSRect result = NSZeroRect;
   int hasSize = NSEqualSizes(NSZeroSize, size) ? 0 : 1;
 
@@ -707,6 +707,7 @@ glyphs to be drawn upside-down, so we need to tell NSFont to flip the fonts.
 /*
 Dummy function; see comment in NSApplication.m, +initialize.
 */
+extern void GSStringDrawingDummyFunction(void);
 void GSStringDrawingDummyFunction(void)
 {
 }
diff --git a/Source/NSTabView.m b/Source/NSTabView.m
index c0ecc93..f38d12b 100644
--- a/Source/NSTabView.m
+++ b/Source/NSTabView.m
@@ -614,7 +614,7 @@
     }
   else
     {
-      int version = [aDecoder versionForClassName: @"NSTabView"];
+      NSInteger version = [aDecoder versionForClassName: @"NSTabView"];
 
       [aDecoder decodeValueOfObjCType: @encode(id) at: &_items];
       [aDecoder decodeValueOfObjCType: @encode(id) at: &_font];
@@ -696,8 +696,7 @@
 {
   if ([aKey isEqual: NSSelectedIndexBinding])
     {
-      return [NSNumber numberWithInt: [self indexOfTabViewItem: 
-                                              [self selectedTabViewItem]]];
+      return [NSNumber numberWithInteger:[self indexOfTabViewItem:[self selectedTabViewItem]]];
     }
   else if ([aKey isEqual: NSFontNameBinding])
     {
@@ -705,11 +704,11 @@
     }
   else if ([aKey isEqual: NSFontSizeBinding])
     {
-      return [NSNumber numberWithDouble: (double)[[self font] pointSize]];
+      return [NSNumber numberWithDouble:(double)[[self font] pointSize]];
     }
   else
     {
-      return [super valueForKey: aKey];
+      return [super valueForKey:aKey];
     }
 }
 @end
diff --git a/Source/NSTableColumn.m b/Source/NSTableColumn.m
index 4042f89..b0a10b0 100644
--- a/Source/NSTableColumn.m
+++ b/Source/NSTableColumn.m
@@ -487,7 +487,7 @@ to YES. */
       [aCoder encodeFloat: _width forKey: @"NSWidth"];
       [aCoder encodeObject: _sortDescriptorPrototype 
               forKey: @"NSSortDescriptorPrototype"];
-      [aCoder encodeInt: _resizing_mask forKey: @"NSResizingMask"];
+      [aCoder encodeInteger: _resizing_mask forKey: @"NSResizingMask"];
       [aCoder encodeObject: _headerToolTip forKey: @"NSHeaderToolTip"];
       [aCoder encodeBool: _is_hidden forKey: @"NSHidden"];
       [aCoder encodeObject: _tableView forKey: @"NSTableView"];
@@ -575,7 +575,7 @@ to YES. */
     }
   else
     {
-      int version = [aDecoder versionForClassName: 
+      NSInteger version = [aDecoder versionForClassName: 
 				  @"NSTableColumn"];
       
       self = [super init];
diff --git a/Source/NSTableHeaderView.m b/Source/NSTableHeaderView.m
index edec0e8..343898e 100644
--- a/Source/NSTableHeaderView.m
+++ b/Source/NSTableHeaderView.m
@@ -54,9 +54,9 @@
 #define mouse_sensitivity 4
 
 @interface NSTableView (GNUstepPrivate)
-- (void) _userResizedTableColumn: (int)index
-                           width: (float)width;
-- (float *) _columnOrigins;
+- (void) _userResizedTableColumn: (NSInteger)index
+                           width: (CGFloat)width;
+- (CGFloat *) _columnOrigins;
 - (void) _mouseDownInHeaderOfTableColumn: (NSTableColumn *)tc;
 - (void) _clickTableColumn: (NSTableColumn *)tc;
 @end
@@ -487,7 +487,7 @@
             maxCoord = NSMaxX(bounds);
           }
           {
-            float *_c = [_tableView _columnOrigins];
+            CGFloat *_c = [_tableView _columnOrigins];
             _cO_minus1 = malloc((numberOfColumns + 3) * sizeof(CGFloat));
             _cO = _cO_minus1 + 1;
             memcpy(_cO, _c, numberOfColumns * sizeof(CGFloat));
diff --git a/Source/NSTableView.m b/Source/NSTableView.m
index 1f1c666..258b991 100644
--- a/Source/NSTableView.m
+++ b/Source/NSTableView.m
@@ -72,14 +72,14 @@
 #include <math.h>
 static NSNotificationCenter *nc = nil;
 
-static const int currentVersion = 5;
+static const NSInteger currentVersion = 5;
 
 static NSRect oldDraggingRect;
-static int oldDropRow;
+static NSInteger oldDropRow;
 static NSTableViewDropOperation oldDropOperation;
 static NSTableViewDropOperation currentDropOperation;
-static int currentDropRow;
-static int lastQuarterPosition;
+static NSInteger currentDropRow;
+static NSInteger lastQuarterPosition;
 static NSDragOperation currentDragOperation;
 
 /*
@@ -90,21 +90,21 @@ static NSDragOperation currentDragOperation;
 typedef struct _tableViewFlags
 {
 #if GS_WORDS_BIGENDIAN == 1
-  unsigned int columnOrdering:1;
-  unsigned int columnResizing:1;
-  unsigned int drawsGrid:1;
-  unsigned int emptySelection:1;
-  unsigned int multipleSelection:1;
-  unsigned int columnSelection:1;
-  unsigned int _unused:26;
+  uint32_t columnOrdering:1;
+  uint32_t columnResizing:1;
+  uint32_t drawsGrid:1;
+  uint32_t emptySelection:1;
+  uint32_t multipleSelection:1;
+  uint32_t columnSelection:1;
+  uint32_t _unused:26;
 #else
-  unsigned int _unused:26;
-  unsigned int columnSelection:1;
-  unsigned int multipleSelection:1;
-  unsigned int emptySelection:1;
-  unsigned int drawsGrid:1;
-  unsigned int columnResizing:1;
-  unsigned int columnOrdering:1;
+  uint32_t _unused:26;
+  uint32_t columnSelection:1;
+  uint32_t multipleSelection:1;
+  uint32_t emptySelection:1;
+  uint32_t drawsGrid:1;
+  uint32_t columnResizing:1;
+  uint32_t columnOrdering:1;
 #endif
 } GSTableViewFlags;
 
@@ -117,46 +117,46 @@ typedef struct _tableViewFlags
 @interface NSTableView (NotificationRequestMethods)
 - (void) _postSelectionIsChangingNotification;
 - (void) _postSelectionDidChangeNotification;
-- (void) _postColumnDidMoveNotificationWithOldIndex: (int) oldIndex
-					   newIndex: (int) newIndex;
+- (void) _postColumnDidMoveNotificationWithOldIndex: (NSInteger) oldIndex
+					   newIndex: (NSInteger) newIndex;
 - (void) _postColumnDidResizeNotification;
 - (BOOL) _shouldSelectTableColumn: (NSTableColumn *)tableColumn;
-- (BOOL) _shouldSelectRow: (int)rowIndex;
+- (BOOL) _shouldSelectRow: (NSInteger)rowIndex;
 
 - (BOOL) _shouldSelectionChange;
 - (void) _didChangeSortDescriptors: (NSArray *)oldSortDescriptors;
 - (void) _didClickTableColumn: (NSTableColumn *)tc;
 - (BOOL) _shouldEditTableColumn: (NSTableColumn *)tableColumn
-			    row: (int) rowIndex;
+			    row: (NSInteger) rowIndex;
 - (void) _willDisplayCell: (NSCell*)cell
 	   forTableColumn: (NSTableColumn *)tb
-		      row: (int)index;
+		      row: (NSInteger)index;
 
 - (BOOL) _writeRows: (NSIndexSet *)rows
        toPasteboard: (NSPasteboard *)pboard;
 - (BOOL) _isDraggingSource;
 - (id)_objectValueForTableColumn: (NSTableColumn *)tb
-			     row: (int)index;
+			     row: (NSInteger)index;
 - (void)_setObjectValue: (id)value
 	 forTableColumn: (NSTableColumn *)tb
-		    row: (int)index;
-
-- (BOOL) _isEditableColumn: (int)columnIndex
-                       row: (int)rowIndex;
-- (BOOL) _isCellSelectableColumn: (int)columnIndex
-                             row: (int)rowIndex;
-- (BOOL) _isCellEditableColumn: (int)columnIndex
-			   row: (int)rowIndex;
-- (int) _numRows;
+		    row: (NSInteger)index;
+
+- (BOOL) _isEditableColumn: (NSInteger)columnIndex
+                       row: (NSInteger)rowIndex;
+- (BOOL) _isCellSelectableColumn: (NSInteger)columnIndex
+                             row: (NSInteger)rowIndex;
+- (BOOL) _isCellEditableColumn: (NSInteger)columnIndex
+                           row: (NSInteger)rowIndex;
+- (NSInteger) _numRows;
 @end
 
 @interface NSTableView (SelectionHelper)
 - (void) _setSelectingColumns: (BOOL)flag;
 - (NSArray *) _indexSetToArray: (NSIndexSet*)indexSet;
 - (NSArray *) _selectedRowArray;
-- (BOOL) _selectRow: (int)rowIndex;
-- (BOOL) _selectUnselectedRow: (int)rowIndex;
-- (BOOL) _unselectRow: (int)rowIndex;
+- (BOOL) _selectRow: (NSInteger)rowIndex;
+- (BOOL) _selectUnselectedRow: (NSInteger)rowIndex;
+- (BOOL) _unselectRow: (NSInteger)rowIndex;
 - (void) _unselectAllRows;
 - (NSArray *) _selectedColumArray;
 - (void) _unselectAllColumns;
@@ -178,16 +178,16 @@ typedef struct {
 
 
 static
-void quick_sort_internal(columnSorting *data, int p, int r)
+void quick_sort_internal(columnSorting *data, NSInteger p, NSInteger r)
 {
   if (p < r)
     {
-      int q;
+      NSInteger q;
       {
 	CGFloat x = data[p].width;
 	BOOL y = data[p].isMax;
-	int i = p - 1;
-	int j = r + 1;
+	NSInteger i = p - 1;
+	NSInteger j = r + 1;
 	columnSorting exchange;
 	while (1)
 	  {
@@ -231,15 +231,14 @@ void quick_sort_internal(columnSorting *data, int p, int r)
  *
  */
 
-static void computeNewSelection
-(NSTableView *tv,
- NSIndexSet *_oldSelectedRows,
- NSMutableIndexSet *_selectedRows,
- int _originalRow,
- int _oldRow,
- int _currentRow,
- int *_selectedRow,
- unsigned selectionMode)
+static void computeNewSelection(NSTableView *tv,
+                                NSIndexSet *_oldSelectedRows,
+                                NSMutableIndexSet *_selectedRows,
+                                NSInteger _originalRow,
+                                NSInteger _oldRow,
+                                NSInteger _currentRow,
+                                NSInteger *_selectedRow,
+                                NSUInteger selectionMode)
 {
   if (!(selectionMode & ALLOWS_MULTIPLE))
     {
@@ -249,7 +248,7 @@ static void computeNewSelection
 	  // we will unselect the selected row
 	  // ic, sc : ok
         {
-	  int count = [_selectedRows count];
+	  NSInteger count = [_selectedRows count];
 
 	  if ((count == 0) && (_oldRow == -1))
 	    {
@@ -305,7 +304,7 @@ static void computeNewSelection
 	  // we'll be selecting exactly one row
 	  // ic, sc : ok
         {
-	  int count = [_selectedRows count];
+	  NSInteger count = [_selectedRows count];
 	  
 	  if ([tv _shouldSelectRow: _currentRow] == NO)
 	    {
@@ -373,8 +372,8 @@ static void computeNewSelection
 	// this is the first pass
 	{
 	  BOOL notified = NO;
-	  int i;
-	  int diff = _currentRow - _originalRow;
+	  NSInteger i;
+	  NSInteger diff = _currentRow - _originalRow;
 
 	  if (diff >= 0)
 	    {
@@ -409,7 +408,7 @@ static void computeNewSelection
 	}
       else // new multiple selection, after first pass
 	{ 
-	  int oldDiff, newDiff, i;
+	  NSInteger oldDiff, newDiff, i;
 	  oldDiff = _oldRow - _originalRow;
 	  newDiff = _currentRow - _originalRow;
 	  if (oldDiff >= 0 && newDiff >= 0)
@@ -641,8 +640,8 @@ static void computeNewSelection
 	// this is the first pass
 	// we'll clear the selection first
 	{
-	  int diff, i;
-	  int count = [_selectedRows count];
+	  NSInteger diff, i;
+	  NSInteger count = [_selectedRows count];
 	  BOOL notified = NO;
       	  diff = _currentRow - _originalRow;
 
@@ -681,7 +680,7 @@ static void computeNewSelection
 	}
       else // new multiple selection, after first pass
 	{ 
-	  int oldDiff, newDiff, i;
+	  NSInteger oldDiff, newDiff, i;
 	  oldDiff = _oldRow - _originalRow;
 	  newDiff = _currentRow - _originalRow;
 	  if (oldDiff >= 0 && newDiff >= 0)
@@ -885,8 +884,8 @@ static void computeNewSelection
 	      // let's clear the old selection
 	      // this code is copied from another case
 	      // (AM = 1, SD=0, AE=1, AR=*, first pass)
-	      int diff, i;
-	      int count = [_selectedRows count];
+	      NSInteger diff, i;
+	      NSInteger count = [_selectedRows count];
 	      BOOL notified = NO;
 	      diff = _currentRow - _originalRow;
 	      
@@ -927,7 +926,7 @@ static void computeNewSelection
 	      // let's add to the old selection
 	      // this code is copied from another case
 	      // (AM=1, SD=1, AE=*, AR=1)
-	      int diff, i;
+	      NSInteger diff, i;
 	      BOOL notified = NO;
 	      diff = _currentRow - _originalRow;
 	      
@@ -968,7 +967,7 @@ static void computeNewSelection
 	{
 	  // this code is copied from another case
 	  // (AM=1, SD=0, AE=1, AR=*, after first pass)
-	  int oldDiff, newDiff, i;
+	  NSInteger oldDiff, newDiff, i;
 	  oldDiff = _oldRow - _originalRow;
 	  newDiff = _currentRow - _originalRow;
 	  if (oldDiff >= 0 && newDiff >= 0)
@@ -1154,7 +1153,7 @@ static void computeNewSelection
 	{
 	  // this code is copied from another case
 	  // (AM=1, SD=1, AE=*, AR=1, after first pass)
-	  int oldDiff, newDiff, i;
+	  NSInteger oldDiff, newDiff, i;
 	  oldDiff = _oldRow - _originalRow;
 	  newDiff = _currentRow - _originalRow;
 
@@ -1381,7 +1380,7 @@ static void computeNewSelection
       if (_oldRow == -1)
 	// this is the first pass
 	{
-	  int diff, i;
+	  NSInteger diff, i;
 	  BOOL notified = NO;
 
       	  diff = _currentRow - _originalRow;
@@ -1440,7 +1439,7 @@ static void computeNewSelection
 	}
       else // new multiple antiselection, after first pass
 	{ 
-	  int oldDiff, newDiff, i;
+	  NSInteger oldDiff, newDiff, i;
 
 	  oldDiff = _oldRow - _originalRow;
 	  newDiff = _currentRow - _originalRow;
@@ -1668,8 +1667,8 @@ static void computeNewSelection
       if (_oldRow == -1)
 	// this is the first pass
 	{
-	  int diff, i;
-	  int count = [_selectedRows count];
+	  NSInteger diff, i;
+	  NSInteger count = [_selectedRows count];
 	  BOOL notified = NO;
       	  diff = _currentRow - _originalRow;
 
@@ -1731,8 +1730,8 @@ static void computeNewSelection
 	}
       else // new multiple antiselection, after first pass
 	{ 
-	  int oldDiff, newDiff, i;
-	  int count = [_selectedRows count];
+	  NSInteger oldDiff, newDiff, i;
+	  NSInteger count = [_selectedRows count];
 	  oldDiff = _oldRow - _originalRow;
 	  newDiff = _currentRow - _originalRow;
 	  if (oldDiff >= 0 && newDiff >= 0)
@@ -1978,12 +1977,13 @@ static void computeNewSelection
 @end
 
 @interface NSTableView (TableViewInternalPrivate)
+
 - (void) _setSelectingColumns: (BOOL)flag;
-- (BOOL) _editNextEditableCellAfterRow: (int)row
-				column: (int)column;
-- (BOOL) _editPreviousEditableCellBeforeRow: (int)row
-				     column: (int)column;
-- (void) _editNextCellAfterRow:(int)row inColumn:(int)column;
+- (BOOL) _editNextEditableCellAfterRow: (NSInteger)row
+                                column: (NSInteger)column;
+- (BOOL) _editPreviousEditableCellBeforeRow: (NSInteger)row
+                                     column: (NSInteger)column;
+- (void) _editNextCellAfterRow:(NSInteger)row inColumn:(NSInteger)column;
 - (void) _autosaveTableColumns;
 - (void) _autoloadTableColumns;
 @end
@@ -2128,7 +2128,7 @@ static void computeNewSelection
 
 - (void) removeTableColumn: (NSTableColumn *)aColumn
 {
-  int columnIndex = [self columnWithIdentifier: [aColumn identifier]];
+  NSInteger columnIndex = [self columnWithIdentifier: [aColumn identifier]];
 
   if (columnIndex == -1)
     {
@@ -2169,9 +2169,9 @@ static void computeNewSelection
 {
   /* The range of columns which need to be shifted, 
      extremes included */
-  int minRange, maxRange;
+  NSInteger minRange, maxRange;
   /* Amount of shift for these columns */
-  int shift;
+  NSInteger shift;
   BOOL selected = NO;
 
   if ((columnIndex < 0) || (columnIndex > (_numberOfColumns - 1)))
@@ -2282,7 +2282,7 @@ static void computeNewSelection
 
 - (NSTableColumn *) tableColumnWithIdentifier:(id)anObject
 {
-  int indexOfColumn = [self columnWithIdentifier: anObject];
+  NSInteger indexOfColumn = [self columnWithIdentifier: anObject];
 
   if (indexOfColumn == -1)
     return nil;
@@ -2413,7 +2413,7 @@ static void computeNewSelection
  * Cocoa where the user can only make column range selection).
  */
 - (void) _selectColumn: (NSInteger)columnIndex
-	     modifiers: (unsigned int)modifiers
+	     modifiers: (NSUInteger)modifiers
 {
   NSIndexSet *oldIndexes = [self selectedColumnIndexes];
   BOOL addRange = ((modifiers & NSShiftKeyMask)
@@ -2571,8 +2571,7 @@ static void computeNewSelection
 /*
  * Selecting Columns and Rows
  */
-- (void) selectColumn: (NSInteger)columnIndex 
- byExtendingSelection: (BOOL)flag
+- (void) selectColumn: (NSInteger)columnIndex byExtendingSelection: (BOOL)flag
 {
   if (columnIndex < 0 || columnIndex > _numberOfColumns)
     {
@@ -3314,7 +3313,7 @@ byExtendingSelection: (BOOL)flag
   NSText *t;
   NSTableColumn *tb;
   NSRect drawingRect;
-  unsigned length = 0;
+  NSUInteger length = 0;
 
   if (rowIndex != _selectedRow)
     {
@@ -3418,9 +3417,9 @@ byExtendingSelection: (BOOL)flag
 }
 
 
-static inline float computePeriod(NSPoint mouseLocationWin,
-			   float minYVisible, 
-			   float maxYVisible)
+static inline CGFloat computePeriod(NSPoint mouseLocationWin,
+                                    CGFloat minYVisible, 
+                                    CGFloat maxYVisible)
 {
     /* We have three zones of speed. 
        0   -  50 pixels: period 0.2  <zone 1>
@@ -3446,8 +3445,8 @@ static inline float computePeriod(NSPoint mouseLocationWin,
 }
 
 - (void) _trackCellAtColumn: (NSInteger) columnIndex
-		row: (NSInteger) rowIndex
-		withEvent: (NSEvent *) theEvent
+                        row: (NSInteger) rowIndex
+                  withEvent: (NSEvent *) theEvent
 {
   if (rowIndex == -1 || columnIndex == -1)
     {
@@ -3551,7 +3550,7 @@ static inline float computePeriod(NSPoint mouseLocationWin,
 {
   NSPoint initialLocation = [theEvent locationInWindow];
   NSPoint location;
-  int clickCount = [theEvent clickCount];
+  NSInteger clickCount = [theEvent clickCount];
 
   // Pathological case -- ignore mouse down
   if ((_numberOfRows == 0) || (_numberOfColumns == 0))
@@ -3648,10 +3647,10 @@ if (currentRow >= 0 && currentRow < _numberOfRows) \
 				 toView: nil];
       CGFloat minYVisible = NSMinY (visibleRect);
       CGFloat maxYVisible = NSMaxY (visibleRect);
-      float oldPeriod = 0;
-      int originalRow = _clickedRow;
-      int oldRow = -1;
-      int currentRow = -1;
+      CGFloat oldPeriod = 0;
+      NSInteger originalRow = _clickedRow;
+      NSInteger oldRow = -1;
+      NSInteger currentRow = -1;
       BOOL getNextEvent = YES;
       BOOL sendAction = NO;
 
@@ -3961,13 +3960,13 @@ if (!x) \
 }
 static BOOL selectContiguousRegion(NSTableView *self,
   				   NSIndexSet *_selectedRows,
-				   int originalRow,
-				   int oldRow,
-				   int currentRow)
+				   NSInteger originalRow,
+				   NSInteger oldRow,
+				   NSInteger currentRow)
 {
-  int first = (oldRow < currentRow) ? oldRow : currentRow;
-  int last = (oldRow < currentRow) ? currentRow : oldRow;
-  int row;
+  NSInteger first = (oldRow < currentRow) ? oldRow : currentRow;
+  NSInteger last = (oldRow < currentRow) ? currentRow : oldRow;
+  NSInteger row;
   BOOL notified = NO;
 
   if (![_selectedRows containsIndex: currentRow])
@@ -4038,12 +4037,12 @@ static BOOL selectContiguousRegion(NSTableView *self,
 
 - (void) keyDown:(NSEvent *)theEvent
 {
-   int oldRow = -1;
-   int currentRow = _selectedRow;
-   int originalRow = -1;
+   NSInteger oldRow = -1;
+   NSInteger currentRow = _selectedRow;
+   NSInteger originalRow = -1;
    NSString *characters = [theEvent characters];
-   unsigned int len = [characters length];
-   unsigned int modifiers = [theEvent modifierFlags];
+   NSUInteger len = [characters length];
+   NSUInteger modifiers = [theEvent modifierFlags];
    int rowHeight = [self rowHeight];
    NSRect visRect = [self visibleRect];
    BOOL modifySelection = YES;
@@ -4201,8 +4200,8 @@ static BOOL selectContiguousRegion(NSTableView *self,
 	  
 	  if ((!(modifiers & NSShiftKeyMask && _allowsMultipleSelection)))
 	    {
-	      int first = [_selectedRows firstIndex];
-	      int last = [_selectedRows lastIndex];
+	      NSInteger first = [_selectedRows firstIndex];
+	      NSInteger last = [_selectedRows lastIndex];
 
 	      if ((first == last && first == currentRow) == 0)
 	        {
@@ -4332,7 +4331,7 @@ Hidden table columns are never tested. */
 {
   NSRange range = [self columnsInRect: aRect];
   NSMutableIndexSet *indexes = [NSMutableIndexSet indexSetWithIndexesInRange: range];
-  int i;
+  NSInteger i;
 
   for (i = range.location; i < range.length; i++)
     {
@@ -4367,7 +4366,7 @@ This method is deprecated, use -columnIndexesInRect:. */
 - (NSRange) rowsInRect: (NSRect)aRect
 {
   NSRange range;
-  int lastRowInRect;
+  NSInteger lastRowInRect;
 
   range.location = [self rowAtPoint: aRect.origin];
   lastRowInRect = [self rowAtPoint: 
@@ -4425,7 +4424,7 @@ This method is deprecated, use -columnIndexesInRect:. */
 }
 
 - (NSRect) frameOfCellAtColumn: (NSInteger)columnIndex 
-			   row: (NSInteger)rowIndex
+                           row: (NSInteger)rowIndex
 {
   NSRect frameRect;
 
@@ -4552,17 +4551,17 @@ This method is deprecated, use -columnIndexesInRect:. */
 - (void) sizeToFit
 {
   NSTableColumn *tb;
-  int i, j;
-  float remainingWidth;
+  NSInteger i, j;
+  CGFloat remainingWidth;
   columnSorting *columnInfo;
-  float *currentWidth;
-  float *maxWidth;
-  float *minWidth;
+  CGFloat *currentWidth;
+  CGFloat *maxWidth;
+  CGFloat *minWidth;
   BOOL *isResizable;
-  int numberOfCurrentColumns = 0;
-  float previousPoint;
-  float nextPoint;
-  float toAddToCurrentColumns;
+  NSInteger numberOfCurrentColumns = 0;
+  CGFloat previousPoint;
+  CGFloat nextPoint;
+  CGFloat toAddToCurrentColumns;
 
   if ((_super_view == nil) || (_numberOfColumns == 0))
     return;
@@ -4665,10 +4664,10 @@ This method is deprecated, use -columnIndexesInRect:. */
 		}
 	      else
 		{
-		  int remainingInt = floor(remainingWidth);
-		  int quotient = remainingInt / numberOfCurrentColumns;
-		  int remainder = remainingInt - quotient * numberOfCurrentColumns;
-		  int oldRemainder = remainder;
+		  NSInteger remainingInt = floor(remainingWidth);
+		  NSInteger quotient = remainingInt / numberOfCurrentColumns;
+		  NSInteger remainder = remainingInt - quotient * numberOfCurrentColumns;
+		  NSInteger oldRemainder = remainder;
 
 		  for (j = _numberOfColumns - 1; j >= 0; j--)
 		    {
@@ -4896,7 +4895,7 @@ This method is deprecated, use -columnIndexesInRect:. */
                     {
                       /* We shouldn't allow empty selection - try
                          selecting the last row */
-                      int lastRow = _numberOfRows - 1;
+                      NSInteger lastRow = _numberOfRows - 1;
                       
                       if (lastRow > -1)
                         {
@@ -5128,7 +5127,7 @@ This method is deprecated, use -columnIndexesInRect:. */
 - (void) textDidEndEditing: (NSNotification *)aNotification
 {
   id textMovement;
-  int row, column;
+  NSInteger row, column;
 
   /* Save values */
   row = _editedRow;
@@ -5463,7 +5462,7 @@ This method is deprecated, use -columnIndexesInRect:. */
       memcpy((void *)&vFlags,(void *)&tableViewFlags,sizeof(unsigned long));
 
       // encode..
-      [aCoder encodeInt: vFlags forKey: @"NSTvFlags"];
+      [aCoder encodeInteger: vFlags forKey: @"NSTvFlags"];
     }
   else
     {
@@ -5653,7 +5652,7 @@ This method is deprecated, use -columnIndexesInRect:. */
     }
   else
     {
-      int version = [aDecoder versionForClassName: 
+      NSInteger version = [aDecoder versionForClassName: 
                                   @"NSTableView"];
       id aDelegate;
 
@@ -5714,7 +5713,7 @@ This method is deprecated, use -columnIndexesInRect:. */
 
 - (void) updateCell: (NSCell*)aCell
 {
-  int i, j;
+  NSInteger i, j;
 
   if (aCell == nil)
     return;
@@ -5737,8 +5736,8 @@ This method is deprecated, use -columnIndexesInRect:. */
 				    NSMinY(visibleRect));
 	  NSPoint bottom = NSMakePoint(NSMinX(visibleRect),
 				       NSMaxY(visibleRect));
-	  int firstVisibleRow = [self rowAtPoint: top];
-	  int lastVisibleRow = [self rowAtPoint: bottom];
+	  NSInteger firstVisibleRow = [self rowAtPoint: top];
+	  NSInteger lastVisibleRow = [self rowAtPoint: bottom];
 
 	  if (firstVisibleRow == -1)
 	    firstVisibleRow = 0;
@@ -5759,13 +5758,13 @@ This method is deprecated, use -columnIndexesInRect:. */
     }
 }
 
-- (void) _userResizedTableColumn: (int)index
-			   width: (float)width
+- (void) _userResizedTableColumn: (NSInteger)index
+			   width: (CGFloat)width
 {
   [[_tableColumns objectAtIndex: index] setWidth: width];
 }
 
-- (float *) _columnOrigins
+- (CGFloat *) _columnOrigins
 {
   return _columnOrigins;
 }
@@ -5818,8 +5817,8 @@ This method is deprecated, use -columnIndexesInRect:. */
   [self _didClickTableColumn: tc];
 }
 
-- (void) _editNextCellAfterRow: (int) row
-		inColumn: (int) column
+- (void) _editNextCellAfterRow: (NSInteger) row
+                      inColumn: (NSInteger) column
 {
   if (++row >= _numberOfRows)
     row = 0;
@@ -5839,10 +5838,10 @@ This method is deprecated, use -columnIndexesInRect:. */
     }
 }
 
--(BOOL) _editNextEditableCellAfterRow: (int)row
-                               column: (int)column
+-(BOOL) _editNextEditableCellAfterRow: (NSInteger)row
+                               column: (NSInteger)column
 {
-  int i, j;
+  NSInteger i, j;
   
   if (row > -1)
     {
@@ -5907,10 +5906,10 @@ This method is deprecated, use -columnIndexesInRect:. */
   return NO;
 }
 
--(BOOL) _editPreviousEditableCellBeforeRow: (int)row
-				    column: (int)column
+-(BOOL) _editPreviousEditableCellBeforeRow: (NSInteger)row
+				    column: (NSInteger)column
 {
-  int i, j;
+  NSInteger i, j;
 
   if (row > -1)
     {
@@ -5999,7 +5998,7 @@ This method is deprecated, use -columnIndexesInRect:. */
 	  
 	  width = [NSNumber numberWithInt: [column width]];
 	  ident = [column identifier];
-	  identNum = [NSNumber numberWithInt: [self columnWithIdentifier: 
+	  identNum = [NSNumber numberWithInteger: [self columnWithIdentifier: 
 						      ident]];
 	  array = [NSArray arrayWithObjects: width, identNum, nil];  
 	  [config setObject: array  forKey: ident];      
@@ -6471,16 +6470,16 @@ For a more detailed explanation, -setSortDescriptors:. */
       object: self];
 }
 
-- (void) _postColumnDidMoveNotificationWithOldIndex: (int) oldIndex
-					   newIndex: (int) newIndex
+- (void) _postColumnDidMoveNotificationWithOldIndex: (NSInteger) oldIndex
+					   newIndex: (NSInteger) newIndex
 {
   [nc postNotificationName: NSTableViewColumnDidMoveNotification
       object: self
       userInfo: [NSDictionary 
 		  dictionaryWithObjectsAndKeys:
-		  [NSNumber numberWithInt: newIndex],
+		  [NSNumber numberWithInteger: newIndex],
 		  @"NSNewColumn",
-		    [NSNumber numberWithInt: oldIndex],
+		    [NSNumber numberWithInteger: oldIndex],
 		  @"NSOldColumn",
 		  nil]];
 }
@@ -6511,7 +6510,7 @@ For a more detailed explanation, -setSortDescriptors:. */
   return YES;
 }
 
-- (BOOL) _shouldSelectRow: (int)rowIndex
+- (BOOL) _shouldSelectRow: (NSInteger)rowIndex
 {
   if ([_delegate respondsToSelector: 
 		   @selector (tableView:shouldSelectRow:)] == YES) 
@@ -6560,7 +6559,7 @@ For a more detailed explanation, -setSortDescriptors:. */
 }
 
 - (BOOL) _shouldEditTableColumn: (NSTableColumn *)tableColumn
-			    row: (int) rowIndex
+			    row: (NSInteger) rowIndex
 {
   if ([_delegate respondsToSelector: 
 		     @selector(tableView:shouldEditTableColumn:row:)])
@@ -6572,8 +6571,8 @@ For a more detailed explanation, -setSortDescriptors:. */
   return YES;
 }
 
-- (BOOL) _isEditableColumn: (int) columnIndex
-                       row: (int) rowIndex
+- (BOOL) _isEditableColumn: (NSInteger) columnIndex
+                       row: (NSInteger) rowIndex
 {
   NSTableColumn *tableColumn = [_tableColumns objectAtIndex: columnIndex];
 
@@ -6581,8 +6580,8 @@ For a more detailed explanation, -setSortDescriptors:. */
                                                               row: rowIndex];
 }
 
-- (BOOL) _isCellSelectableColumn: (int) columnIndex
-                             row: (int) rowIndex
+- (BOOL) _isCellSelectableColumn: (NSInteger) columnIndex
+                             row: (NSInteger) rowIndex
 {
   if (![self _isEditableColumn: columnIndex row: rowIndex])
     {
@@ -6596,8 +6595,8 @@ For a more detailed explanation, -setSortDescriptors:. */
     }
 }
 
-- (BOOL) _isCellEditableColumn: (int) columnIndex
-			   row: (int) rowIndex
+- (BOOL) _isCellEditableColumn: (NSInteger) columnIndex
+			   row: (NSInteger) rowIndex
 {
   if (![self _isEditableColumn: columnIndex row: rowIndex])
     {
@@ -6613,7 +6612,7 @@ For a more detailed explanation, -setSortDescriptors:. */
 
 - (void) _willDisplayCell: (NSCell*)cell
 	   forTableColumn: (NSTableColumn *)tb
-		      row: (int)index
+		      row: (NSInteger)index
 {
   if (_del_responds)
     {
@@ -6625,7 +6624,7 @@ For a more detailed explanation, -setSortDescriptors:. */
 }
 
 - (id) _objectValueForTableColumn: (NSTableColumn *)tb
-			      row: (int) index
+			      row: (NSInteger) index
 {
   id result = nil;
   GSKeyValueBinding *theBinding;
@@ -6650,7 +6649,7 @@ For a more detailed explanation, -setSortDescriptors:. */
 
 - (void) _setObjectValue: (id)value
 	  forTableColumn: (NSTableColumn *)tb
-		     row: (int) index
+		     row: (NSInteger) index
 {
   if ([_dataSource respondsToSelector:
 		    @selector(tableView:setObjectValue:forTableColumn:row:)])
@@ -6666,7 +6665,7 @@ For a more detailed explanation, -setSortDescriptors:. */
  * implemented in NSTableView and subclasses 
  * by default returns the DataSource's -numberOfRowsInTableView:
  */
-- (int) _numRows
+- (NSInteger) _numRows
 {
   GSKeyValueBinding *theBinding;
 
@@ -6749,7 +6748,7 @@ For a more detailed explanation, -setSortDescriptors:. */
       
   while (index != NSNotFound)
     {
-      NSNumber *num  = [NSNumber numberWithInt: index];
+      NSNumber *num  = [NSNumber numberWithInteger: index];
 
       [array addObject: num]; 
       index = [indexSet indexGreaterThanIndex: index];
@@ -6763,7 +6762,7 @@ For a more detailed explanation, -setSortDescriptors:. */
   return [self _indexSetToArray: _selectedRows];
 }
 
-- (BOOL) _selectRow: (int)rowIndex
+- (BOOL) _selectRow: (NSInteger)rowIndex
 {
   if (![self _shouldSelectRow: rowIndex])
     {
@@ -6776,7 +6775,7 @@ For a more detailed explanation, -setSortDescriptors:. */
   return YES;
 }
 
-- (BOOL) _selectUnselectedRow: (int)rowIndex
+- (BOOL) _selectUnselectedRow: (NSInteger)rowIndex
 {
   if ([_selectedRows containsIndex: rowIndex])
     {
@@ -6789,7 +6788,7 @@ For a more detailed explanation, -setSortDescriptors:. */
   return YES;
 }
 
-- (BOOL) _unselectRow: (int)rowIndex
+- (BOOL) _unselectRow: (NSInteger)rowIndex
 {
   if (![_selectedRows containsIndex: rowIndex])
     {
diff --git a/Source/NSTextAttachment.m b/Source/NSTextAttachment.m
index 6908470..bf7e742 100644
--- a/Source/NSTextAttachment.m
+++ b/Source/NSTextAttachment.m
@@ -49,7 +49,7 @@
 
 - (void)drawWithFrame: (NSRect)cellFrame 
 	       inView: (NSView *)controlView 
-       characterIndex: (unsigned)charIndex
+       characterIndex: (NSUInteger)charIndex
 {
   [self drawWithFrame: cellFrame 
 	inView: controlView];
@@ -57,7 +57,7 @@
 
 - (void)drawWithFrame: (NSRect)cellFrame 
 	       inView: (NSView *)controlView 
-       characterIndex: (unsigned)charIndex
+       characterIndex: (NSUInteger)charIndex
 	layoutManager: (NSLayoutManager *)layoutManager
 {
   [self drawWithFrame: cellFrame 
@@ -73,7 +73,7 @@
 - (NSRect)cellFrameForTextContainer: (NSTextContainer *)textContainer 
 	       proposedLineFragment: (NSRect)lineFrag
 		      glyphPosition: (NSPoint)position 
-		     characterIndex: (unsigned)charIndex
+		     characterIndex: (NSUInteger)charIndex
 {
   NSRect aRect;
   
@@ -90,7 +90,7 @@
 - (BOOL)wantsToTrackMouseForEvent: (NSEvent *)theEvent 
 			   inRect: (NSRect)cellFrame 
 			   ofView: (NSView *)controlView
-		 atCharacterIndex: (unsigned)charIndex
+		 atCharacterIndex: (NSUInteger)charIndex
 {
   return [self wantsToTrackMouse];
 }
@@ -154,7 +154,7 @@
 - (BOOL)trackMouse: (NSEvent *)theEvent 
 	    inRect: (NSRect)cellFrame 
 	    ofView: (NSView *)controlView
-  atCharacterIndex: (unsigned)charIndex 
+  atCharacterIndex: (NSUInteger)charIndex 
       untilMouseUp: (BOOL)flag
 {
   if ([controlView respondsToSelector: @selector(delegate)])
diff --git a/Source/NSTextBlock.m b/Source/NSTextBlock.m
index b99f9de..1994fd4 100644
--- a/Source/NSTextBlock.m
+++ b/Source/NSTextBlock.m
@@ -72,7 +72,7 @@
 {
   if (edge >= sizeof(_borderColorForEdge) / sizeof(_borderColorForEdge[0]))
     [NSException raise: NSInvalidArgumentException
-                 format: @"invalid edge %d", edge];
+                 format: @"invalid edge %lu", (unsigned long)edge];
   ASSIGN(_borderColorForEdge[edge], color);
 }
 
@@ -167,7 +167,7 @@
 		 format: @"invalid layer %d", layer];
   if (edge >= sizeof(_width[0]) / sizeof(_width[0][0]))
     [NSException raise: NSInvalidArgumentException
-		 format: @"invalid edge %d", edge];
+		 format: @"invalid edge %lu", (unsigned long)edge];
   return _width[layer][edge];
 }
 
@@ -179,7 +179,7 @@
 		 format: @"invalid layer %d", layer];
   if (edge >= sizeof(_width[0]) / sizeof(_width[0][0]))
     [NSException raise: NSInvalidArgumentException
-		 format: @"invalid edge %d", edge];
+		 format: @"invalid edge %lu", (unsigned long)edge];
   return _widthType[layer][edge];
 }
 
@@ -193,7 +193,7 @@
 		 format: @"invalid layer %d", layer];
   if (edge >= sizeof(_width[0]) / sizeof(_width[0][0]))
     [NSException raise: NSInvalidArgumentException
-		 format: @"invalid edge %d", edge];
+		 format: @"invalid edge %lu", (unsigned long)edge];
   _width[layer][edge] = val;
   _widthType[layer][edge] = type;
 }
diff --git a/Source/NSTextField.m b/Source/NSTextField.m
index 4993f9b..05c5399 100644
--- a/Source/NSTextField.m
+++ b/Source/NSTextField.m
@@ -170,7 +170,7 @@ static Class textFieldCellClass;
       else
         {
           NSText *text = [_window fieldEditor: YES  forObject: self];
-          int length;
+          NSInteger length;
 
           if ([text superview] != nil)
             if ([text resignFirstResponder] == NO)
diff --git a/Source/NSTextFieldCell.m b/Source/NSTextFieldCell.m
index 9c2754e..3676d0c 100644
--- a/Source/NSTextFieldCell.m
+++ b/Source/NSTextFieldCell.m
@@ -312,7 +312,7 @@
       [aCoder encodeBool: [self drawsBackground] forKey: @"NSDrawsBackground"];
       if ([self isBezeled])
         {
-          [aCoder encodeInt: [self bezelStyle] forKey: @"NSTextBezelStyle"];
+          [aCoder encodeInteger: [self bezelStyle] forKey: @"NSTextBezelStyle"];
         }
     }
   else
@@ -348,7 +348,7 @@
         }
       if ([aDecoder containsValueForKey: @"NSTextBezelStyle"])
         {
-          [self setBezelStyle: [aDecoder decodeIntForKey: 
+          [self setBezelStyle: [aDecoder decodeIntegerForKey: 
                                              @"NSTextBezelStyle"]];
         }
     }
diff --git a/Source/NSTextStorage.m b/Source/NSTextStorage.m
index e4401f3..6526dd6 100644
--- a/Source/NSTextStorage.m
+++ b/Source/NSTextStorage.m
@@ -140,7 +140,7 @@ static NSNotificationCenter *nc = nil;
  *	The range argument to edited:... is the range in the original string
  *	(before the edit).
  */
-- (void) edited: (unsigned)mask range: (NSRange)old changeInLength: (int)delta
+- (void) edited: (NSUInteger)mask range: (NSRange)old changeInLength: (NSInteger)delta
 {
 
   NSDebugLLog(@"NSText", @"edited:range:changeInLength: called");
@@ -190,9 +190,9 @@ static NSNotificationCenter *nc = nil;
 - (void) processEditing
 {
   NSRange	r;
-  int original_delta;
-  unsigned int i;
-  unsigned length;
+  NSInteger original_delta;
+  NSUInteger i;
+  NSUInteger length;
 
   NSDebugLLog(@"NSText", @"processEditing called in NSTextStorage.");
 
@@ -280,7 +280,7 @@ static NSNotificationCenter *nc = nil;
  *	during processEditing... editedRange.location will be NSNotFound if
  *	nothing has been edited.
  */       
-- (unsigned) editedMask
+- (NSUInteger) editedMask
 {
   return _editedMask;
 }
@@ -290,7 +290,7 @@ static NSNotificationCenter *nc = nil;
   return _editedRange;
 }
 
-- (int) changeInLength
+- (NSInteger) changeInLength
 {
   return _editedDelta;
 }
diff --git a/Source/NSTextView.m b/Source/NSTextView.m
index 0095a4e..d908c0f 100644
--- a/Source/NSTextView.m
+++ b/Source/NSTextView.m
@@ -173,7 +173,7 @@ Interface for a bunch of internal methods that need to be cleaned up.
 @private
   NSColor *backgroundColor;
   NSParagraphStyle *paragraphStyle;
-  unsigned int flags;
+  NSUInteger flags;
   NSColor *insertionColor;
   NSDictionary *linkAttr;
   NSDictionary *markAttr;
@@ -182,7 +182,7 @@ Interface for a bunch of internal methods that need to be cleaned up.
 }
 - (NSColor *) backgroundColor;
 - (NSParagraphStyle *) paragraphStyle;
-- (unsigned int) flags;
+- (NSUInteger) flags;
 - (NSColor *) insertionColor;
 - (NSDictionary *) linkAttributes;
 - (NSDictionary *) markAttributes;
@@ -232,7 +232,7 @@ Interface for a bunch of internal methods that need to be cleaned up.
 	[aDecoder decodeObjectForKey: @"NSBackgroundColor"]);
       ASSIGN(paragraphStyle,
 	[aDecoder decodeObjectForKey: @"NSDefaultParagraphStyle"]);
-      flags = [aDecoder decodeIntForKey: @"NSFlags"];
+      flags = [aDecoder decodeIntegerForKey: @"NSFlags"];
       ASSIGN(insertionColor,
 	[aDecoder decodeObjectForKey: @"NSInsertionColor"]);
       ASSIGN(linkAttr, [aDecoder decodeObjectForKey: @"NSLinkAttributes"]);
@@ -250,7 +250,7 @@ Interface for a bunch of internal methods that need to be cleaned up.
     {	
       [coder encodeObject: backgroundColor forKey: @"NSBackgroundColor"];
       [coder encodeObject: paragraphStyle forKey: @"NSDefaultParagraphStyle"];
-      [coder encodeInt: flags forKey: @"NSFlags"];
+      [coder encodeInteger: flags forKey: @"NSFlags"];
       [coder encodeObject: insertionColor forKey: @"NSInsertionColor"];
       [coder encodeObject: linkAttr forKey: @"NSLinkAttributes"];
       [coder encodeObject: markAttr forKey: @"NSMarkedAttributes"];
@@ -279,7 +279,7 @@ Interface for a bunch of internal methods that need to be cleaned up.
   return paragraphStyle;
 }
 
-- (unsigned int) flags
+- (NSUInteger) flags
 {
   return flags;
 }
@@ -435,7 +435,7 @@ override eg. -setEditable: to take some particular action when
 editing is turned on or off.
 */
 - (void) _syncTextViewsByCalling: (SEL)action
-		       withFlag: (BOOL)flag
+                        withFlag: (BOOL)flag
 {
   NSArray *array;
   NSUInteger i, count;
@@ -932,7 +932,7 @@ that makes decoding and encoding compatible with the old code.
       if ([aDecoder containsValueForKey: @"NSSharedData"])
         {
           NSTextViewSharedData *shared;
-          unsigned int flags;
+          NSUInteger flags;
           
           shared = [aDecoder decodeObjectForKey: @"NSSharedData"];
           flags = [shared flags];
@@ -991,8 +991,7 @@ that makes decoding and encoding compatible with the old code.
     {
       BOOL flag;
       NSTextContainer *aTextContainer; 
-      int version = [aDecoder versionForClassName: 
-				  @"NSTextView"];
+      NSInteger version = [aDecoder versionForClassName: @"NSTextView"];
 
       /* Common stuff for all versions. */
       _delegate  = [aDecoder decodeObject];
@@ -3177,7 +3176,7 @@ Scroll so that the beginning of the range is visible.
 
 /* not the same as NSMakeRange! */
 static inline
-NSRange MakeRangeFromAbs (unsigned a1, unsigned a2)
+NSRange MakeRangeFromAbs (NSUInteger a1, NSUInteger a2)
 {
   if (a1 < a2)
     return NSMakeRange(a1, a2 - a1);
@@ -4629,7 +4628,7 @@ shouldRemoveMarker: (NSRulerMarker *)marker
   NSSpellChecker *sp = [NSSpellChecker sharedSpellChecker];
   NSString *misspelledWord = nil;
   NSRange errorRange;
-  int count = 0;
+  NSInteger count = 0;
 
   if (sp == nil)
     {
@@ -4647,7 +4646,7 @@ shouldRemoveMarker: (NSRulerMarker *)marker
       [self setSelectedRange: errorRange];
       [self scrollRangeToVisible: errorRange];
 
-      misspelledWord = [[self string] substringFromRange: errorRange];
+      misspelledWord = [[self string] substringWithRange: errorRange];
       [sp updateSpellingPanelWithMisspelledWord: misspelledWord];
     }
   else
@@ -5733,8 +5732,7 @@ other than copy/paste or dragging. */
 	      }
 	  }
 
-	proposedRange = MakeRangeFromAbs(endIndex,
-					 startIndex);
+	proposedRange = MakeRangeFromAbs(endIndex, startIndex);
 
 	chosenRange = [self selectionRangeForProposedRange: proposedRange
 			granularity: granularity];
@@ -6182,7 +6180,7 @@ or add guards
   {
     NSSpellChecker *sp = [NSSpellChecker sharedSpellChecker];
     NSInteger start = 0;
-    int count;
+    NSInteger count;
     // FIXME: doing the spellcheck on this substring could create false-positives
     // if a word is split in half.. so the range should be expanded to the 
     // nearest word boundary
diff --git a/Source/NSTextView_actions.m b/Source/NSTextView_actions.m
index b7cdf5a..49580f7 100644
--- a/Source/NSTextView_actions.m
+++ b/Source/NSTextView_actions.m
@@ -820,7 +820,7 @@ added to the selection (1,3).
 
 */
 
-- (unsigned int) _movementOrigin
+- (NSUInteger) _movementOrigin
 {
   NSRange range = [self selectedRange];
 
diff --git a/Source/NSToolbar.m b/Source/NSToolbar.m
index eda4f98..de7fe37 100644
--- a/Source/NSToolbar.m
+++ b/Source/NSToolbar.m
@@ -77,7 +77,7 @@ static GSValidationCenter *vc = nil;
 {
   NSMutableArray *result = [NSMutableArray array];
   NSArray *keys = [self valueForKey: key];
-  int i, n = 0;
+  NSInteger i, n = 0;
   
   if (keys == nil)
     return nil;
@@ -1076,12 +1076,12 @@ static GSValidationCenter *vc = nil;
   [_toolbarView _setUsesStandardBackgroundColor: standard];
 }
 
-- (int) _indexOfItem: (NSToolbarItem *)item
+- (NSInteger) _indexOfItem: (NSToolbarItem *)item
 {
   return [_items indexOfObjectIdenticalTo: item];
 }
 
-- (void) _insertPassivelyItem: (NSToolbarItem *)item atIndex: (int)newIndex
+- (void) _insertPassivelyItem: (NSToolbarItem *)item atIndex: (NSInteger)newIndex
 {
   if (![_items containsObject: item])
     {
@@ -1264,7 +1264,7 @@ static GSValidationCenter *vc = nil;
 }
 
 - (void) _insertItemWithItemIdentifier: (NSString *)itemIdentifier 
-                               atIndex: (int)index 
+                               atIndex: (NSInteger)index 
                              broadcast: (BOOL)broadcast
 {
   NSToolbarItem *item = nil;
@@ -1304,7 +1304,7 @@ static GSValidationCenter *vc = nil;
     
 }
 
-- (void) _removeItemAtIndex: (int)index broadcast: (BOOL)broadcast
+- (void) _removeItemAtIndex: (NSInteger)index broadcast: (BOOL)broadcast
 {
   id item = [_items objectAtIndex: index];
   
@@ -1321,7 +1321,7 @@ static GSValidationCenter *vc = nil;
   [self _saveConfig];
 }
 
-- (void) _concludeRemoveItem: (NSToolbarItem *)item atIndex: (int)index broadcast: (BOOL)broadcast
+- (void) _concludeRemoveItem: (NSToolbarItem *)item atIndex: (NSInteger)index broadcast: (BOOL)broadcast
 {
   [nc postNotificationName: NSToolbarDidRemoveItemNotification
                     object: self
@@ -1367,7 +1367,7 @@ static GSValidationCenter *vc = nil;
     }
 }
 
-- (void) _moveItemFromIndex: (int)index toIndex: (int)newIndex broadcast: (BOOL)broadcast
+- (void) _moveItemFromIndex: (NSInteger)index toIndex: (NSInteger)newIndex broadcast: (BOOL)broadcast
 {
   id item;
 
diff --git a/Source/NSToolbarFrameworkPrivate.h b/Source/NSToolbarFrameworkPrivate.h
index d19db02..b65dbb0 100644
--- a/Source/NSToolbarFrameworkPrivate.h
+++ b/Source/NSToolbarFrameworkPrivate.h
@@ -69,14 +69,14 @@
 
 // Private methods with broadcast support
 - (void) _insertItemWithItemIdentifier: (NSString *)itemIdentifier 
-                               atIndex: (int)index 
+                               atIndex: (NSInteger)index 
                              broadcast: (BOOL)broadcast;
-- (void) _removeItemAtIndex: (int)index broadcast: (BOOL)broadcast;
+- (void) _removeItemAtIndex: (NSInteger)index broadcast: (BOOL)broadcast;
 - (void) _setAllowsUserCustomization: (BOOL)flag broadcast: (BOOL)broadcast;
 - (void) _setAutosavesConfiguration: (BOOL)flag broadcast: (BOOL)broadcast;
 - (void) _setConfigurationFromDictionary: (NSDictionary *)configDict 
                                broadcast: (BOOL)broadcast;
-- (void) _moveItemFromIndex: (int)index toIndex: (int)newIndex broadcast: (BOOL)broadcast;
+- (void) _moveItemFromIndex: (NSInteger)index toIndex: (NSInteger)newIndex broadcast: (BOOL)broadcast;
 - (void) _setDisplayMode: (NSToolbarDisplayMode)displayMode 
                broadcast: (BOOL)broadcast;
 - (void) _setSizeMode: (NSToolbarSizeMode)sizeMode 
@@ -85,11 +85,11 @@
 
 // Few other private methods
 - (void) _build;
-- (int) _indexOfItem: (NSToolbarItem *)item;
+- (NSInteger) _indexOfItem: (NSToolbarItem *)item;
 - (void) _concludeRemoveItem: (NSToolbarItem *)item 
-         atIndex: (int)index 
-         broadcast: (BOOL)broadcast;
-- (void) _insertPassivelyItem: (NSToolbarItem *)item atIndex: (int)newIndex;
+                     atIndex: (NSInteger)index 
+                   broadcast: (BOOL)broadcast;
+- (void) _insertPassivelyItem: (NSToolbarItem *)item atIndex: (NSInteger)newIndex;
 - (void) _performRemoveItem: (NSToolbarItem *)item; // Used by drag setup
 - (NSToolbar *) _toolbarModel;
 - (void) _validate: (NSWindow *)observedWindow;
diff --git a/Source/NSToolbarItem.m b/Source/NSToolbarItem.m
index 72a9f22..25c8136 100644
--- a/Source/NSToolbarItem.m
+++ b/Source/NSToolbarItem.m
@@ -156,9 +156,9 @@ NSString *GSMovableToolbarItemPboardType = @"GSMovableToolbarItemPboardType";
  
 - (void) layout
 {
-  float textWidth, layoutedWidth = -1, layoutedHeight = -1;
+  CGFloat textWidth, layoutedWidth = -1, layoutedHeight = -1;
   NSFont *font;
-  unsigned int borderMask = [[[_toolbarItem toolbar] _toolbarView] borderMask];
+  NSUInteger borderMask = [[[_toolbarItem toolbar] _toolbarView] borderMask];
   NSSize labelSize = NSZeroSize;
 
   font = NormalFont;
@@ -287,7 +287,7 @@ NSString *GSMovableToolbarItemPboardType = @"GSMovableToolbarItemPboardType";
           index = [toolbar _indexOfItem: _toolbarItem];
         }
 	  [GSToolbarView setDraggedItemIndex:index];
-      [pboard setString: [NSString stringWithFormat:@"%d", index] 
+      [pboard setString: [NSString stringWithFormat:@"%ld", (long)index] 
               forType: GSMovableToolbarItemPboardType];
           
       [self dragImage: image 
@@ -603,9 +603,9 @@ NSString *GSMovableToolbarItemPboardType = @"GSMovableToolbarItemPboardType";
 - (void) layout
 {
   NSView *view = [_toolbarItem view];
-  float textWidth, layoutedWidth = -1, layoutedHeight = -1;
+  CGFloat textWidth, layoutedWidth = -1, layoutedHeight = -1;
   NSFont *font;
-  unsigned int borderMask = [[[_toolbarItem toolbar] _toolbarView] borderMask];
+  NSUInteger borderMask = [[[_toolbarItem toolbar] _toolbarView] borderMask];
   NSSize labelSize = NSZeroSize;
   
   font = NormalFont;
@@ -777,7 +777,7 @@ NSString *GSMovableToolbarItemPboardType = @"GSMovableToolbarItemPboardType";
           index = [toolbar _indexOfItem: _toolbarItem];
         }
 	  [GSToolbarView setDraggedItemIndex:index];
-      [pboard setString: [NSString stringWithFormat:@"%d", index] 
+      [pboard setString: [NSString stringWithFormat:@"%ld", (long)index] 
               forType: GSMovableToolbarItemPboardType];
       
       [self dragImage: image 
diff --git a/Source/NSView.m b/Source/NSView.m
index 8cabdb0..1bd325a 100644
--- a/Source/NSView.m
+++ b/Source/NSView.m
@@ -82,7 +82,7 @@
 /*
  * We need a fast array that can store objects without retain/release ...
  */
-#define GSI_ARRAY_TYPES		GSUNION_OBJ
+#define GSI_ARRAY_TYPES		GSUNION_OBJ|GSUNION_PTR
 #define GSI_ARRAY_NO_RELEASE	1
 #define GSI_ARRAY_NO_RETAIN	1
 
@@ -249,6 +249,16 @@ GSSetDragTypes(NSView* obj, NSArray *types)
     }
 }
 
+- (NSMutableArray *) _trackingRects
+{
+    return _tracking_rects;
+}
+
+- (NSMutableArray *) _cursorRects
+{
+    return _cursor_rects;
+}
+
 /*
  *	The [-_matrixFromWindow] method returns a matrix that can be used to
  *	map coordinates in the windows coordinate system to coordinates in the
@@ -4145,7 +4155,7 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
   return 0.0;
 }
 
-- (BOOL) knowsPagesFirst: (int*)firstPageNum last: (int*)lastPageNum
+- (BOOL) knowsPagesFirst: (NSInteger *)firstPageNum last: (NSInteger *)lastPageNum
 {
   return NO;
 }
@@ -4197,7 +4207,7 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
 /*
  * Writing Conforming PostScript
  */
-- (void) beginPage: (int)ordinalNum
+- (void) beginPage: (NSInteger)ordinalNum
              label: (NSString*)aString
               bBox: (NSRect)pageRect
              fonts: (NSString*)fontNames
@@ -4221,19 +4231,19 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
                  createdBy: (NSString*)anApplication
                      fonts: (NSString*)fontNames
                    forWhom: (NSString*)user
-                     pages: (int)numPages
+                     pages: (NSInteger)numPages
                      title: (NSString*)aTitle
 {
   NSPrintOperation *printOp = [NSPrintOperation currentOperation];
   NSGraphicsContext *ctxt = [printOp context];
 
   [ctxt beginPrologueBBox: boundingBox
-	      creationDate: dateCreated
-        createdBy: anApplication
-        fonts: fontNames
-        forWhom: user
-        pages: numPages
-        title: aTitle];
+             creationDate: dateCreated
+                createdBy: anApplication
+                    fonts: fontNames
+                  forWhom: user
+                    pages: numPages
+                    title: aTitle];
 }
 
 - (void) addToPageSetup
@@ -4326,8 +4336,8 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
 - (NSAttributedString *) pageFooter
 {
   return [[[NSAttributedString alloc] initWithString:
-		  [NSString stringWithFormat:@"Page %d", 
-			    [[NSPrintOperation currentOperation] currentPage]]] 
+		  [NSString stringWithFormat:@"Page %ld", 
+			    (long)[[NSPrintOperation currentOperation] currentPage]]] 
 	     autorelease];
 }
 
@@ -4412,7 +4422,7 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
 - (void) beginPageInRect: (NSRect)aRect 
              atPlacement: (NSPoint)location
 {
-  int nup;
+  NSInteger nup;
   NSRect bounds;
   NSPrintOperation *printOp = [NSPrintOperation currentOperation];
   NSGraphicsContext *ctxt = [printOp context];
@@ -4435,12 +4445,12 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
       bounds = aRect;
     }
 
-  nup = [[dict objectForKey: NSPrintPagesPerSheet] intValue];
+  nup = [[dict objectForKey: NSPrintPagesPerSheet] integerValue];
   if (nup > 1)
     {
-      int page;
-      float xoff, yoff;
-      float scale;
+      NSInteger page;
+      CGFloat xoff, yoff;
+      CGFloat scale;
 
       DPSPrintf(ctxt, "/__GSpagesaveobject save def\n");
 
@@ -4456,7 +4466,7 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
       if (nup == 2)
         yoff = 0;
       else
-        yoff = (int)((nup-page-1) / (nup/2));
+        yoff = (NSInteger)((nup-page-1) / (nup/2));
       yoff *= NSHeight(bounds) * scale;
       DPStranslate(ctxt, xoff, yoff);
       DPSgsave(ctxt);
@@ -4486,7 +4496,7 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
 
 - (void) endDocument
 {
-  int first, last, current, pages;
+  NSInteger first, last, current, pages;
   NSPrintOperation *printOp = [NSPrintOperation currentOperation];
   NSGraphicsContext *ctxt = [printOp context];
   NSDictionary *dict = [[printOp printInfo] dictionary];
@@ -4498,7 +4508,7 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
 
   if (pages == 0)
     {
-      int nup = [[dict objectForKey: NSPrintPagesPerSheet] intValue];
+      NSInteger nup = [[dict objectForKey: NSPrintPagesPerSheet] integerValue];
       current = [printOp currentPage];
       pages = current - first; // Current is 1 more than the last page
       if (nup > 1)
@@ -4557,8 +4567,7 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
           vFlags |= 0x80000000;
         }
       
-      [aCoder encodeInt: vFlags 
-	      forKey: @"NSvFlags"];
+      [aCoder encodeInteger: vFlags forKey: @"NSvFlags"];
 
       //
       // Don't attempt to archive the superview of a view which is the
@@ -4665,7 +4674,7 @@ static NSView* findByTag(NSView *view, NSInteger aTag, NSUInteger *level)
         }
       if ([aDecoder containsValueForKey: @"NSvFlags"])
         {
-          NSUInteger vFlags = [aDecoder decodeIntForKey: @"NSvFlags"];
+          NSUInteger vFlags = [aDecoder decodeIntegerForKey: @"NSvFlags"];
 	  
           // We are lucky here, Apple use the same constants
           // in the lower bits of the flags
diff --git a/Source/NSWindow.m b/Source/NSWindow.m
index 02f54c7..17a8d97 100644
--- a/Source/NSWindow.m
+++ b/Source/NSWindow.m
@@ -124,7 +124,7 @@ BOOL GSViewAcceptsDrag(NSView *v, id<NSDraggingInfo> dragInfo);
 @end
 
 @interface NSScreen (PrivateMethods)
-- (id) _initWithScreenNumber: (int)screen;
+- (id) _initWithScreenNumber: (NSInteger)screen;
 @end
 
 @interface NSApplication(Inactive)
@@ -888,8 +888,8 @@ many times.
 
 - (NSString*) description
 {
-  return [[super description] stringByAppendingFormat: @"Number: %d Title: %@",
-    [self windowNumber], [self title]];
+  return [[super description] stringByAppendingFormat: @"Number: %ld Title: %@",
+    (long)[self windowNumber], [self title]];
 }
 
 - (void) _startBackendWindow
@@ -1156,10 +1156,10 @@ many times.
 - (id) initWithWindowRef: (void *)windowRef
 {
   NSRect contentRect;
-  unsigned int aStyle;
+  NSUInteger aStyle;
   NSBackingStoreType bufferingType;
   NSScreen* aScreen;
-  int screen;
+  NSInteger screen;
   NSInteger winNum;
   GSDisplayServer *srv = GSCurrentServer();
 
@@ -2680,7 +2680,7 @@ discardCursorRectsForView(NSView *theView)
 
       if (theView->_rFlags.has_subviews)
         {
-          NSArray *s = theView->_sub_views;
+          NSArray *s = [theView subviews];
           NSUInteger count = [s count];
 
           if (count)
@@ -2743,7 +2743,7 @@ resetCursorRectsForView(NSView *theView)
 
       if (theView->_rFlags.has_subviews)
         {
-          NSArray *s = theView->_sub_views;
+          NSArray *s = [theView subviews];
           NSUInteger count = [s count];
 
           if (count)
@@ -3439,7 +3439,7 @@ resetCursorRectsForView(NSView *theView)
  * loop status */
 - (NSPoint) mouseLocationOutsideOfEventStream
 {
-  int screen;
+  NSInteger screen;
   NSPoint p;
 
   screen = [_screen screenNumber];
@@ -3481,7 +3481,7 @@ resetCursorRectsForView(NSView *theView)
   if (theView->_rFlags.has_trkrects)
     {
       BOOL isFlipped = [theView isFlipped];
-      NSArray *tr = theView->_tracking_rects;
+      NSArray *tr = [theView _trackingRects];
       NSUInteger count = [tr count];
 
       /*
@@ -3577,7 +3577,7 @@ resetCursorRectsForView(NSView *theView)
    */
   if (theView->_rFlags.has_subviews)
     {
-      NSArray *sb = theView->_sub_views;
+      NSArray *sb = [theView subviews];
       NSUInteger count = [sb count];
 
       if (count > 0)
@@ -3599,7 +3599,7 @@ resetCursorRectsForView(NSView *theView)
 {
   if (theView->_rFlags.valid_rects)
     {
-      NSArray *tr = theView->_cursor_rects;
+      NSArray *tr = [theView _cursorRects];
       NSUInteger count = [tr count];
 
       // Loop through cursor rectangles
@@ -3667,7 +3667,7 @@ resetCursorRectsForView(NSView *theView)
    */
   if (theView->_rFlags.has_subviews)
     {
-      NSArray *sb = theView->_sub_views;
+      NSArray *sb = [theView subviews];
       NSUInteger count = [sb count];
 
       if (count > 0)
@@ -3988,7 +3988,7 @@ resetCursorRectsForView(NSView *theView)
       case NSAppKitDefined:
         {
           id dragInfo;
-          int action;
+          NSInteger action;
           NSEvent *e;
           GSAppKitSubtype sub = [theEvent subtype];
 
diff --git a/Source/NSWorkspace.m b/Source/NSWorkspace.m
index e9e9d69..ee8054c 100644
--- a/Source/NSWorkspace.m
+++ b/Source/NSWorkspace.m
@@ -1711,8 +1711,8 @@ launchIdentifiers: (NSArray **)identifiers
 
   if (apps == nil)
     {
-      NSMutableArray    *m;
-      unsigned          count;
+      NSMutableArray *m;
+      NSUInteger count;
 
       apps = GSLaunched(nil, NO);
       apps = m = AUTORELEASE([apps mutableCopy]);
@@ -1809,8 +1809,8 @@ launchIdentifiers: (NSArray **)identifiers
 {
   NSArray		*volumes;
   NSMutableArray	*names;
-  unsigned		count;
-  unsigned		i;
+  NSUInteger		count;
+  NSUInteger		i;
 
   volumes = [self mountedLocalVolumePaths];
   count = [volumes count];
@@ -3217,7 +3217,7 @@ launchIdentifiers: (NSArray **)identifiers
 	    }
 	  else if ([when timeIntervalSinceNow] < -5.0)
 	    {
-	      int		result;
+	      NSInteger result;
 
 	      DESTROY(when);
               result = NSRunAlertPanel(appName,
diff --git a/Source/linking.m b/Source/linking.m
index 4f73601..d3b96bd 100644
--- a/Source/linking.m
+++ b/Source/linking.m
@@ -3,6 +3,7 @@
 #import "AppKit/AppKit.h"
 #import "GNUstepGUI/GSFontInfo.h"
 
+void __objc_gui_linking(void);
 void __objc_gui_linking(void)
 {
   [GSFontInfo class];
diff --git a/Source/nsimage-tiff.h b/Source/nsimage-tiff.h
index 6f3fdd0..14925bb 100644
--- a/Source/nsimage-tiff.h
+++ b/Source/nsimage-tiff.h
@@ -38,6 +38,7 @@
 
 #include <tiffio.h>
 #include <sys/types.h>
+#import <Foundation/NSObjCRuntime.h>
 
 /* Structure to store common information about a tiff. */
 typedef struct {
@@ -66,16 +67,16 @@ typedef struct {
     uint16 *blue;
 } NSTiffColormap;
 
-typedef char* realloc_data_callback(char* data, long size);
+typedef char* realloc_data_callback(char* data, NSUInteger size);
 
-extern TIFF* NSTiffOpenDataRead(const char* data, long size);
-extern TIFF* NSTiffOpenDataWrite(char **data, long *size);
+extern TIFF* NSTiffOpenDataRead(const char* data, NSUInteger size);
+extern TIFF* NSTiffOpenDataWrite(char **data, NSUInteger *size);
 extern int   NSTiffClose(TIFF* image);
 
 extern int   NSTiffGetImageCount(TIFF* image);
 extern int   NSTiffWrite(TIFF *image, NSTiffInfo *info, unsigned char *data);
 extern int   NSTiffRead(TIFF *image, NSTiffInfo *info, unsigned char *data);
-extern NSTiffInfo* NSTiffGetInfo(int imageNumber, TIFF* image);
+extern NSTiffInfo* NSTiffGetInfo(NSInteger imageNumber, TIFF* image);
 
 extern NSTiffColormap* NSTiffGetColormap(TIFF* image);
 
diff --git a/Source/tiff.m b/Source/tiff.m
index 33067fe..cf70232 100644
--- a/Source/tiff.m
+++ b/Source/tiff.m
@@ -64,6 +64,7 @@
 #import <Foundation/NSString.h>
 #import <Foundation/NSDictionary.h>
 #import <Foundation/NSEnumerator.h>
+#import <Foundation/NSException.h>
 #import "GSGuiPrivate.h"
 
 #include <math.h>
@@ -73,13 +74,23 @@
 #include <unistd.h>		/* for L_SET, etc definitions */
 #endif /* !__WIN32__ */
 
+#define IS_SIGNED(type) (((type)-1) < 0)
+
+#define MAX_TYPE(type)                      \
+({                                          \
+  static const int __size = sizeof(type);   \
+  IS_SIGNED(type)                           \
+  ? (__size == 8 ? INT64_MAX : (__size == 4 ? INT32_MAX : (__size == 2 ? INT16_MAX : INT8_MAX)))        \
+  : (__size == 8 ? UINT64_MAX : (__size == 4 ? UINT32_MAX : (__size == 2 ? UINT16_MAX : UINT8_MAX)));   \
+})
+
 typedef struct {
-  char* data;
-  long  size;
-  long  position;
-  char  mode;
-  char **outdata;
-  long *outposition;
+  char*      data;
+  NSUInteger size;
+  NSUInteger position;
+  char       mode;
+  char       **outdata;
+  NSUInteger *outposition;
 } chandle_t;
 
 static int tiff_error_handler_set = 0;
@@ -108,10 +119,16 @@ static tsize_t
 TiffHandleRead(thandle_t handle, tdata_t buf, tsize_t count)
 {
   chandle_t* chand = (chandle_t *)handle;
+  NSCParameterAssert((chand->size - chand->position) > 0);
+  NSCParameterAssert((chand->size - chand->position) < MAX_TYPE(tsize_t));  
   if (chand->position >= chand->size)
-    return 0;
+    {
+      return 0;
+    }
   if (chand->position + count > chand->size)
-    count = chand->size - chand->position;
+    {
+      count = (tsize_t)(chand->size - chand->position);
+    }
   memcpy(buf, chand->data + chand->position, count);
   return count;
 }
@@ -152,7 +169,8 @@ TiffHandleSeek(thandle_t handle, toff_t offset, int mode)
       chand->position += offset; break;
       break;
     }
-  return chand->position;
+  NSCAssert(chand->position < MAX_TYPE(toff_t), @"TIFF data too large");
+  return (toff_t)chand->position;
 }
 
 static int
@@ -169,16 +187,18 @@ static toff_t
 TiffHandleSize(thandle_t handle)
 {
   chandle_t* chand = (chandle_t *)handle;
-  return chand->size;
+  NSCParameterAssert(chand->size < MAX_TYPE(toff_t));
+  return (toff_t)chand->size;
 }
 
 static int
 TiffHandleMap(thandle_t handle, tdata_t* data, toff_t* size)
 {
   chandle_t* chand = (chandle_t *)handle;
+  NSCParameterAssert(chand->size < MAX_TYPE(toff_t));
   
   *data = chand->data;
-  *size = chand->size;
+  *size = (toff_t)chand->size;
     
   return 1;
 }
@@ -191,7 +211,7 @@ TiffHandleUnmap(thandle_t handle, tdata_t data, toff_t size)
 
 /* Open a tiff from a stream. Returns NULL if can't read tiff information.  */
 TIFF* 
-NSTiffOpenDataRead(const char* data, long size)
+NSTiffOpenDataRead(const char* data, NSUInteger size)
 {
   chandle_t* handle;
 
@@ -207,7 +227,7 @@ NSTiffOpenDataRead(const char* data, long size)
   handle->outdata = 0;
   handle->position = 0;
   handle->outposition = 0;
-  handle->size = size;
+  handle->size = (tsize_t)size;
   handle->mode = 'r';
   return TIFFClientOpen("GSTiffReadData", "r",
 			(thandle_t)handle,
@@ -218,7 +238,7 @@ NSTiffOpenDataRead(const char* data, long size)
 }
 
 TIFF* 
-NSTiffOpenDataWrite(char **data, long *size)
+NSTiffOpenDataWrite(char **data, NSUInteger *size)
 {
   chandle_t* handle;
   handle = malloc(sizeof(chandle_t));
@@ -261,8 +281,9 @@ NSTiffGetImageCount(TIFF* image)
 /* Read some information about the image. Note that currently we don't
    determine numImages. */
 NSTiffInfo *      
-NSTiffGetInfo(int imageNumber, TIFF* image)
+NSTiffGetInfo(NSInteger imageNumber, TIFF* image)
 {
+  NSCParameterAssert(imageNumber < UINT32_MAX);
   NSTiffInfo* info;
   uint16 *sample_info = NULL;
 
@@ -275,7 +296,7 @@ NSTiffGetInfo(int imageNumber, TIFF* image)
     {
       if (TIFFSetDirectory(image, imageNumber) == 0)
 	return NULL;
-      info->imageNumber = imageNumber;
+      info->imageNumber = (uint32_t)imageNumber;
     }
   
   TIFFGetField(image, TIFFTAG_IMAGEWIDTH, &info->width);
@@ -366,7 +387,7 @@ NSTiffRead(TIFF *image, NSTiffInfo *info, unsigned char *data)
   uint8* buf;
   uint8* raster;
   NSTiffColormap* map;
-  int scan_line_size;
+  tmsize_t scan_line_size;
 
   if (data == NULL)
     return -1;
@@ -471,7 +492,7 @@ NSTiffWrite(TIFF *image, NSTiffInfo *info, unsigned char *data)
   int		i;
   unsigned int 	row;
   int           error = 0;
-  int           scan_line_size;
+  tmsize_t      scan_line_size;
 
   TIFFSetField(image, TIFFTAG_IMAGEWIDTH, info->width);
   TIFFSetField(image, TIFFTAG_IMAGELENGTH, info->height);
diff --git a/Support/AppKit/AppKit-Info.plist b/Support/AppKit/AppKit-Info.plist
new file mode 100644
index 0000000..1ecc08b
--- /dev/null
+++ b/Support/AppKit/AppKit-Info.plist
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>English</string>
+	<key>CFBundleExecutable</key>
+	<string>${EXECUTABLE_NAME}</string>
+	<key>CFBundleIconFile</key>
+	<string></string>
+	<key>CFBundleIdentifier</key>
+	<string>org.gnustep.${PRODUCT_NAME:rfc1034identifier}</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>${PRODUCT_NAME}</string>
+	<key>CFBundlePackageType</key>
+	<string>FMWK</string>
+	<key>CFBundleShortVersionString</key>
+	<string>1.0</string>
+	<key>CFBundleSignature</key>
+	<string>????</string>
+	<key>CFBundleVersion</key>
+	<string>1</string>
+	<key>NSHumanReadableCopyright</key>
+	<string>Copyright © 2012 __MyCompanyName__. All rights reserved.</string>
+	<key>NSPrincipalClass</key>
+	<string></string>
+</dict>
+</plist>
diff --git a/Support/AppKit/AppKit-Prefix.pch b/Support/AppKit/AppKit-Prefix.pch
new file mode 100644
index 0000000..64d4f37
--- /dev/null
+++ b/Support/AppKit/AppKit-Prefix.pch
@@ -0,0 +1,3 @@
+//
+// Prefix header for all source files of the 'Foundation' target in the 'Foundation' project
+//
\ No newline at end of file
diff --git a/Tools/GSspell.m b/Tools/GSspell.m
index 3f1d2b7..4a97c90 100644
--- a/Tools/GSspell.m
+++ b/Tools/GSspell.m
@@ -395,7 +395,7 @@ aspell_dictionaries()
 static inline unsigned int
 uniLength(unsigned char *buf, unsigned int len)
 {
-  unsigned int i, size;
+  NSUInteger i, size;
 
   for (i = 0; i < len; i++)
     {
diff --git a/configure b/configure
index 9becd01..bb827aa 100755
--- a/configure
+++ b/configure
@@ -1361,7 +1361,8 @@ Optional Features:
   --disable-aspell        Disable aspell for spellchecker
   --disable-sound          Disable sound
   --disable-speech          Disable speech server
-  --disable-cups          Disable cups printing support
+  --enable-cups           Enable use of CUPS for printing support
+  --disable-cups          Disable use of CUPS for printing support
 
 Optional Packages:
   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
@@ -5936,15 +5937,29 @@ GSCUPS_LIBS=
 GSCUPS_DATADIR=
 BUILD_GSCUPS=NO
 
-# Check whether --enable-cups was given.
+# CUPS is linked to Apple's CoreFoundation on OSX, which renders it unusable there
+case "$target_os" in
+    darwin*) # Check whether --enable-cups was given.
+if test "${enable_cups+set}" = set; then :
+  enableval=$enable_cups; enable_cups="$enableval"
+else
+  enable_cups=no
+fi
+   ;;
+    *)       # Check whether --enable-cups was given.
 if test "${enable_cups+set}" = set; then :
-  enableval=$enable_cups;
+  enableval=$enable_cups; enable_cups="$enableval"
 else
   enable_cups=yes
 fi
+ ;;
+esac
 
-
-if test $enable_cups = yes; then
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking whether we should try to use CUPS for printing support" >&5
+$as_echo_n "checking whether we should try to use CUPS for printing support... " >&6; }
+if test "$enable_cups" = yes; then
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes" >&5
+$as_echo "yes" >&6; }
   BUILD_GSCUPS=YES
   # Extract the first word of "cups-config", so it can be a program name with args.
 set dummy cups-config; ac_word=$2
@@ -6069,6 +6084,9 @@ fi
     CPPFLAGS="${orig_CPPFLAGS}"
     LDFLAGS="${orig_LDFLAGS}"
   fi
+else
+  { $as_echo "$as_me:${as_lineno-$LINENO}: result: no" >&5
+$as_echo "no" >&6; }
 fi
 
 
diff --git a/configure.ac b/configure.ac
index b67a343..421a43a 100644
--- a/configure.ac
+++ b/configure.ac
@@ -462,11 +462,15 @@ GSCUPS_LIBS=
 GSCUPS_DATADIR=
 BUILD_GSCUPS=NO
 
-AC_ARG_ENABLE(cups,
-  [  --disable-cups          Disable cups printing support],,
-  enable_cups=yes)
+# CUPS is linked to Apple's CoreFoundation on OSX, which renders it unusable there
+case "$target_os" in
+    darwin*) AC_ARG_ENABLE(cups, [  --enable-cups           Enable use of CUPS for printing support], enable_cups="$enableval", enable_cups=no)   ;;
+    *)       AC_ARG_ENABLE(cups, [  --disable-cups          Disable use of CUPS for printing support], enable_cups="$enableval", enable_cups=yes) ;;
+esac
 
-if test $enable_cups = yes; then
+AC_MSG_CHECKING(whether we should try to use CUPS for printing support)
+if test "$enable_cups" = yes; then
+  AC_MSG_RESULT(yes)
   BUILD_GSCUPS=YES
   AC_CHECK_PROG(have_cups, cups-config, yes, no)
 
@@ -500,6 +504,8 @@ if test $enable_cups = yes; then
     CPPFLAGS="${orig_CPPFLAGS}"
     LDFLAGS="${orig_LDFLAGS}"
   fi
+else
+  AC_MSG_RESULT(no)
 fi
 AC_SUBST(GSCUPS_CFLAGS)
 AC_SUBST(GSCUPS_LDFLAGS)
